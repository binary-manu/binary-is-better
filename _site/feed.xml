<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://binary-manu.github.io/binary-is-better/feed.xml" rel="self" type="application/atom+xml" /><link href="https://binary-manu.github.io/binary-is-better/" rel="alternate" type="text/html" /><updated>2022-12-29T17:53:05+01:00</updated><id>https://binary-manu.github.io/binary-is-better/feed.xml</id><title type="html">Binary is better</title><subtitle>Personal notes about my software developer things</subtitle><author><name>Emanuele Giacomelli</name></author><entry><title type="html">16-bit holidays!</title><link href="https://binary-manu.github.io/binary-is-better/development/16-bit-holidays" rel="alternate" type="text/html" title="16-bit holidays!" /><published>2022-12-29T00:00:00+01:00</published><updated>2022-12-29T00:00:00+01:00</updated><id>https://binary-manu.github.io/binary-is-better/development/16-bit-holidays</id><content type="html" xml:base="https://binary-manu.github.io/binary-is-better/development/16-bit-holidays"><![CDATA[<p>What could be better to spice up your winter holidays than some 16 bit
x86 assembly? As an exercise for removing the rust from my assembly-fu,
I wrote a small Base64 decoder purely in 8086 assembly code:</p>

<ul>
  <li>it decodes a well-encoded message 4 bytes at at time and prints 3
characters to the screen;</li>
  <li>handles padding <code class="language-plaintext highlighter-rouge">=</code>s;</li>
  <li>it does not handle faulty encodings;</li>
  <li>should use opcodes from the original 8086 only (unless I got it
wrong);</li>
  <li>real mode code, meant to be embedded into a Master Boot Record;</li>
  <li>video output is done using the BIOS via <code class="language-plaintext highlighter-rouge">int 10h</code>.</li>
</ul>

<h2 id="how-to-assemble">How to assemble</h2>

<p>You’ll need the <a href="https://flatassembler.net/">Flat Assembler (<code class="language-plaintext highlighter-rouge">fasm</code>)</a> to assemble the program.
With that installed, just run:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fasm base64.s
</code></pre></div></div>

<p>to get <code class="language-plaintext highlighter-rouge">base64.bin</code> as output. The file is already formatted to look
like a valid MBR: it’s 512 bytes long and ends with <code class="language-plaintext highlighter-rouge">55 AA</code>, so it can
be run directly using an emulator like <code class="language-plaintext highlighter-rouge">bochs</code> or <code class="language-plaintext highlighter-rouge">qemu</code>.</p>

<h2 id="how-to-run">How to run</h2>

<p>Once compiled, the simplest way to try it out is to have <code class="language-plaintext highlighter-rouge">qemu</code> run it
as if it was a floppy image. It is obviously too small to be a full
floppy, but <code class="language-plaintext highlighter-rouge">qemu</code> does not complain and we do no try to read additional
sectors:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>qemu-system-x86_64 <span class="nt">-fda</span> base64.bin
</code></pre></div></div>

<p>What does it print? Well, why don’t you try it for yourself? But if you
are in a hurry, there is a picture of it at the end of the page.</p>

<p>Of course, you can change the message and rebuild.</p>

<h2 id="the-code">The code</h2>

<div class="language-nasm highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">; A base64 decoder, written in 8086 assembly language.</span>
<span class="c1">; Assemble using the Flat Assembler (https://flatassembler.net/)</span>

<span class="c1">; Emit a raw binary file, and arrange for labels to start at 0</span>
            <span class="nf">format</span>  <span class="nv">binary</span>
            <span class="nf">org</span>     <span class="mi">0</span>

<span class="c1">; Entry point</span>
<span class="c1">; BIOS loads us at 0x7C00, but we don't know the exact segment/offset combo:</span>
<span class="c1">; it could be 07C0:0000, 0000:7C00 or any other equivalent form.</span>
<span class="c1">; So the program lives at [0x7C00, 0x7DFF].</span>
<span class="nl">start:</span>

<span class="c1">; Place the stack at [0x7E00, 0x7FFF) and enable interrupts</span>
            <span class="nf">mov</span>     <span class="nb">ax</span><span class="p">,</span> <span class="mh">07E0h</span>
            <span class="nf">mov</span>     <span class="nb">ss</span><span class="p">,</span> <span class="nb">ax</span>
            <span class="nf">mov</span>     <span class="nb">sp</span><span class="p">,</span> <span class="mh">0200h</span>
            <span class="nf">sti</span>

<span class="c1">; Jump to the label below while normalizing the segment/offset pair</span>
<span class="c1">; so that effective addresses are correct w.r.t. "org"</span>
            <span class="nf">mov</span>     <span class="nb">ax</span><span class="p">,</span> <span class="mh">07C0h</span>
            <span class="nf">mov</span>     <span class="nb">ds</span><span class="p">,</span> <span class="nb">ax</span>     <span class="c1">; init data segments</span>
            <span class="nf">mov</span>     <span class="nb">es</span><span class="p">,</span> <span class="nb">ax</span>     <span class="c1">; ...</span>
            <span class="nf">push</span>    <span class="nb">ax</span>
            <span class="nf">mov</span>     <span class="nb">ax</span><span class="p">,</span> <span class="err">@</span><span class="nv">f</span>
            <span class="nf">push</span>    <span class="nb">ax</span>
            <span class="nf">retf</span>
            
<span class="err">@@:</span>
            <span class="nf">mov</span>     <span class="nb">si</span><span class="p">,</span> <span class="nv">msg</span>

<span class="c1">; "chunk" processes 4 bytes of base64 data, yielding 3 characters            </span>
<span class="nl">chunk:</span>
            <span class="c1">; End of string?</span>
            <span class="nf">cmp</span>     <span class="kt">byte</span> <span class="p">[</span><span class="nb">si</span><span class="p">],</span> <span class="mi">0</span>
            <span class="nf">je</span>      <span class="nv">endloop</span>
            <span class="nf">xor</span>     <span class="nb">bx</span><span class="p">,</span> <span class="nb">bx</span>
            <span class="nf">mov</span>     <span class="nb">cx</span><span class="p">,</span> <span class="mi">4</span>
            <span class="nf">mov</span>     <span class="nb">di</span><span class="p">,</span> <span class="nv">c1</span>
            <span class="c1">; Initially mark c3 and c4 as padded</span>
            <span class="nf">mov</span>     <span class="kt">word</span> <span class="p">[</span><span class="nv">c3</span><span class="p">],</span> <span class="mh">0FFFFh</span>
            
<span class="nl">b64Char:</span>
            <span class="nf">lodsb</span>
            <span class="c1">; If we read a =, the chunk is padded and there</span>
            <span class="c1">; are no more bits to read.</span>
            <span class="nf">cmp</span>     <span class="nb">al</span><span class="p">,</span> <span class="s">'='</span>
            <span class="nf">je</span>      <span class="nv">printer</span>
            <span class="nf">mov</span>     <span class="nb">bl</span><span class="p">,</span> <span class="nb">al</span>
            <span class="nf">mov</span>     <span class="nb">al</span><span class="p">,</span> <span class="p">[</span><span class="nb">bx</span> <span class="o">+</span> <span class="nv">base64</span><span class="p">]</span>
            <span class="nf">stosb</span>

            <span class="nf">loop</span>    <span class="nv">b64Char</span>
            
<span class="c1">; As soon as we get here, we have read 4 b64 characters and</span>
<span class="c1">; placed them into c1, c2, c3, c4. Only the least significant</span>
<span class="c1">; 6 bits for each cX are used. But for c3 and c4, if the MSB</span>
<span class="c1">; is set it means there is no character because the block was</span>
<span class="c1">; padded.</span>
<span class="c1">; Visually: O = clear bit, I = set bit</span>
<span class="c1">;           1/2/3 = bit belongs to decoded char 1/2/3</span>
<span class="c1">; c1 = OO111111</span>
<span class="c1">; c2 = OO112222</span>
<span class="c1">; c3 = OO222233 | IIIIIIII (padding)</span>
<span class="c1">; c4 = OO333333 | IIIIIIII (padding)</span>
<span class="nl">printer:</span>
            <span class="c1">; Reassemble decoded character 1 from c1 and c2</span>
            <span class="nf">mov</span>     <span class="nb">cx</span><span class="p">,</span> <span class="mi">2</span>
            <span class="nf">mov</span>     <span class="nb">ax</span><span class="p">,</span> <span class="kt">word</span> <span class="p">[</span><span class="nv">c1</span><span class="p">]</span>       <span class="c1">; also read c2</span>
            <span class="nf">xchg</span>    <span class="nb">al</span><span class="p">,</span> <span class="nb">ah</span>
            <span class="nf">shl</span>     <span class="nb">al</span><span class="p">,</span> <span class="nb">cl</span>
            <span class="nf">mov</span>     <span class="nb">cl</span><span class="p">,</span> <span class="mi">6</span>
            <span class="nf">shr</span>     <span class="nb">ax</span><span class="p">,</span> <span class="nb">cl</span>
            <span class="nf">call</span>    <span class="nv">print_char</span>
            
            <span class="c1">; Reassemble decoded character 2 from c2 and c3,</span>
            <span class="c1">; but only if we have a c3</span>
            <span class="nf">test</span>    <span class="kt">byte</span> <span class="p">[</span><span class="nv">c3</span><span class="p">],</span> <span class="mh">80h</span>
            <span class="nf">jnz</span>     <span class="nv">endloop</span>
            
            <span class="nf">mov</span>     <span class="nb">cl</span><span class="p">,</span> <span class="mi">4</span>
            <span class="nf">mov</span>     <span class="nb">al</span><span class="p">,</span> <span class="p">[</span><span class="nv">c2</span><span class="p">]</span>
            <span class="nf">shl</span>     <span class="nb">al</span><span class="p">,</span> <span class="nb">cl</span>
            <span class="nf">mov</span>     <span class="nb">ah</span><span class="p">,</span> <span class="p">[</span><span class="nv">c3</span><span class="p">]</span>
            <span class="nf">shr</span>     <span class="nb">cl</span><span class="p">,</span> <span class="mi">1</span>
            <span class="nf">shr</span>     <span class="nb">ah</span><span class="p">,</span> <span class="nb">cl</span>
            <span class="nf">or</span>      <span class="nb">al</span><span class="p">,</span> <span class="nb">ah</span>
            <span class="nf">call</span>    <span class="nv">print_char</span>
            
            <span class="c1">; Reassemble decoded character 3 from c3 and c4,</span>
            <span class="c1">; but only if we have a c4</span>
            <span class="nf">test</span>    <span class="kt">byte</span> <span class="p">[</span><span class="nv">c4</span><span class="p">],</span> <span class="mh">80h</span>
            <span class="nf">jnz</span>     <span class="nv">endloop</span>
            
            <span class="nf">mov</span>     <span class="nb">ax</span><span class="p">,</span> <span class="kt">word</span> <span class="p">[</span><span class="nv">c3</span><span class="p">]</span>       <span class="c1">; also read c4</span>
            <span class="nf">xchg</span>    <span class="nb">al</span><span class="p">,</span> <span class="nb">ah</span>
            <span class="nf">shl</span>     <span class="nb">al</span><span class="p">,</span> <span class="nb">cl</span>
            <span class="nf">shr</span>     <span class="nb">ax</span><span class="p">,</span> <span class="nb">cl</span>
            <span class="nf">call</span>    <span class="nv">print_char</span>
            
            <span class="nf">jmp</span>     <span class="nb">ch</span><span class="nv">unk</span>
            
<span class="nl">endloop:</span>
            <span class="nf">hlt</span>
            <span class="nf">jmp</span>     <span class="nv">endloop</span>
            
<span class="c1">; Put print boilerplate in a procedure</span>
<span class="c1">; It expects the characters in AL and trashes AH, BH</span>
<span class="nl">print_char:</span>
            <span class="nf">push</span>    <span class="nb">cx</span>
            <span class="nf">xor</span>     <span class="nb">bh</span><span class="p">,</span> <span class="nb">bh</span>
            <span class="nf">xor</span>     <span class="nb">cx</span><span class="p">,</span> <span class="nb">cx</span>
            <span class="nf">mov</span>     <span class="nb">ah</span><span class="p">,</span> <span class="mh">0Eh</span>
            <span class="nf">int</span>     <span class="mh">10h</span>
            <span class="nf">pop</span>     <span class="nb">cx</span>
            <span class="nf">retn</span>

<span class="c1">; Message to decode</span>
<span class="nf">msg</span>         <span class="nv">db</span>      <span class="s">"SGFwcHkgaG9saWRheXMhISE="</span><span class="p">,</span> <span class="mi">0</span>

<span class="c1">; Table converting ASCII characters to their base64 group of 6 bits.</span>
<span class="c1">; It starts at the lowest used character (+), that's why we use "virtual"</span>
<span class="c1">; to adjust the offest below.</span>
<span class="nf">chartab</span>     <span class="nv">db</span>      <span class="mi">62</span>                                                  <span class="c1">; +</span>
            <span class="nf">rb</span>      <span class="mi">3</span>
            <span class="kd">db</span>      <span class="mi">63</span>                                                  <span class="c1">; /</span>
            <span class="kd">db</span>      <span class="mi">52</span><span class="p">,</span> <span class="mi">53</span><span class="p">,</span> <span class="mi">54</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">56</span><span class="p">,</span> <span class="mi">57</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">61</span>              <span class="c1">; 0-9</span>
            <span class="nf">rb</span>      <span class="mi">7</span>
            <span class="kd">db</span>      <span class="mi">0</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">2</span><span class="p">,</span>  <span class="mi">3</span><span class="p">,</span>  <span class="mi">4</span><span class="p">,</span>  <span class="mi">5</span><span class="p">,</span>  <span class="mi">6</span><span class="p">,</span>  <span class="mi">7</span><span class="p">,</span>  <span class="mi">8</span><span class="p">,</span>  <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span>   <span class="c1">; A-Z</span>
            <span class="kd">db</span>      <span class="mi">13</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">25</span>  <span class="c1">; ...</span>
            <span class="nf">rb</span>      <span class="mi">6</span>
            <span class="kd">db</span>      <span class="mi">26</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">38</span>  <span class="c1">; a-z</span>
            <span class="kd">db</span>      <span class="mi">39</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">41</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="mi">44</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">46</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">51</span>  <span class="c1">; ...</span>

<span class="c1">; The first used char is + (43)</span>
            <span class="nf">virtual</span> <span class="nv">at</span> <span class="nb">ch</span><span class="nv">artab</span> <span class="o">-</span> <span class="s">'+'</span>
<span class="nf">base64</span>      <span class="nv">db</span>      <span class="nv">?</span>
            <span class="nf">end</span>     <span class="nv">virtual</span>

<span class="c1">; Base64 bytes under examination</span>
<span class="c1">; Must be word-aligned, because we read them as words in some cases</span>
            <span class="nf">align</span>   <span class="mi">2</span>
<span class="nf">c1</span>          <span class="nv">db</span>      <span class="nv">?</span>
<span class="nf">c2</span>          <span class="nv">db</span>      <span class="nv">?</span>
<span class="nf">c3</span>          <span class="nv">db</span>      <span class="nv">?</span>
<span class="nf">c4</span>          <span class="nv">db</span>      <span class="nv">?</span>

<span class="c1">; Pad the program to 510 bytes, and append the MBR signature at the end.</span>
<span class="c1">; This makes it a proper MBR that can be executed by BIOS.</span>
            <span class="nf">rb</span>      <span class="mi">510</span> <span class="o">-</span> <span class="kc">$</span>
            <span class="kd">db</span>      <span class="mh">055h</span>
            <span class="kd">db</span>      <span class="mh">0AAh</span>

</code></pre></div></div>

<h2 id="sample-output">Sample output</h2>

<p><img src="/binary-is-better/assets/my/img/base64.png" alt="Output" /></p>]]></content><author><name>Emanuele Giacomelli</name></author><category term="Development" /><summary type="html"><![CDATA[What could be better to spice up your winter holidays than some 16 bit x86 assembly? As an exercise for removing the rust from my assembly-fu, I wrote a small Base64 decoder purely in 8086 assembly code:]]></summary></entry><entry><title type="html">Setup Secure Boot on Arch Linux</title><link href="https://binary-manu.github.io/binary-is-better/linux/archlinux-secure-boot" rel="alternate" type="text/html" title="Setup Secure Boot on Arch Linux" /><published>2022-12-11T00:00:00+01:00</published><updated>2022-12-11T00:00:00+01:00</updated><id>https://binary-manu.github.io/binary-is-better/linux/archlinux-secure-boot</id><content type="html" xml:base="https://binary-manu.github.io/binary-is-better/linux/archlinux-secure-boot"><![CDATA[<p>This article explains how to setup UEFI Secure Boot on Arch Linux, so
that the firmware can verify all components that sit between itself and
the kernel. This is useful if you need to dual-boot a PC that came with
Windows preinstalled and with Secure Boot enabled and you don’t want to
keep it disabled after installing Arch.</p>

<p>To keep things simple, we’ll use a VirtualBox machine running Arch as
our target system. This way, we do not have to worry about damaging a
working system by modifying the keys pre-enrolled in the firmware.</p>

<p>Only Secure Boot itself is covered: full disk encryption will be covered
in a separate article.</p>

<h2 id="prerequisites">Prerequisites</h2>

<p>To prepare our Arch machine, we’ll use <a href="https://github.com/binary-manu/arch-ansible">arch-ansible</a>, a
playbook designed to provision Arch VMs in minutes. There is already a
preset that builds a VirtualBox VM in UEFI mode.</p>

<p>This guide assumes the host is a Linux system, but it should work on
Windows hosts as well, although you’ll have to adapt the commands run on
the host or perform equivalent operations from the GUI.</p>

<p>Before starting, you’ll need to install the following tools:</p>

<ul>
  <li><a href="https://www.virtualbox.org/">VirtualBox 7 or higher</a></li>
  <li><a href="https://www.packer.io">HashiCorp Packer</a></li>
</ul>

<p>Note that VirtualBox can’t usually run alongside other hypervisors. If
you are currently running another virtualization tools such as QEMU, the
Android Emulator, VMWare Workstation or Hyper-V, you may need to stop
your VMs or disable the hypervisor first, in order to release the
hardware virtualization features of the CPU for VirtualBox to use.</p>

<h2 id="prepare-the-vm">Prepare the VM</h2>

<p>Now that the tools are in place, download <a href="https://github.com/binary-manu/arch-ansible/archive/refs/heads/master.zip">arch-ansible’s
source</a>. From the host CLI type:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># We'll keep our configurations, the playbook and the produced</span>
<span class="c"># OVF files here.</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> ~/arch-secure-boot/
<span class="nb">cd</span> ~/arch-secure-boot/
curl <span class="nt">-sLo</span> arch-ansible.zip https://github.com/binary-manu/arch-ansible/archive/refs/heads/master.zip
unzip <span class="nt">-q</span> arch-ansible.zip
<span class="nb">cd </span>arch-ansible-master
</code></pre></div></div>

<p><em>WARNING: the snippet above always fetches the most recent version of
the playbook. Due to Arch’s rolling release nature, older versions may
stop working every now and then. For the same reason, some commands may
have changed slightly over time. If the snippets below do not work as
expected, check manual pages to see if something changed.</em></p>

<p>Now we are in the root of the playbook. Before running it we must add an
extra configuration file: these extra settings prepare the disk for UEFI
boot by creating an ESP, and also add a user account:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">' &gt;&gt; ansible/group_vars/all/50-uefi.yaml

# Use the gpt_singlepart partitioning flow, which creates
# a FAT32 ESP and installs GRUB to it.
disksetup_roles_prefix: "disksetup/gpt_singlepart/"

# Set root's password
users_root_info:
    password: "secboot"

# Create a 'secboot' user with password 'secboot'
users_info:
  secboot:
    password: "secboot"
    is_admin: true
    groups: []
</span><span class="no">
EOF
</span></code></pre></div></div>

<p>After that, we can start the provisioning using Packer. This will create
a new VirtualBox VM with GUI, so you’ll see it on your screen. Inside
the VM, a complete Arch installation goes on. When it’s over, the VM
will be exported to OVF format. Don’t interact with the VM during the
process, as this may interfere with installation: for example, the
provisioner will simulate keyboard input to the machine, and if you also
type text this will disrupt the process.</p>

<p>The installation can take a while, depending on your Internet
connection.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>packer

<span class="c"># Build the machine</span>
packer build <span class="nt">-force</span> <span class="nt">-only</span> virtualbox-uefi packer-template.json

<span class="c"># Import it into VirtualBox</span>
VBoxManage import <span class="nt">--vsys</span> 0 output-virtualbox-uefi/<span class="k">*</span>.ovf
</code></pre></div></div>

<p>Now you’ll find the new VM (named <code class="language-plaintext highlighter-rouge">packer-&lt;something&gt;</code>) in VirtualBox.
Run it and Arch should start. Login with user <code class="language-plaintext highlighter-rouge">secboot</code> and password
<code class="language-plaintext highlighter-rouge">secboot</code>, then run <code class="language-plaintext highlighter-rouge">startx</code> to start XFCE.</p>

<h2 id="a-short-explanation-of-secure-boot">A short explanation of Secure Boot</h2>

<h3 id="uefi-keys">UEFI keys</h3>

<p>Secure Boot is a feature of UEFI firmwares which increases the security
of the system by booting only components (such as bootloaders and
kernels) which are <em>trusted</em>. There are two ways to mark a component as
trusted:</p>

<ul>
  <li>sign it: the component is signed using the private part of an
asymmetric key pair (usually RSA2048); the public part then needs to
be loaded into the firmware database of trusted keys;</li>
  <li>enroll its hash: the digest (usually SHA256) of such component is
stored into the firmware database of trusted hashes. In UEFI, keys and
hashes share the same database, which is described below.</li>
</ul>

<p>Both methods work, but each one have drawbacks: hashes are easier than
keys to work with. However, they change every time a file is modified,
so if a boot component is updated frequently (for example, GRUB gets
updated), the new hash must be enrolled in the firmware, which can be a
hassle.</p>

<p>Signing is more articulated, but since we only enroll the keys, as long
as those keys can be used (i.e. the have not been compromised) there is
no need to update the firmware database.</p>

<p>In this guide, we will go the signing route. Before that, we need to
briefly talk about the key infrastructure in UEFI. More details are
available <a href="https://blog.hansenpartnership.com/the-meaning-of-all-the-uefi-keys/">in this article</a>.</p>

<p>Every UEFI Secure Boot implementation starts with the <em>PK</em> (<em>Platform
Key</em>).  This is the most important key, as it is used as the root of
trust chains. Secure Boot cannot be enabled unless a PK has been
enrolled and there is usually only one PK. The PK is not directly used
to sign boot components.  Instead, it is used to:</p>

<ul>
  <li>disable Secure Boot;</li>
  <li>sign KEKs, the next level of keys.</li>
</ul>

<p>A <em>KEK</em> (<em>Key Exchange Key</em>) can be added to the UEFI only if it’s
signed with the PK, and it’s role is to sign updates to the keys/hashes
database.  There can be many KEKs enrolled at the same time.</p>

<p>The keys and hashes used to validate boot components reside in the <em>DB</em>
and <em>DBX</em> databases:</p>

<ul>
  <li>DB is an allowlist that contains keys and/or hashes. If a component is
signed with a key stored here, or its hash is stored here, the
component is allowed to boot;</li>
  <li>DBX is a denylist and works just like DB, with the obvious exception
that if a key or hash is stored here, components signed with that key
or matching that hash <em>will not</em> be allowed to boot.</li>
</ul>

<p>DBX takes precedence over DB when doing checks: a component will be
allowed to boot if it doesn’t match DBX but matches DB. If it matches
neither, it will not boot, since it cannot be verified using the
enrolled keys. Updates to DB or DBX are accepted only if signed by a
KEK.</p>

<p>This diagram summarizes signed-by relationships between keys and
databases:</p>

<p><a href="https://mermaid.live/edit#pako:eNqVkb9ugzAQxl_ldHN4AYYOhEyoUqUuSHEHC1_ACvYh2wxRyLv3wCJKhwz1dP7u99n3544dG8IS-6CnAZQHOV8NFEXxsUTb-7g0pybLErzqdTWf6wrmyehEP2-QdmXav5AYM2R9THocyYD1iYXe8-07oN2JLQ9Lxz5poSANBIOOA3CA9W_re7jSDfiyVMdzxZygYzexJ5-eZbT_emV14QEdBaetkZHdV0WhmBwpLCU0OlwVKv8QLrd8MjZxwDKFmQ6o58TfN9_t98zUVsv0HZYXPUZRafN85r1s63n8Atg1ipA"><img src="https://mermaid.ink/img/pako:eNqVkb9ugzAQxl_ldHN4AYYOhEyoUqUuSHEHC1_ACvYh2wxRyLv3wCJKhwz1dP7u99n3544dG8IS-6CnAZQHOV8NFEXxsUTb-7g0pybLErzqdTWf6wrmyehEP2-QdmXav5AYM2R9THocyYD1iYXe8-07oN2JLQ9Lxz5poSANBIOOA3CA9W_re7jSDfiyVMdzxZygYzexJ5-eZbT_emV14QEdBaetkZHdV0WhmBwpLCU0OlwVKv8QLrd8MjZxwDKFmQ6o58TfN9_t98zUVsv0HZYXPUZRafN85r1s63n8Atg1ipA?type=png" alt="" /></a></p>

<p>While a user can generate and enroll it own PK, KEKs, and DB keys, doing
so poses some issues. First, some systems, like corporate laptops, come
with Secure Boot on, so there must already be a PK and KEK, plus some
keys or hashes in the DB. Removing them will make the system unbootable
unless they are re-enrolled or the boot components are signed with the
new keys. Second, these keys are sometimes used to sign UEFI drivers and
again, removing them prevents these drivers from loading. This is
especially painful when the driver in question is the GPU one, since it
means you will no longer get video output (see <a href="https://www.reddit.com/r/archlinux/comments/pec41w/secure_boot_selfsigned_keys_nvidia_gpu_bricked/">this post on
Reddit</a>).</p>

<p>However, to enroll keys to DB, we need to know the private part of at
least one KEK or enroll a new one. And to enroll a new KEK we need the
private part of the PK.  Which we don’t usually have if these came
pre-enrolled and belong to some big vendor.  There are two solutions to
this problem.</p>

<p>The first solution involves the fact that most UEFI management GUIs
allow the enrollment of new keys even if you don’t know the PK or a KEK.
However, for the reasons above, I’d prefer not to fiddle with PK/KEK/DB.
So we move to the second solution. Meet <em>shim</em>.</p>

<h3 id="the-shim-bootloader">The <em>shim</em> bootloader</h3>

<p><a href="https://github.com/rhboot/shim"><em>shim</em></a> is an open source bootloader, designed to work as a
bridge between the default keys that come pre-enrolled in most Windows
PCs and boot components signed by the user.</p>

<p>We said that when Secure Boot is on, only signed components can boot.
And the trusted keys pre-enrolled in the UEFI usually belong to
Microsoft for a Windows PC. Thus, only Microsoft can sign stuff, And
they usually don’t. First, they don’t sign GNU GPL licensed software for
policy reasons. Second, having to sign builds of fast-moving FOSS
projects for different distros (since every distro ships its own binary
for GRUB and the kernel) would be impractical. However, Microsoft <em>signs
official pre-built shim binaries</em>. Thus, shim will usually boot on PCs
that come with Windows preinstalled, even when Secure Boot is enabled.</p>

<p>shim, by itself, does very little. It simply verifies the signature of a
next-stage bootloader (usually GRUB) and loads it. The <em>very important</em>
thing to note is that, in addition to the keys/hashes in DB, shim can
also use its own, dedicated database of keys and hashes, called the <em>MOK
(Machine Owner Key) database</em>.</p>

<p>MOKs can be enrolled by the user using a combination of command line
utilities from Linux plus a shim helper called <em>MOKManager</em>. Altering
the MOK database may make your Linux distro unbootable, but has no
effect on things signed using the other UEFI keys, so there is no risk
of loosing the video card.</p>

<p>The rest of this article will show how to setup shim and MOKManager,
generate our MOK, enroll it and use it to sign GRUB and the kernel.
We’ll start with an Arch Linux installation on a UEFI system with Secure
Boot disabled, prepare it for Secure Boot and then enable it.</p>

<p>To avoid generating and enrolling our own set of PK/KEK/DB keys into the
VM UEFI, we’ll use a new feature of VirtualBox 7.x, which can
automatically enroll well-known Microsoft keys.</p>

<h2 id="setup">Setup</h2>

<h3 id="install-shim-and-other-utils">Install shim and other utils</h3>

<p>The very first thing to do is installing shim and a bunch of utilities
that will be needed to enrolls MOKs and sign files. You’ll need to use
an AUR helper to install shim. The test machine comes with <code class="language-plaintext highlighter-rouge">yay</code>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yay <span class="nt">-S</span> shim-signed mokutil sbsigntools efitools
</code></pre></div></div>

<p>Installing this packages will <em>not</em> put shim into the ESP. We’ll need to
copy files manually. <code class="language-plaintext highlighter-rouge">pacman -Ql shim-signed</code> reveals the following:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>shim-signed /usr/
shim-signed /usr/share/
shim-signed /usr/share/shim-signed/
shim-signed /usr/share/shim-signed/fbia32.efi
shim-signed /usr/share/shim-signed/fbx64.efi
shim-signed /usr/share/shim-signed/mmia32.efi
shim-signed /usr/share/shim-signed/mmx64.efi
shim-signed /usr/share/shim-signed/shimia32.efi
shim-signed /usr/share/shim-signed/shimx64.efi
</code></pre></div></div>

<p>We need to copy the 64-bit versions of shim and MOKManager, which
correspond to <code class="language-plaintext highlighter-rouge">shimx64.efi</code> and <code class="language-plaintext highlighter-rouge">mmx64.efi</code>. They will go under
<code class="language-plaintext highlighter-rouge">/boot/efi/EFI/arch</code>, where <code class="language-plaintext highlighter-rouge">arch</code> is the folder that GRUB created
during the install. Don’t worry about breaking the non-Secure Boot
setup, this folder is duplicated as <code class="language-plaintext highlighter-rouge">/boot/efi/EFI/Boot</code>, the default
boot path to use when no boot variable is defined in the UEFI.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Copy shim and MOKManager</span>
<span class="nb">sudo cp</span> /usr/share/shim-signed/<span class="o">{</span>shim,mm<span class="o">}</span>x64.efi /boot/efi/EFI/arch

<span class="c"># Add a new boot entry for shim</span>
<span class="nb">sudo </span>efibootmgr <span class="nt">-c</span> <span class="nt">--loader</span> <span class="s1">'\EFI\arch\shimx64.efi'</span> <span class="nt">--label</span> ArchLinux
</code></pre></div></div>

<p>Note how <code class="language-plaintext highlighter-rouge">efibootmgr</code> created a new entry:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   BootCurrent: 0001
   Timeout: 0 seconds
👉 BootOrder: 0004,0000,0001,0002,0003
   Boot0000* UiApp	FvVol(7cb8bdc9-f8eb-4f34-aaea-3ee4af6516a1)/FvFile(462caa21-7614-4503-836e-8ab6f4662331)
   Boot0001* UEFI VBOX HARDDISK VBbd970c88-d62b41ba 	PciRoot(0x0)/Pci(0xd,0x0)/Sata(0,65535,0){auto_created_boot_option}
   Boot0002* UEFI PXEv4 (MAC:080027DE02FE)	PciRoot(0x0)/Pci(0x3,0x0)/MAC(080027de02fe,1)/IPv4(0.0.0.00.0.0.0,0,0){auto_created_boot_option}
   Boot0003* EFI Internal Shell	FvVol(7cb8bdc9-f8eb-4f34-aaea-3ee4af6516a1)/FvFile(7c04a583-9e3e-4f1c-ad65-e05268d0b4d1)
👉 Boot0004* ArchLinux	HD(1,GPT,7e16b474-4294-4fe3-8570-0dfec47972a9,0x800,0x100000)/File(\EFI\arch\shimx64.efi
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">BootOrder</code> line  shows in which order boot entries are tried.  shim
is 0004, the first item, so if we rebooted now, shim would be loaded.
Don’t do that yet, because shim is only a bridge that calls a next stage
bootloader, but we haven’t installed one yet.  We’ll use GRUB as our
next-stage bootloader, but before that we need to sign it, and before
signing anything, we must generate and enroll our MOK.</p>

<h3 id="mok-generation">MOK generation</h3>

<p>MOKs are simply X.509 certificates paired with their private keys, and
can be generated using <code class="language-plaintext highlighter-rouge">openssl</code>. Pay attention to the opening and
closing parentheses in the snippet below, they must be copied too.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>
  <span class="nb">umask </span>077
  <span class="nb">sudo mkdir</span> /etc/secure-boot
  <span class="nb">sudo </span>openssl req                       <span class="se">\</span>
    <span class="nt">-new</span>                                 <span class="se">\</span>
    <span class="nt">-x509</span>                                <span class="se">\</span>
    <span class="nt">-nodes</span>                               <span class="se">\</span>
    <span class="nt">-newkey</span> rsa:2048                     <span class="se">\</span>
    <span class="nt">-keyout</span> /etc/secure-boot/mok.key.pem <span class="se">\</span>
    <span class="nt">-out</span>    /etc/secure-boot/mok.crt.pem <span class="se">\</span>
    <span class="nt">-subj</span>   <span class="s2">"/CN=Manu's MOK/"</span>            <span class="se">\</span>
    <span class="nt">-days</span>   9999
  <span class="nb">sudo </span>openssl x509                      <span class="se">\</span>
    <span class="nt">-in</span>  /etc/secure-boot/mok.crt.pem    <span class="se">\</span>
    <span class="nt">-out</span> /etc/secure-boot/mok.crt.der    <span class="se">\</span>
    <span class="nt">-outform</span> DER
<span class="o">)</span>
</code></pre></div></div>

<p>We have created a folder <code class="language-plaintext highlighter-rouge">/etc/secure-boot</code> only accessible to root,
that will store all our Secure Boot related stuff.  Inside it, we have a
PEM private key (RSA 2048) and a self-signed certificate. The private
key is not encrypted: a fact that will make it easier to automatically
sign GRUB and kernels on updates, but also means than anyone who can
read the file can get our MOK. That’s why it is critical that the folder
can only be accesses by root.  In addition, we converted the certificate
from PEM to DER form: <code class="language-plaintext highlighter-rouge">mok.crt.*</code> files store the same exact data in two
different representations. This is because some tools require the
former, while others require the latter.</p>

<h3 id="schedule-the-mok-for-enrollment">Schedule the MOK for enrollment</h3>

<p>The <code class="language-plaintext highlighter-rouge">mokutil</code> tool can be used to inspect, add and remove keys from the
MOK database. Actually, it doesn’t really add (or remove) keys, it
schedules them for addition (or removal). The real update will be
performed during the next reboot when shim is loaded.</p>

<p>To schedule our new MOK for addition, type:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>mokutil <span class="nt">--import</span> /etc/secure-boot/mok.crt.der
</code></pre></div></div>

<p>You’ll be asked for a password twice: type whatever you want. This
password will be asked by MOKManager when enrolling the key later after
reboot. Pay attention to the fact that you may also be asked for your
system password by <code class="language-plaintext highlighter-rouge">sudo</code> before that.</p>

<p>Note two things:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">mokutil</code> requires DER data;</li>
  <li>we are uploading the certificate, not the key file. Only the public
key is added to the MOK database, and the certificate contains the
public key as well as other information such as the Common Name of the
owner.</li>
</ul>

<h3 id="install-grub">Install GRUB</h3>

<p>Normally, we would install GRUB using the <code class="language-plaintext highlighter-rouge">grub-install</code> script. This
installation mode places a small EFI executable on the ESP, while
leaving the rest of GRUB (such as modules) on <code class="language-plaintext highlighter-rouge">/boot</code>. GRUB can
dynamically load the rest of its modules at runtime.  However, when
running under Secure Boot, loading code from external files is disabled:
everything must reside into the EFI executable on the ESP.</p>

<p>To create such an image, GRUB provides <code class="language-plaintext highlighter-rouge">grub-mkstandalone</code>. It builds an
EFI image containing all (or a user-supplied list of) GRUB modules, plus
an initial configuration file. This is what we’ll sign and deploy.</p>

<p>The initial configuration file can be used to customize the behaviour of
GRUB when it starts. A typical use case is to make it load an external
configuration file located on the ESP. The external file can then be
regenerated using <code class="language-plaintext highlighter-rouge">grub-mkconfig</code> without altering (and thus re-signing)
the EFI image. Note that, unlike modules, loading external configuration
<em>is</em> allowed.</p>

<p>To create our image, type:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Generate the embedded configuration file</span>
<span class="nb">sudo dd </span><span class="nv">status</span><span class="o">=</span>none <span class="nv">of</span><span class="o">=</span>/etc/secure-boot/grub.cfg <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">'
configfile </span><span class="k">${</span><span class="nv">cmdpath</span><span class="k">}</span><span class="sh">/grub.cfg
</span><span class="no">EOF

</span><span class="c"># Generate the EFI all-in-one image</span>
<span class="nb">sudo </span>grub-mkstandalone                           <span class="se">\</span>
  <span class="nt">--compress</span><span class="o">=</span>xz                                  <span class="se">\</span>
  <span class="nt">--format</span><span class="o">=</span>x86_64-efi                            <span class="se">\</span>
  <span class="nt">--modules</span><span class="o">=</span><span class="s1">'part_gpt part_msdos'</span>                <span class="se">\</span>
  <span class="nt">--sbat</span><span class="o">=</span>/usr/share/grub/sbat.csv                <span class="se">\</span>
  <span class="nt">--output</span><span class="o">=</span>/boot/efi/EFI/arch/grubx64.efi        <span class="se">\</span>
  /boot/grub/grub.cfg<span class="o">=</span>/etc/secure-boot/grub.cfg

<span class="c"># Generate full configuration</span>
<span class="nb">sudo </span>grub-mkconfig <span class="nt">-o</span> /boot/efi/EFI/arch/grub.cfg
</code></pre></div></div>

<p>Let’s explain some of the options:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">compress</code> requests that the EFI file is compressed to save space.
Here we used XZ compression, the slowest but most efficient one;</li>
  <li><code class="language-plaintext highlighter-rouge">format</code> specifies the format of the output file. <code class="language-plaintext highlighter-rouge">x86_64-efi</code> means
we want something suitable for a 64-bit UEFI system;</li>
  <li><code class="language-plaintext highlighter-rouge">output</code> is the place where the output file will live. We are going to
reuse the <code class="language-plaintext highlighter-rouge">arch</code> entry created by the installer, so GRUB is placed
there. <em>Important</em>: don’t change the base name: it <em>MUST</em> be
<code class="language-plaintext highlighter-rouge">grubx64.efi</code>. shim will only load a file with this name;</li>
  <li><code class="language-plaintext highlighter-rouge">modules</code> lists which modules must be preloaded when GRUB starts: here
we ask to preload modules that parse legacy and GPT partitioning
schemes. Without this, GRUB may be unable to detect disk partitions at
boot;</li>
  <li><code class="language-plaintext highlighter-rouge">sbat</code> is the most interesting. <em>Secure Boot Advanced Targeting</em> is a
feature that embeds generation numbers of boot components inside them
to make it easier for a bootloader to determine if a boot component is
vulnerable. Arch’s GRUB package comes with its own SBAT definition
file, which must be embedded into the final EFI image. shim will
refuse to load stuff without SBAT information. For more details about
SBAT, see <a href="https://github.com/rhboot/shim/blob/main/SBAT.md">this page</a>;</li>
  <li>the last line copies the embedded configuration file into the image,
making it available as <code class="language-plaintext highlighter-rouge">/boot/grub/grub.cfg</code>. The GRUB image contains
an embedded filesystem known as <code class="language-plaintext highlighter-rouge">(ramdisk)</code> which can be accessed like
any other volume, for example <code class="language-plaintext highlighter-rouge">(hd0,gpt1)</code>.</li>
</ul>

<p>The syntax of files copied into the ramdisk is
<code class="language-plaintext highlighter-rouge">/path/into/image=/path/on/filesystem</code>. <code class="language-plaintext highlighter-rouge">/boot/grub/grub.cfg</code> is the default
configuration file loaded by GRUB when it starts, so we must name it as
such. Its contents do nothing more than immediately directing GRUB to
load an external configuration <code class="language-plaintext highlighter-rouge">${cmdpath}/grub.cfg</code>. The <code class="language-plaintext highlighter-rouge">cmdpath</code>
variable is a runtime value provided by GRUB that points to the folder
containing the EFI image. It allows referring to files installed
alongside GRUB without having to explicitly state paths and thus makes
configurations reusable. In our case, it will expand to GRUB’s notion of
<code class="language-plaintext highlighter-rouge">/boot/efi/EFI/arch</code>, which may be something like <code class="language-plaintext highlighter-rouge">(hd0,gpt1)/EFI/arch</code>.</p>

<p>The last thing to do to have a working GRUB is to sign it. For this, we
must use <code class="language-plaintext highlighter-rouge">sbsign</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>sbsign                               <span class="se">\</span>
  <span class="nt">--key</span>    /etc/secure-boot/mok.key.pem   <span class="se">\</span>
  <span class="nt">--cert</span>   /etc/secure-boot/mok.crt.pem   <span class="se">\</span>
  <span class="nt">--output</span> /boot/efi/EFI/arch/grubx64.efi <span class="se">\</span>
           /boot/efi/EFI/arch/grubx64.efi
</code></pre></div></div>

<p>The PEM MOK key and certificate plus the unsigned GRUB image get in, and
a signed image gets out. Note that you can use the same pathname for
both input and output and that, unlike <code class="language-plaintext highlighter-rouge">mokutil</code>, the DER certificate is
not used here.</p>

<p>With this step, we have completed your deployment of shim and GRUB,
including configuration files and signatures. Secure Boot is still
disabled, since the machine lacks a PK, as can be proven by issuing:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>efi-readvar
</code></pre></div></div>

<p>The output reports that all key DBs are empty.</p>

<h3 id="sign-the-kernel">Sign the kernel</h3>

<p>Just like GRUB, the kernel must also be signed, while initramfses need
not be signed. Again, <code class="language-plaintext highlighter-rouge">sbsign</code> comes to the rescue. For simplicity,
we’ll sign just one kernel here, in spite of the fact that a real system
may have multiple kernels installed and all of them need to be signed.
We’ll handle this issue later, when we’ll setup <code class="language-plaintext highlighter-rouge">pacman</code> hooks to
automatically sign GRUB and the kernels on updates.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>sbsign                               <span class="se">\</span>
  <span class="nt">--key</span>    /etc/secure-boot/mok.key.pem   <span class="se">\</span>
  <span class="nt">--cert</span>   /etc/secure-boot/mok.crt.pem   <span class="se">\</span>
  <span class="nt">--output</span> /boot/vmlinuz-linux            <span class="se">\</span>
           /boot/vmlinuz-linux
</code></pre></div></div>

<p>We’ll now reboot the system to trigger MOKManager and add the new MOK to
the database.</p>

<h3 id="enroll-the-mok-via-mokmanager">Enroll the MOK via MOKManager</h3>

<p>Restart the machine. Now, instead of GRUB, we’ll see a blue screen. This
is MOKManager, a UEFI application that takes care of enrolling and
removing MOKs from the system. The following short video shows how to
enroll the keys. A textual description of the steps follow.</p>

<video controls="" width="100%">
  <source src="/binary-is-better/assets/my/mov/mokmanager.mp4" />
</video>

<p>shim noticed that some MOKs are scheduled for addition and launched
MOKManager to handle that. We have 10 seconds to press a key, otherwise
the boot will continue and our scheduled MOK will be forgotten,
requiring us to call <code class="language-plaintext highlighter-rouge">mokutil</code> again.</p>

<p>We can choose to enroll a MOK from a disk file or from the list of
pending keys. Choose <code class="language-plaintext highlighter-rouge">Enroll MOK</code> to do the latter, since MOKManager
cannot read <code class="language-plaintext highlighter-rouge">ext4</code> or other POSIX filesystems.</p>

<p>Is it possible to view the key before enrolling it, to be sure of its
contents.  That confirms the key’s identity.</p>

<p>Press a key to go back to menu and now choose <code class="language-plaintext highlighter-rouge">Continue</code>: MOKManager
will ask for confirmation to enroll. The last step is to enter the
password chosen previously when calling <code class="language-plaintext highlighter-rouge">mokutil</code>. After, that it asks
for a reboot, which we accept. The MOK is now enrolled, altough Secure
Boot is still disabled.</p>

<h3 id="enable-secure-boot-in-virtualbox">Enable Secure Boot in VirtualBox</h3>

<p>After shutting down the VM, open its settings and go under <code class="language-plaintext highlighter-rouge">System</code>. The
lower part of the window shows the Secure Boot settings. First, check
the <code class="language-plaintext highlighter-rouge">Enable Secure Boot</code> box, then click the <code class="language-plaintext highlighter-rouge">Reset Keys to Default</code>
button.  Answer <code class="language-plaintext highlighter-rouge">Yes</code> to the confirmation dialog. Now restart the
machine.</p>

<p><img src="/binary-is-better/assets/my/img/vbox_sb.png" alt="Enable Secure Boot in VirtualBox" /></p>

<p>On a real machine, the keys would be already there, so the only step
needed would be to switch Secure Boot on.</p>

<p><em>WARNING: don’t press <code class="language-plaintext highlighter-rouge">Reset Keys to Default</code> more than once. If you
uncheck and then check <code class="language-plaintext highlighter-rouge">Enable Secure Boot</code> the button becomes active
again, but it seems that every time it’s clicked, VirtualBox appends,
rather than replacing, UEFI keys. This results in a weird state that
makes Secure Boot unusable.</em></p>

<p>Linux should now boot and prove that we deployed and signed all pieces
correctly. When in Linux, use the following commands to list all keys:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>mokutil <span class="nt">--list-enrolled</span> <span class="c"># Shows the MOKs</span>
<span class="nb">sudo </span>efi-readvar             <span class="c"># Shows PK/KEK/DB/DBX</span>
</code></pre></div></div>

<h2 id="automate-signing-on-updates">Automate signing on updates</h2>

<p>Until now, we’ve signed stuff manually. This is educational, but will
break as soon as the kernel is upgraded: the new kernel won’t be signed
and won’t boot. Also, we signed just the default kernel, but
realistically we may have a bunch of them installed: LTS, Zen, …</p>

<p>Luckily, <code class="language-plaintext highlighter-rouge">pacman</code> hooks can be used to automatically run scripts during
the installation of packages. We can setup a couple of them to
automatically sign new kernels and GRUB.</p>

<h3 id="sign-grub">Sign GRUB</h3>

<p>We’ll arrange that, when the GRUB package is updates, a hook takes care
of regenerating the standalone image, signing it and copying it in place
of the old one, while preserving the most recent old version, in case
the new image has problems.</p>

<p>This is the hook definition:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo mkdir</span> <span class="nt">-p</span> /etc/pacman.d/hooks

<span class="nb">sudo dd </span><span class="nv">status</span><span class="o">=</span>none <span class="nv">of</span><span class="o">=</span>/etc/pacman.d/hooks/99-sign-grub-for-secure-boot.hook <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">'
[Trigger]
Operation = Upgrade
Type      = Package
Target    = grub

[Action]
Description = Sign GRUB with Machine Owner Key for Secure Boot
When        = PostTransaction
Exec        = /etc/secure-boot/sign-grub
Depends     = sbsigntools
</span><span class="no">EOF
</span></code></pre></div></div>

<p>The actual code is located in a separate script file for readability:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo dd </span><span class="nv">status</span><span class="o">=</span>none <span class="nv">of</span><span class="o">=</span>/etc/secure-boot/sign-grub <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">'
#!/bin/sh

set -e

GRUB_ENTRY=/boot/efi/EFI/arch
GRUB_TMP="</span><span class="nv">$GRUB_ENTRY</span><span class="sh">/grubx64.efi.tmp"
GRUB_TARGET="</span><span class="nv">$GRUB_ENTRY</span><span class="sh">/grubx64.efi"
GRUB_BACKUP="</span><span class="nv">$GRUB_ENTRY</span><span class="sh">/grubx64.efi.bkp"
GRUB_CFG="</span><span class="nv">$GRUB_ENTRY</span><span class="sh">/grub.cfg"
GRUB_CFG_TMP="</span><span class="nv">$GRUB_ENTRY</span><span class="sh">/grub.cfg.tmp"
GRUB_CFG_BACKUP="</span><span class="nv">$GRUB_ENTRY</span><span class="sh">/grub.cfg.bkp"
GRUB_SBAT="/usr/share/grub/sbat.csv"

trap '/usr/bin/rm -f "</span><span class="nv">$GRUB_TMP</span><span class="sh">" "</span><span class="nv">$GRUB_CFG_TMP</span><span class="sh">"' QUIT TERM INT EXIT

/usr/bin/grub-mkstandalone                        </span><span class="se">\</span><span class="sh">
  --compress=xz                                   </span><span class="se">\</span><span class="sh">
  --format=x86_64-efi                             </span><span class="se">\</span><span class="sh">
  --modules='part_gpt part_msdos'                 </span><span class="se">\</span><span class="sh">
  --sbat="</span><span class="nv">$GRUB_SBAT</span><span class="sh">"                             </span><span class="se">\</span><span class="sh">
  --output="</span><span class="nv">$GRUB_TMP</span><span class="sh">"                            </span><span class="se">\</span><span class="sh">
  '/boot/grub/grub.cfg=/etc/secure-boot/grub.cfg'

/usr/bin/sbsign                         </span><span class="se">\</span><span class="sh">
  --key    /etc/secure-boot/mok.key.pem </span><span class="se">\</span><span class="sh">
  --cert   /etc/secure-boot/mok.crt.pem </span><span class="se">\</span><span class="sh">
  --output "</span><span class="nv">$GRUB_TMP</span><span class="sh">"                  </span><span class="se">\</span><span class="sh">
  "</span><span class="nv">$GRUB_TMP</span><span class="sh">"

/usr/bin/grub-mkconfig -o "</span><span class="nv">$GRUB_CFG_TMP</span><span class="sh">"

/usr/bin/cp "</span><span class="nv">$GRUB_TARGET</span><span class="sh">" "</span><span class="nv">$GRUB_BACKUP</span><span class="sh">"
/usr/bin/cp "</span><span class="nv">$GRUB_CFG</span><span class="sh">" "</span><span class="nv">$GRUB_CFG_BACKUP</span><span class="sh">"

/usr/bin/mv "</span><span class="nv">$GRUB_TMP</span><span class="sh">" "</span><span class="nv">$GRUB_TARGET</span><span class="sh">"
/usr/bin/mv "</span><span class="nv">$GRUB_CFG_TMP</span><span class="sh">" "</span><span class="nv">$GRUB_CFG</span><span class="sh">"
</span><span class="no">EOF

</span><span class="nb">sudo chmod </span>a+x /etc/secure-boot/sign-grub
</code></pre></div></div>

<p>Every time the package named <code class="language-plaintext highlighter-rouge">grub</code> is updated, the hook script runs. It
generates a new standalone image in a temporary file, so that the real
GRUB loaded by shim is not overwritten until the very end. It then signs
the new image and regenerates the configuration file. The last step
moves both temporary files into their final positions. Since the two
rename operations are not atomic, there is chance that an error between
them could leave GRUB and its configuration out of sync. All files
already reside on the correct volume: the probability should be pretty
low.</p>

<p>To test if it’s working, we can reinstall <code class="language-plaintext highlighter-rouge">grub</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>pacman <span class="nt">-S</span> grub <span class="nt">--noconfirm</span>
</code></pre></div></div>

<p>If pacman spits no errors, everything went fine. You should also see log
messages produced by the hook.</p>

<h3 id="sign-kernels">Sign kernels</h3>

<p>The last step is to also arrange for kernel images to be signed. The
procedure is very similar to what we did for GRUB, but we must handle</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo dd </span><span class="nv">status</span><span class="o">=</span>none <span class="nv">of</span><span class="o">=</span>/etc/pacman.d/hooks/99-sign-kernels-for-secure-boot.hook <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">'
[Trigger]
Operation = Install
Operation = Upgrade
Type      = Package
Target    = linux
Target    = linux-lts
Target    = linux-zen
Target    = linux-hardened

[Action]
Description = Sign kernels with Machine Owner Key for Secure Boot
When        = PostTransaction
Exec        = /etc/secure-boot/sign-kernels
Depends     = sbsigntools
Depends     = findutils
Depends     = grep
</span><span class="no">EOF
</span></code></pre></div></div>

<p>Every <code class="language-plaintext highlighter-rouge">Target</code> line matches a kernel package. You should add any
additional kernel you are using.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo dd </span><span class="nv">status</span><span class="o">=</span>none <span class="nv">of</span><span class="o">=</span>/etc/secure-boot/sign-kernels <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">'
#!/bin/sh

set -e

/usr/bin/find /boot/ -maxdepth 1 -name 'vmlinuz-*' -exec /bin/sh -c '
  if ! /usr/bin/sbverify --list {} 2&gt;/dev/null |
      /usr/bin/grep -q "signature certificates"; then
    /usr/bin/sbsign                       </span><span class="se">\</span><span class="sh">
      --key  /etc/secure-boot/mok.key.pem </span><span class="se">\</span><span class="sh">
      --cert /etc/secure-boot/mok.crt.pem </span><span class="se">\</span><span class="sh">
      --output {} {}
  fi
' </span><span class="se">\;</span><span class="sh">
</span><span class="no">EOF

</span><span class="nb">sudo chmod </span>a+x /etc/secure-boot/sign-kernels
</code></pre></div></div>

<p>Again, reinstall a kernel to verify it’s working:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>pacman <span class="nt">-S</span> linux <span class="nt">--noconfirm</span>
</code></pre></div></div>

<h2 id="closing-thoughts">Closing thoughts</h2>

<p>This guide shows how to setup your Arch Linux installation to work under
Secure Boot, using shim, GRUB and your own MOK keys. This solution is
probably the less invasive ones, as the standard UEFI variables and
databases are not touched. This should prove sufficient to run your
distribution alongside Windows.</p>

<p>There is one point we have not covered here: disk encryption. Secure
Boot can make you system more hard to crack, but it’s pretty useless if
your partitions are accessible in the clear to anyone who can simply
remove the disk and place it into another machine. Normally, one would
use LUKS together with Secure Boot. Disk encryption will be the topic for
another article.</p>

<p>It is also recommended to lock the UEFI management UI with a password.
Otherwise, an attacker could just enter the firmware and disable Secure
Boot.</p>

<h2 id="suggested-readings">Suggested readings</h2>

<ul>
  <li><a href="http://www.rodsbooks.com/efi-bootloaders/index.html">Managing EFI Boot Loaders for Linux by Rod Smith</a></li>
  <li><a href="https://wiki.archlinux.org/title/Unified_Extensible_Firmware_Interface/Secure_Boot">ArchWiki: Unified Extensible Firmware Interface/Secure Boot</a></li>
  <li><a href="https://media.defense.gov/2019/Jul/16/2002158058/-1/-1/0/CSI-BOOT-SECURITY-MODES-AND-RECOMMENDATIONS.PDF">NSA: Boot Security Modes and Recommendations</a></li>
</ul>]]></content><author><name>Emanuele Giacomelli</name></author><category term="Linux" /><summary type="html"><![CDATA[This article explains how to setup UEFI Secure Boot on Arch Linux, so that the firmware can verify all components that sit between itself and the kernel. This is useful if you need to dual-boot a PC that came with Windows preinstalled and with Secure Boot enabled and you don’t want to keep it disabled after installing Arch.]]></summary></entry><entry><title type="html">ARM cross-toolchain from scratch</title><link href="https://binary-manu.github.io/binary-is-better/elf/arm-cross-toolchain-from-scratch" rel="alternate" type="text/html" title="ARM cross-toolchain from scratch" /><published>2021-12-22T00:00:00+01:00</published><updated>2021-12-22T00:00:00+01:00</updated><id>https://binary-manu.github.io/binary-is-better/elf/arm-cross-toolchain-from-scratch</id><content type="html" xml:base="https://binary-manu.github.io/binary-is-better/elf/arm-cross-toolchain-from-scratch"><![CDATA[<p>A <em>cross toolchain</em> is a set of tools (such as compiler, assembler,
linker and related libraries) that run on a kind of system (such as an
AMD64 machine) but produce programs that will run on a different
architecture (ARM, MIPS, …). Typically, a toolchain installed on one’s
system is, conversely, configured to produce programs that run on the
same systems as the toolchain itself: this is called a <em>native
toolchain</em>.</p>

<p>Cross toolchains are often needed when building software for embedded or
heavily constrained systems, usually because of two main reasons:</p>

<ul>
  <li>the target system does not have the ability to run a native toolchain
for its own architecture, as its CPU, memory, storage or OS
environment (if any) are too limited;</li>
  <li>the target system can run a native toolchain, but the CPU speed makes
compiling even moderately large programs painfully slow. Think about
the earliest Raspberry Pi models.</li>
</ul>

<p>A cross toolchain allows using a separate system with plenty of memory,
CPU cores, storage and a powerful OS to run the build.  The outputs will
then be copied to the target using a programmer, an SD card or whatever
the target boots from, and run.</p>

<p>A typical scenario involves using an x86-64 system to build software for
some low-power ARM system. And often, this software will consist of a
Linux-based system especially crafted for the task at hand. Many steps
are required to build such complete, albeit small, system. We need:</p>

<ul>
  <li>a bootloader to take off after the hardware has initialized itself, to
load the kernel, device tree blobs and initial ramdisks into memory;</li>
  <li>a Linux kernel supporting the target architecture and the devices
present on the board;</li>
  <li>a set of basic libraries, such as standard C and C++ libraries;</li>
  <li>standard tools that make up the skeleton of the system: an init
system, a shell, utilities like <code class="language-plaintext highlighter-rouge">cp</code>, <code class="language-plaintext highlighter-rouge">ls</code>, …;</li>
  <li>essential files used by libraries and tools and runtime, such as
<code class="language-plaintext highlighter-rouge">/etc/fstab</code>, <code class="language-plaintext highlighter-rouge">/etc/passwd</code>, <code class="language-plaintext highlighter-rouge">/etc/inittab</code>.</li>
</ul>

<p>However, the first step to be able to build any of the above for an
embedded system is to grab a cross-toolchain that targets it.</p>

<p>While there are many resources about building cross-compiled kernels,
bootloaders and basic utilities, there is not much information about
building a cross-toolchain. The usual recommendations given by books and
tutorials boils down to:</p>

<ul>
  <li>grab a precompiled cross-toolchain from one of major providers on the
net: both <a href="https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-a/downloads">ARM</a> and <a href="https://toolchains.bootlin.com/">Bootlin</a>
release high-quality cross toolchains that run on x86-64 hosts and
produce code for ARM processors;</li>
  <li>use specialized tools like <a href="https://buildroot.org/">buildroot</a> or
<a href="https://crosstool-ng.github.io/">crosstool-ng</a>, which automate the creation of the
toolchain, starting from a user-defined configuration that can even be
edited graphically.</li>
</ul>

<p>Now, there is no doubt that, for anything serious and unless <em>very
special</em> needs arise, using a tried and tested product like the ones
above is by far the best option. They are made by people who know and
are both optimized and free of trivial but subtle errors one could make
while building itself. But…</p>

<p>But using an automated tool takes away the experience (and thus the
knowledge) about building one of the fundamental blocks of your embedded
project. I don’t like the idea of blindly using a tool without some
understanding of how it works, so for me building my own cross toolchain
is a must, even if the next step is to throw it away and use a
precompiled one.</p>

<p>Unfortunately, finding accurate information on this topic seems a little
difficult. Your best bet seems to be the <a href="https://trac.clfs.org/wiki/read">Cross Linux From
Scratch</a> book. It shows the steps required to build a cross
toolchain, but it has a number of limitations:</p>

<ul>
  <li>the latest stable version dates back to 2014;</li>
  <li>it is written for many architectures, but there is no ARM;</li>
  <li>the explanations about why you need certain options are, at least in
my eyes, a little terse.</li>
</ul>

<p>So I decided to try and make my own, mixing instructions and tips from
various sources with my own experimentation. Touching problems with your
own hands and finding a solution is invaluable. This document explains
the process I followed and, more importantly, the rationale of each
option or choice.</p>

<p>A warning is due here. While the output toolchain <em>seems to work</em> (it
successfully compiled a bootable Linux system for a Raspberry Pi made by
U-Boot, the Linux kernel, Busybox and an Hello World C++ sample running
on top of that), the whole process is about <em>learning</em>. This means that
there are no guarantees that the toolchain does not contain some subtle
bugs that may break specific packages. Also, it is likely not as well
optimized as it could and output code could be suboptimal.  You should
definitely <em>not</em> use it for anything serious.</p>

<p>That being said, let’s roll up our sleeves and start building.</p>

<h2 id="intro">Intro</h2>

<p>We will build a cross-toolchain targeting 32-bit ARM processors, but
hosted on a AMD64 system. The latest available versions of GCC, glibc
and the GNU binutils are used. The host system is Arch Linux and we’ll
use some of its libraries when building GCC (such as MPFR and GMP). The
final toolchain will be relocatable, meaning you can move it whereever
you like and it will still find include and library folders correctly.</p>

<h2 id="prepare-the-compilation-tree-and-an-isolated-shell">Prepare the compilation tree and an isolated shell</h2>

<p>The very first thing to do is ensuring that the host system has
essential development packages installed:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>pacman <span class="nt">-S</span> <span class="nt">--noconfirm</span> <span class="nt">--needed</span> base-devel
</code></pre></div></div>

<p>Both LFS and CLFS create a new unprivileged user that is employed to
build packages, guaranteeing the maximum isolation between the built
packages and the host system. Using our current user may raise issues,
because most build operations react to environment variables.  If by
chance some variables in our environment clash with parameters build
systems expect, we may inadvertently alter the build.</p>

<p>However, creating a new user for that looks a bit overkill to me. A
simpler approach involves <code class="language-plaintext highlighter-rouge">env</code> and appropriate shell options to run a
new shell in a clean environment.</p>

<p>Sources and compiled artifacts are kept under a single directory tree.
You can place it everywhere you like, although it should be on a POSIX
filesystem with at least 10GiB of free space. I used
<code class="language-plaintext highlighter-rouge">~/projects/embedded</code>. This directory will be referenced as <code class="language-plaintext highlighter-rouge">$CROSSDIR</code>.</p>

<p>Inside this folder, create a new file <code class="language-plaintext highlighter-rouge">activate.bash</code>, make it
executable, and paster the following code inside:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env bash</span>

<span class="nv">CROSSDIR</span><span class="o">=</span><span class="s2">"</span><span class="nv">$PWD</span><span class="s2">"</span>
<span class="nv">TOOLS</span><span class="o">=</span><span class="s2">"</span><span class="nv">$CROSSDIR</span><span class="s2">/mytoolchain/tools"</span>
<span class="nv">SYSROOT</span><span class="o">=</span><span class="s2">"</span><span class="nv">$TOOLS</span><span class="s2">/sysroot"</span>
<span class="nv">TARGET_TRIPLET</span><span class="o">=</span>arm-none-linux-gnueabihf
<span class="nv">HOST_TRIPLET</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span>gcc <span class="nt">-dumpmachine</span><span class="si">)</span><span class="s2">"</span>

<span class="nb">exec env</span> <span class="nt">-i</span> <span class="se">\</span>
  <span class="sb">`</span>: Copy some vars from the current environment<span class="sb">`</span> <span class="se">\</span>
  <span class="nv">USER</span><span class="o">=</span><span class="s2">"</span><span class="nv">$USER</span><span class="s2">"</span> <span class="nv">LOGNAME</span><span class="o">=</span><span class="s2">"</span><span class="nv">$LOGNAME</span><span class="s2">"</span> <span class="nv">TERM</span><span class="o">=</span><span class="s2">"</span><span class="nv">$TERM</span><span class="s2">"</span> <span class="nv">HOME</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">"</span> <span class="se">\</span>
  <span class="sb">`</span>: Some other vars are <span class="nb">set </span>to specific values<span class="sb">`</span> <span class="se">\</span>
  <span class="nv">CROSSDIR</span><span class="o">=</span><span class="s2">"</span><span class="nv">$CROSSDIR</span><span class="s2">"</span> <span class="nv">TOOLS</span><span class="o">=</span><span class="s2">"</span><span class="nv">$TOOLS</span><span class="s2">"</span> <span class="nv">SYSROOT</span><span class="o">=</span><span class="s2">"</span><span class="nv">$SYSROOT</span><span class="s2">"</span> <span class="se">\</span>
  <span class="nv">HOST_TRIPLET</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOST_TRIPLET</span><span class="s2">"</span> <span class="nv">TARGET_TRIPLET</span><span class="o">=</span><span class="s2">"</span><span class="nv">$TARGET_TRIPLET</span><span class="s2">"</span> <span class="se">\</span>
  <span class="nv">ARCH</span><span class="o">=</span><span class="s1">'arm'</span> <span class="nv">CROSS_COMPILE</span><span class="o">=</span><span class="s2">"</span><span class="nv">$TARGET_TRIPLET</span><span class="s2">-"</span> <span class="se">\</span>
  <span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$TOOLS</span><span class="s2">/bin:/usr/local/bin:/usr/bin"</span> <span class="nv">PS1</span><span class="o">=</span><span class="s1">'[\u@(cross)\h \W]\$ '</span> <span class="se">\</span>
  <span class="sb">`</span>: Launch a new instance of bash<span class="sb">`</span> <span class="se">\</span>
  bash <span class="nt">--norc</span> +h
</code></pre></div></div>

<p>What this file does is launching a new instance of <code class="language-plaintext highlighter-rouge">bash</code> while purging
the current environment of unwanted items:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">env</code> is a tool that modifies the environment before launching a
process, effectively causing the new process to see an altered
environment w.r.t. the parent;</li>
  <li><code class="language-plaintext highlighter-rouge">-i</code> causes <code class="language-plaintext highlighter-rouge">env</code> the create an initially empty environment for the
new process;</li>
  <li>variable definitions in the form <code class="language-plaintext highlighter-rouge">VAR=VALUE</code>, like <code class="language-plaintext highlighter-rouge">HOME="$HOME"</code>,
simply add some variables into the new process environment.  A
completely empty environment is not functional: most applications
expect a minimal set of standard variables to be available, such as
<code class="language-plaintext highlighter-rouge">HOME</code> and <code class="language-plaintext highlighter-rouge">USER</code>. They are either copied them from the current
environment (so that the new shell sees the same values as the current
shell) or set to specific values.  Some of this variables, like <code class="language-plaintext highlighter-rouge">ARCH</code>
or <code class="language-plaintext highlighter-rouge">TARGET_TRIPLET</code>, will be used and explained later;</li>
  <li><code class="language-plaintext highlighter-rouge">bash --norc +h</code> launches a new instance of <code class="language-plaintext highlighter-rouge">bash</code>, which is asked to
avoid executing its usual startup files <code class="language-plaintext highlighter-rouge">/etc/bash.bashrc</code> and
<code class="language-plaintext highlighter-rouge">~/.bashrc</code> by means of <code class="language-plaintext highlighter-rouge">--norc</code>. Without this option, even if the
environment is clear, stuff could still be added by code contained in
those files.  <code class="language-plaintext highlighter-rouge">+h</code> disables command hashing as recommended by LFS
<a href="https://www.linuxfromscratch.org/lfs/view/stable/chapter04/settingenvironment.html">environment setup</a>.</li>
</ul>

<p>Start a new, pristine shell by running:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./activate.bash
</code></pre></div></div>

<p>A call to <code class="language-plaintext highlighter-rouge">printenv</code> will confirm that the environment is almost empty.
There are a few thing to note here:</p>

<ul>
  <li>the <code class="language-plaintext highlighter-rouge">PS1</code> prompt contains the <code class="language-plaintext highlighter-rouge">(cross)</code> marker as a reminder that this
is not our usual environment;</li>
  <li>there is no <code class="language-plaintext highlighter-rouge">DISPLAY</code>, so X apps will not work; use a regular terminal for
that;</li>
  <li>there is no <code class="language-plaintext highlighter-rouge">/bin</code> in the <code class="language-plaintext highlighter-rouge">PATH</code>, as we assume that our host system
(Arch Linux) is <a href="https://www.freedesktop.org/wiki/Software/systemd/TheCaseForTheUsrMerge/">usrmerged</a>;</li>
  <li>a custom variable <code class="language-plaintext highlighter-rouge">TOOLS</code> is initialized to point to the subdirectory
<code class="language-plaintext highlighter-rouge">mytoolchain/tools</code>. This is where the compiled cross-toolchain will
be placed. Its <code class="language-plaintext highlighter-rouge">bin</code> subdirectory is also added to the <code class="language-plaintext highlighter-rouge">PATH</code>.</li>
</ul>

<h2 id="grab-the-sources">Grab the sources</h2>

<p>To build a complete toolchain, we need the following:</p>

<ul>
  <li>the <a href="https://www.gnu.org/software/binutils/">GNU binutils</a>, which comprise the assembler (<code class="language-plaintext highlighter-rouge">as</code>), the
link editor (<code class="language-plaintext highlighter-rouge">ld</code>) and a bunch of useful extras;</li>
  <li>the <a href="https://gcc.gnu.org/">GNU Compiler Collection (GCC)</a>, providing C and C++
compilers, as well as an implementation of the C++ standard library;</li>
  <li>a C standard library. Unlike the C++ library, this is not bundled with
GCC and we get to choose one among a number of choices (glibc, musl,
…).  To keep things simple, we’ll be using the GNU C Library,
<a href="https://www.gnu.org/software/libc/">glibc</a>, although it will not result in the smallest programs
for our target system. Other C libraries can help producing smaller
final executables, but such level of optimization is beyond the scope
of this article.</li>
  <li>the <a href="https://www.kernel.org/">Linux kernel</a> headers, since glibc depends on them when
built to run on a Linux system.</li>
</ul>

<p>The following snippet downloads the versions that I tested to
successfully build and place them under <code class="language-plaintext highlighter-rouge">sources</code>, giving each archive
its own folder:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"</span><span class="nv">$CROSSDIR</span><span class="s2">/mytoolchain/sources"</span>
<span class="nb">cd</span> <span class="s2">"</span><span class="nv">$CROSSDIR</span><span class="s2">/mytoolchain/sources"</span>
download_sources<span class="o">()</span> <span class="o">{</span>
  <span class="nb">local dirs</span><span class="o">=(</span>binutils gcc glibc linux<span class="o">)</span>
  <span class="nb">local </span><span class="nv">urls</span><span class="o">=(</span>
    <span class="s1">'https://mirror.easyname.at/gnu/binutils/binutils-2.37.tar.xz'</span>
    <span class="s1">'https://ftp.nluug.nl/languages/gcc/releases/gcc-11.2.0/gcc-11.2.0.tar.xz'</span>
    <span class="s1">'https://ftp.gnu.org/gnu/glibc/glibc-2.34.tar.xz'</span>
    <span class="s1">'https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.15.7.tar.xz'</span>
  <span class="o">)</span>
  <span class="k">for</span> <span class="o">((</span> <span class="nv">i</span><span class="o">=</span>0<span class="p">;</span> i &lt; <span class="k">${#</span><span class="nv">dirs</span><span class="p">[@]</span><span class="k">}</span><span class="p">;</span> i++ <span class="o">))</span> <span class="o">{</span>
    <span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"</span><span class="k">${</span><span class="nv">dirs</span><span class="p">[i]</span><span class="k">}</span><span class="s2">"</span>
    <span class="o">(</span> <span class="nb">cd</span> <span class="s2">"</span><span class="k">${</span><span class="nv">dirs</span><span class="p">[i]</span><span class="k">}</span><span class="s2">"</span> <span class="o">&amp;&amp;</span> curl <span class="nt">-LO</span> <span class="s2">"</span><span class="k">${</span><span class="nv">urls</span><span class="p">[i]</span><span class="k">}</span><span class="s2">"</span> <span class="o">)</span>
  <span class="o">}</span>
<span class="o">}</span>
download_sources
</code></pre></div></div>

<p>We should end up with a file tree like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/home/manu/projects/embedded/mytoolchain/sources
|-- binutils
|   `-- binutils-2.37.tar.xz
|-- gcc
|   `-- gcc-11.2.0.tar.xz
|-- glibc
|   `-- glibc-2.34.tar.xz
`-- linux
    `-- linux-5.15.7.tar.xz
</code></pre></div></div>

<h2 id="understand-the-build-order">Understand the build order</h2>

<p>The sources being available, all pieces must be built in the correct
order.  Ideally, there should be a linear build order so that each item
is compiled only once.</p>

<p>This looks simple in theory:</p>

<ol>
  <li>first, the cross-binutils. These tools will handle the binary format
of the <em>target</em> (ARM), but will otherwise run and use libraries from
the <em>host</em> (x86-64). Only a native x86-64 compiler is required to
build them, so we can do this right away with our local system
compiler;</li>
  <li>Linux kernel headers do not need to be built at all, they are simply
copied somewhere the cross-compiler will find them, so again
we can do this step right away;</li>
  <li>at this point we <em>could</em> build the cross-GCC: again, ideally this
package emits code for the target but only depends on libraries and
headers from the host;</li>
  <li>use the cross-GCC to build glibc for the target.</li>
</ol>

<p>Unfortunately, this is not possible.</p>

<p>As explained by <a href="https://www.linuxfromscratch.org/lfs/view/stable/partintro/toolchaintechnotes.html">LFS</a> and <a href="https://crosstool-ng.github.io/docs/toolchain-construction/">crosstool-ng</a>,
there is a circular dependency between GCC and glibc: glibc is a <em>target
library</em>, so it must be compiled with a cross compiler for the target
system and obviously depends on cross-GCC. However, some components
of GCC (such as <code class="language-plaintext highlighter-rouge">libgcc</code> and <code class="language-plaintext highlighter-rouge">libstdc++</code>) depend on the C library of the
target. This creates a dependency loop: we need a cross-GCC to build
glibc, but without a built glibc we cannot build a cross-GCC. This
situation is depicted in the following picture:</p>

<p><a href="https://mermaid.live/edit/#eyJjb2RlIjoiZ3JhcGggXG4gICAgR0NDW0dDQ10gLS0-IExEW2JpbnV0aWxzXVxuICAgIEdDQyAtLT58Q2lyY3VsYXIgZGVwLnwgQ1tDIExpYnJhcnldXG4gICAgQyAtLT4gR0NDXG4gICAgQyAtLT4gS1tMaW51eCBrZXJuZWwgaGVhZGVyc11cbiAgIiwibWVybWFpZCI6IntcbiAgXCJ0aGVtZVwiOiBcImRhcmtcIlxufSIsInVwZGF0ZUVkaXRvciI6ZmFsc2UsImF1dG9TeW5jIjp0cnVlLCJ1cGRhdGVEaWFncmFtIjpmYWxzZX0"><img src="https://mermaid.ink/img/eyJjb2RlIjoiZ3JhcGggXG4gICAgR0NDW0dDQ10gLS0-IExEW2JpbnV0aWxzXVxuICAgIEdDQyAtLT58Q2lyY3VsYXIgZGVwLnwgQ1tDIExpYnJhcnldXG4gICAgQyAtLT4gR0NDXG4gICAgQyAtLT4gS1tMaW51eCBrZXJuZWwgaGVhZGVyc11cbiAgIiwibWVybWFpZCI6eyJ0aGVtZSI6ImRhcmsifSwidXBkYXRlRWRpdG9yIjpmYWxzZSwiYXV0b1N5bmMiOnRydWUsInVwZGF0ZURpYWdyYW0iOmZhbHNlfQ" alt="" /></a></p>

<p>How do we escape this? Thankfully, by passing certain options to the GCC
build system, it is possible to eliminate the reliance on the target
glibc, and thus build GCC <em>before</em> glibc. The price we pay for this is
that the compiler produced this way is not complete: it cannot be used
to build hosted C or C++ code (since GCC’s C++ standard library depends
on the target C library, and regular C apps expect a working C library
as well) and <code class="language-plaintext highlighter-rouge">libgcc</code>, an internal component of GCC which is linked to
pretty <em>anything</em> GCC builds and provides some low-level services, lacks
certain features.  This reduced compiler, called the <em>bootstrap
compiler</em>, can however be used to build C code that does not depend on
the missing features and that does not require a C library in place.
Fortunately, glibc fits this scenario.</p>

<p>Therefore, we can break free by first building a bootstrap compiler,
using it to compile glibc, then <em>recompiling GCC again</em>, this time by
telling it that a target C library is available, thus building the full
thing. This second GCC build is called the <em>final compiler</em>, and is what
will become part of our toolchain. The bootstrap compiler will be thrown
away as soon as the final compiler is ready. Here the dependency graph,
updated:</p>

<p><a href="https://mermaid.live/edit/#eyJjb2RlIjoiZ3JhcGggXG4gICAgYkdDQ1tCb290c3RyYXAgR0NDXSAtLT4gTERbYmludXRpbHNdXG4gICAgR0NDIC0tPiBDW0MgTGlicmFyeV1cbiAgICBDIC0tPiBiR0NDXG4gICAgR0NDIC0tPiBMRFxuICAgIEMgLS0-IEtbTGludXgga2VybmVsIGhlYWRlcnNdXG4gICIsIm1lcm1haWQiOiJ7XG4gIFwidGhlbWVcIjogXCJkYXJrXCJcbn0iLCJ1cGRhdGVFZGl0b3IiOmZhbHNlLCJhdXRvU3luYyI6dHJ1ZSwidXBkYXRlRGlhZ3JhbSI6ZmFsc2V9"><img src="https://mermaid.ink/img/eyJjb2RlIjoiZ3JhcGggXG4gICAgYkdDQ1tCb290c3RyYXAgR0NDXSAtLT4gTERbYmludXRpbHNdXG4gICAgR0NDIC0tPiBDW0MgTGlicmFyeV1cbiAgICBDIC0tPiBiR0NDXG4gICAgR0NDIC0tPiBMRFxuICAgIEMgLS0-IEtbTGludXgga2VybmVsIGhlYWRlcnNdXG4gICIsIm1lcm1haWQiOnsidGhlbWUiOiJkYXJrIn0sInVwZGF0ZUVkaXRvciI6ZmFsc2UsImF1dG9TeW5jIjp0cnVlLCJ1cGRhdGVEaWFncmFtIjpmYWxzZX0" alt="" /></a></p>

<p>Building glibc with the bootstrap compiler does not impact its level of
completeness or optimization. From <a href="https://www.linuxfromscratch.org/lfs/view/stable/partintro/toolchaintechnotes.html">LFS, Toolchain Technical
Notes</a>:</p>

<blockquote>
  <p>Now, there is more about cross-compiling: the C language is not just a
compiler, but also defines a standard library. In this book, the GNU C
library, named glibc, is used. This library must be compiled for the
lfs machine, that is, using the cross compiler cc1. But the compiler
itself uses an internal library implementing complex instructions not
available in the assembler instruction set. This internal library is
named libgcc, and must be linked to the glibc library to be fully
functional! Furthermore, the standard library for C++ (libstdc++) also
needs being linked to glibc. The solution to this chicken and egg
problem is to first build a degraded cc1 based libgcc, lacking some
functionalities such as threads and exception handling, then build
glibc using this degraded compiler <strong>(glibc itself is not degraded)</strong>, then
build libstdc++. But this last library will lack the same
functionalities as libgcc.</p>
</blockquote>

<p>Our final build order therefore is:</p>

<ol>
  <li>binutils;</li>
  <li>bootstrap GCC;</li>
  <li>Linux kernel headers;</li>
  <li>glibc;</li>
  <li>final GCC.</li>
</ol>

<h2 id="build-the-binutils">Build the binutils</h2>

<p>Let’s start with the first package.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> <span class="nv">$CROSSDIR</span>/mytoolchain/sources/binutils
<span class="nb">tar</span> <span class="nt">-xf</span> binutils-2.37.tar.xz
<span class="nb">mkdir</span> <span class="nt">-p</span> build
<span class="nb">cd </span>build

../binutils-2.37/configure <span class="nt">--prefix</span><span class="o">=</span><span class="s1">''</span> <span class="nt">--enable-initfini-array</span> <span class="se">\</span>
  <span class="nt">--with-sysroot</span><span class="o">=</span><span class="s1">'${exec_prefix}/sysroot'</span> <span class="nt">--target</span><span class="o">=</span><span class="s2">"</span><span class="nv">$TARGET_TRIPLET</span><span class="s2">"</span> 
</code></pre></div></div>

<p>First, we extract the sources and then create a <code class="language-plaintext highlighter-rouge">build</code> directory where
the build system will create the binaries. Often, when building from a
tarball, we can run the <code class="language-plaintext highlighter-rouge">configure</code> script directly from the sources
folder, doing what is called an <em>in-tree</em> build, with object files being
placed alongside the sources. The GNU build system also supports
<em>out-of-tree</em> builds, where basically we execute <code class="language-plaintext highlighter-rouge">configure &amp;&amp; make</code> from
a different folder than the one holding the sources. However, depending
on the package, doing an out-of-tree build can be either recommended or
mandatory, and notably GCC falls in this category. As GCC docs say:</p>

<blockquote>
  <p>First, we highly recommend that GCC be built into a separate directory
from the sources which does not reside within the source tree. This is
how we generally build GCC; building where srcdir == objdir should
still work, but doesn’t get extensive testing; building where objdir
is a subdirectory of srcdir is unsupported.</p>
</blockquote>

<p>Since there should be no negative effects in doing an out-of-tree build
even when there is no explicit requirement to do so, I opted to build
every package this way. The <code class="language-plaintext highlighter-rouge">build</code> folder is a sibling of the sources
folder.</p>

<p>Now, let’s break down the <code class="language-plaintext highlighter-rouge">configure</code> options and the reasons behind them.</p>

<p><code class="language-plaintext highlighter-rouge">--prefix=''</code> determines the usual installation prefix that all
autotools-based builds expect. It serves two main purposes:</p>
<ul>
  <li>it defines the path under which <code class="language-plaintext highlighter-rouge">make install</code> will place the newly
built files (although we can add a prefix to that path using the
<code class="language-plaintext highlighter-rouge">DESTDIR</code> variable);</li>
  <li>it can be hardcoded into applications so that they know where to look
for related components.</li>
</ul>

<p>The second point can be problematic because it means that, once built,
an app will expect to be installed under a specific path and therefore
it cannot be moved elsewhere on the filesystem, because it will still
look for its bits and pieces under the original path.</p>

<p>Thankfully, binutils (but also GCC) developers have gone through lengths
to ensure that we can build <em>relocatable</em> toolchains. A program is
relocatable if it does not depend on its installation prefix, but
instead locate its parts by obtaining the absolute path to its own
executable and them moving from there using relative paths.</p>

<p><code class="language-plaintext highlighter-rouge">ld</code> uses the following technique (implemented in
<code class="language-plaintext highlighter-rouge">binutils-2.37/libiberty/make-relative-prefix.c</code>):</p>
<ul>
  <li>it takes the name of the executable as passed to the command
invocation (its <code class="language-plaintext highlighter-rouge">argv[0]</code>);</li>
  <li>if it’s just a program name (i.e. <code class="language-plaintext highlighter-rouge">ld</code>), it looks for it in the <code class="language-plaintext highlighter-rouge">PATH</code>
to get the full path;</li>
  <li>if it’s a relative path, it resolves it to the full path using the
current working directory;</li>
  <li>otherwise it’s used verbatim;</li>
  <li>resolve links to get the pathname of the real executable. This is
essential to reach the real place where the app is placed, even if the
program is called through a link.</li>
</ul>

<p>If an applications is relocatable, the prefix is not that important
anymore. However, when running <code class="language-plaintext highlighter-rouge">make install DESTDIR="$DESTDIR"</code>, it is
still used to compute paths, so that things gets installed under
<code class="language-plaintext highlighter-rouge">$DESTDIR/$PREFIX</code> An empty prefix (‘’) (which I copied from the configuration
switches used for the official <a href="https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-a/downloads">ARM toolchain</a>) means
that no prefix at all is used and files would be placed under <code class="language-plaintext highlighter-rouge">$DESTDIR/bin</code>,
<code class="language-plaintext highlighter-rouge">$DESTDIR/lib </code> and so on.</p>

<p>Now, to <code class="language-plaintext highlighter-rouge">with-sysroot</code>. A <em>sysroot</em> is a prefix under which a toolchain
program (<code class="language-plaintext highlighter-rouge">ld</code> in this case, but it also applies to <code class="language-plaintext highlighter-rouge">gcc</code>) expects to be
able to find include files and libraries for the target, in our case,
for ARM.  This is where we will install things, like the C library,
which pertain to the target.</p>

<p>For the linker to know where the sysroot is, we have two options:</p>

<ul>
  <li>we can pass the <code class="language-plaintext highlighter-rouge">--sysroot="/path/to/sysroot"</code> option to every <code class="language-plaintext highlighter-rouge">ld</code>
invocation. This must also include any calls made to <code class="language-plaintext highlighter-rouge">ld</code> by other
tools higher in the toolchain and is easy to forget about;</li>
  <li>we can specify the default sysroot at build time and have <code class="language-plaintext highlighter-rouge">ld</code>
remember it. It can always be overridden on a per-call basis using
<code class="language-plaintext highlighter-rouge">--sysroot</code>, but at least the default behavior will be sane even
without it. This is what <code class="language-plaintext highlighter-rouge">--with-sysroot</code> does.</li>
</ul>

<p>Forgetting to pass <code class="language-plaintext highlighter-rouge">--with-sysroot</code> when building <em>and</em> also forgetting
to use <code class="language-plaintext highlighter-rouge">--sysroot</code> when calling the cross-linker will cause it to search
for target libraries under default paths <em>on the host</em>, like <code class="language-plaintext highlighter-rouge">/usr/lib/</code>.
This is not what we want as libraries there are compiled for the host
architecture.</p>

<p>We can pass <code class="language-plaintext highlighter-rouge">--with-sysroot</code> any path, but the binutils support a
special case that is essential to make the toolchain relocatable: if the
sysroot is located under the <code class="language-plaintext highlighter-rouge">exec-prefix</code> for the build (which defaults
to <code class="language-plaintext highlighter-rouge">prefix</code>if not overridden), <code class="language-plaintext highlighter-rouge">ld</code> will automatically compute its path
using the executable path. This means that effectively the sysroot moves
along with the rest of the toolchain. Without this behaviour, we would
end up with a toolchain that is not actually relocatable, because it
would search for libraries under a fixed sysroot path.</p>

<p>The build system accepts various forms for the sysroot path for it to be
considered <em>under the exec-prefix</em> and thus relocatable, which can be
found by looking at <code class="language-plaintext highlighter-rouge">binutils-2.37/ld/configure</code> (an excerpt follows):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Check whether --with-sysroot was given.</span>
<span class="k">if </span><span class="nb">test</span> <span class="s2">"</span><span class="k">${</span><span class="nv">with_sysroot</span><span class="p">+set</span><span class="k">}</span><span class="s2">"</span> <span class="o">=</span> <span class="nb">set</span><span class="p">;</span> <span class="k">then</span> :
  <span class="nv">withval</span><span class="o">=</span><span class="nv">$with_sysroot</span><span class="p">;</span>
 <span class="k">case</span> <span class="k">${</span><span class="nv">with_sysroot</span><span class="k">}</span> <span class="k">in
 </span><span class="nb">yes</span><span class="p">)</span> <span class="nv">TARGET_SYSTEM_ROOT</span><span class="o">=</span><span class="s1">'${exec_prefix}/${target_alias}/sys-root'</span> <span class="p">;;</span>
 <span class="k">*</span><span class="p">)</span> <span class="nv">TARGET_SYSTEM_ROOT</span><span class="o">=</span><span class="nv">$with_sysroot</span> <span class="p">;;</span>
 <span class="k">esac</span>

 <span class="nv">TARGET_SYSTEM_ROOT_DEFINE</span><span class="o">=</span><span class="s1">'-DTARGET_SYSTEM_ROOT=\"$(TARGET_SYSTEM_ROOT)\"'</span>
 <span class="nv">use_sysroot</span><span class="o">=</span><span class="nb">yes

 </span><span class="k">if </span><span class="nb">test</span> <span class="s2">"x</span><span class="nv">$prefix</span><span class="s2">"</span> <span class="o">=</span> xNONE<span class="p">;</span> <span class="k">then
  </span><span class="nv">test_prefix</span><span class="o">=</span>/usr/local
 <span class="k">else
  </span><span class="nv">test_prefix</span><span class="o">=</span><span class="nv">$prefix</span>
 <span class="k">fi
 if </span><span class="nb">test</span> <span class="s2">"x</span><span class="nv">$exec_prefix</span><span class="s2">"</span> <span class="o">=</span> xNONE<span class="p">;</span> <span class="k">then
  </span><span class="nv">test_exec_prefix</span><span class="o">=</span><span class="nv">$test_prefix</span>
 <span class="k">else
  </span><span class="nv">test_exec_prefix</span><span class="o">=</span><span class="nv">$exec_prefix</span>
 <span class="k">fi
 case</span> <span class="k">${</span><span class="nv">TARGET_SYSTEM_ROOT</span><span class="k">}</span> <span class="k">in</span>
<span class="c"># &lt;====== These are the interesting lines</span>
 <span class="s2">"</span><span class="k">${</span><span class="nv">test_prefix</span><span class="k">}</span><span class="s2">"</span><span class="p">|</span><span class="s2">"</span><span class="k">${</span><span class="nv">test_prefix</span><span class="k">}</span><span class="s2">/"</span><span class="k">*</span><span class="p">|</span><span class="se">\</span>
 <span class="s2">"</span><span class="k">${</span><span class="nv">test_exec_prefix</span><span class="k">}</span><span class="s2">"</span><span class="p">|</span><span class="s2">"</span><span class="k">${</span><span class="nv">test_exec_prefix</span><span class="k">}</span><span class="s2">/"</span><span class="k">*</span><span class="p">|</span><span class="se">\</span>
 <span class="s1">'${prefix}'</span><span class="p">|</span><span class="s1">'${prefix}/'</span><span class="k">*</span><span class="p">|</span><span class="se">\</span>
 <span class="s1">'${exec_prefix}'</span><span class="p">|</span><span class="s1">'${exec_prefix}/'</span><span class="k">*</span><span class="p">)</span>
<span class="c"># &lt;====== End</span>
   <span class="nv">t</span><span class="o">=</span><span class="s2">"</span><span class="nv">$TARGET_SYSTEM_ROOT_DEFINE</span><span class="s2"> -DTARGET_SYSTEM_ROOT_RELOCATABLE"</span>
   <span class="nv">TARGET_SYSTEM_ROOT_DEFINE</span><span class="o">=</span><span class="s2">"</span><span class="nv">$t</span><span class="s2">"</span>
   <span class="p">;;</span>
 <span class="k">esac</span>

<span class="k">else

 </span><span class="nv">use_sysroot</span><span class="o">=</span>no
 <span class="nv">TARGET_SYSTEM_ROOT</span><span class="o">=</span>
 <span class="nv">TARGET_SYSTEM_ROOT_DEFINE</span><span class="o">=</span><span class="s1">'-DTARGET_SYSTEM_ROOT=\"\"'</span>

<span class="k">fi</span>
</code></pre></div></div>

<p>I chose to use the form that starts with the literal <code class="language-plaintext highlighter-rouge">${exec_prefix}</code>.
The sysroot will be placed under the <code class="language-plaintext highlighter-rouge">sysroot</code> folder under the
exec-prefix and thus will be relocated with the rest of the tools.</p>

<p><code class="language-plaintext highlighter-rouge">--target="$TARGET_TRIPLET"</code> is simple: it specifies the <em>machine
triplet</em> that defines the target system. We have specified it in an
environment variable in our <code class="language-plaintext highlighter-rouge">activate.bash</code> file while setting up the
environment. <a href="https://www.linuxfromscratch.org/lfs/view/stable/partintro/toolchaintechnotes.html">LFS</a> explains triplets, as well as <a href="https://wiki.osdev.org/Target_Triplet">this OSDev
page</a>. Please note that “triplets” can actually have
four fields, like in our case.</p>

<p>Finally, <code class="language-plaintext highlighter-rouge">--enable-initfini-array</code> tells the binutils to enable support
for a feature of the target system binary file format
(<a href="http://www.sco.com/developers/gabi/latest/ch4.intro.html">ELF</a>) that cannot be detected automatically when
cross-compiling.</p>

<p>Now it’s time tun run make:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make <span class="nt">-j</span><span class="sb">`</span><span class="nb">nproc</span><span class="sb">`</span>
</code></pre></div></div>

<p>After many lines of output you should be back to the terminal, hopefully
without errors. Double check that the sysroot was detected as
relocatable by checking the contents of <code class="language-plaintext highlighter-rouge">ld/Makefile</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">grep </span>TARGET_SYSTEM_ROOT_RELOCATABLE ld/Makefile | <span class="nb">head</span> <span class="nt">-n1</span>

<span class="c"># You should see something like:</span>
<span class="c"># TARGET_SYSTEM_ROOT_DEFINE = -DTARGET_SYSTEM_ROOT=\"$(TARGET_SYSTEM_ROOT)\" -DTARGET_SYSTEM_ROOT_RELOCATABLE</span>
</code></pre></div></div>

<p>If there’s no output, check the call to <code class="language-plaintext highlighter-rouge">configure</code>. As things are, the
sysroot will not move together with the rest of the toolchain.</p>

<p>If everything is fine, let’s install binutils:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make <span class="nb">install </span><span class="nv">DESTDIR</span><span class="o">=</span><span class="s2">"</span><span class="nv">$TOOLS</span><span class="s2">"</span>
</code></pre></div></div>

<h2 id="build-the-bootstrap-compiler">Build the bootstrap compiler</h2>

<p>Now it’s time to build the bootstrap compiler.</p>

<p>GCC requires some additional libraries, which are listed in its
<a href="https://gcc.gnu.org/install/prerequisites.html">prerequisites page</a>. We will use the versions that ship
with Arch Linux, as they are recent enough.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>pacman <span class="nt">-S</span> <span class="nt">--noconfirm</span> <span class="nt">--needed</span> libmpc mpfr gmp
<span class="o">(</span>
  <span class="nb">cd</span> /tmp
  curl <span class="nt">-L</span> https://aur.archlinux.org/cgit/aur.git/snapshot/isl.tar.gz | <span class="nb">tar</span> <span class="nt">-xzf</span> -
  <span class="nb">cd </span>isl
  makepkg <span class="nt">-si</span>
<span class="o">)</span>
</code></pre></div></div>

<p>Unpack and configure GCC:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> <span class="nv">$CROSSDIR</span>/mytoolchain/sources/gcc
<span class="nb">tar</span> <span class="nt">-xf</span> gcc-11.2.0.tar.xz
<span class="nb">mv </span>gcc-11.2.0<span class="o">{</span>,-bootstrap<span class="o">}</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> build-bootstrap
<span class="nb">cd </span>build-bootstrap

../gcc-11.2.0-bootstrap/configure <span class="se">\</span>
  <span class="nt">--prefix</span><span class="o">=</span><span class="s1">''</span> <span class="se">\</span>
  <span class="nt">--with-sysroot</span><span class="o">=</span><span class="s1">'${exec_prefix}/sysroot'</span> <span class="se">\</span>
  <span class="nt">--target</span><span class="o">=</span><span class="s2">"</span><span class="nv">$TARGET_TRIPLET</span><span class="s2">"</span> <span class="se">\</span>
  <span class="nt">--enable-initfini-array</span> <span class="se">\</span>
  <span class="nt">--enable-languages</span><span class="o">=</span>c <span class="se">\</span>
  <span class="nt">--without-headers</span> <span class="se">\</span>
  <span class="nt">--with-newlib</span> <span class="se">\</span>
  <span class="nt">--disable-gcov</span> <span class="se">\</span>
  <span class="nt">--disable-threads</span> <span class="se">\</span>
  <span class="nt">--disable-shared</span> <span class="se">\</span>
  <span class="nt">--disable-libada</span> <span class="se">\</span>
  <span class="nt">--disable-libssp</span> <span class="se">\</span>
  <span class="nt">--disable-libquadmath</span> <span class="se">\</span>
  <span class="nt">--disable-libgomp</span> <span class="se">\</span>
  <span class="nt">--disable-libatomic</span> <span class="se">\</span>
  <span class="nt">--disable-libstdcxx</span> <span class="se">\</span>
  <span class="nt">--disable-libvtv</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">--prefix</code> and <code class="language-plaintext highlighter-rouge">--with-sysroot</code> have the same meanings and implications
as for binutils, so we won’t repeat them here. It’s important to use the
same values used for binutils, otherwise the two sets of tools will have
different ideas about were to install things when <code class="language-plaintext highlighter-rouge">make install</code> is
called and will look for libraries in different places.  <code class="language-plaintext highlighter-rouge">--target</code> and
<code class="language-plaintext highlighter-rouge">--enable-initfini-array</code> also work the same as before.</p>

<p><code class="language-plaintext highlighter-rouge">--enable-languages</code> is new and tells GCC which languages should be
supported. Remember that GCC means “GNU Compiler Collection”, because it
supports more than just C and C++. However, the bootstrap compiler will
only ever be used to build glibc, which is written in C, so there’s no
reason to enable more languages for now.</p>

<p><code class="language-plaintext highlighter-rouge">--without-headers</code> and <code class="language-plaintext highlighter-rouge">--with-newlib</code> are the two options that make
the magic of disabling GCC’s reliance on a preexisting target C library.
If we look inside <code class="language-plaintext highlighter-rouge">gcc-11.2.0/gcc/configure</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># If this is a cross-compiler that does not</span>
<span class="c"># have its own set of headers then define</span>
<span class="c"># inhibit_libc</span>

<span class="c"># If this is using newlib, without having the headers available now,</span>
<span class="c"># then define inhibit_libc in LIBGCC2_CFLAGS.</span>
<span class="c"># This prevents libgcc2 from containing any code which requires libc</span>
<span class="c"># support.</span>
: <span class="k">${</span><span class="nv">inhibit_libc</span><span class="p">=false</span><span class="k">}</span>
<span class="k">if</span> <span class="o">{</span> <span class="o">{</span> <span class="nb">test </span>x<span class="nv">$host</span> <span class="o">!=</span> x<span class="nv">$target</span> <span class="o">&amp;&amp;</span> <span class="nb">test</span> <span class="s2">"x</span><span class="nv">$with_sysroot</span><span class="s2">"</span> <span class="o">=</span> x <span class="p">;</span> <span class="o">}</span> <span class="o">||</span>
       <span class="nb">test </span>x<span class="nv">$with_newlib</span> <span class="o">=</span> xyes <span class="p">;</span> <span class="o">}</span> <span class="o">&amp;&amp;</span>
     <span class="o">{</span> <span class="nb">test</span> <span class="s2">"x</span><span class="nv">$with_headers</span><span class="s2">"</span> <span class="o">=</span> xno <span class="o">||</span> <span class="nb">test</span> <span class="o">!</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$target_header_dir</span><span class="s2">/stdio.h"</span><span class="p">;</span> <span class="o">}</span> <span class="p">;</span> <span class="k">then
       </span><span class="nv">inhibit_libc</span><span class="o">=</span><span class="nb">true
</span><span class="k">fi</span>
</code></pre></div></div>

<p>Note that we are <em>not</em> going to use the <em>newlib</em> C library: we’ll stick
to glibc. But the option is still required to eliminate dependencies on
the (yet to be built) C library.</p>

<p>Finally, the various <code class="language-plaintext highlighter-rouge">--disable-*</code> options turn off features we don’t
want (or can’t) build yet.</p>

<p>Now start the build:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make <span class="nt">-j</span><span class="sb">`</span><span class="nb">nproc</span><span class="sb">`</span> all-gcc all-target-libgcc
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">all-gcc</code> and <code class="language-plaintext highlighter-rouge">all-target-libgcc</code> are Makefile targets. They need to be
specified so that only the parts of GCC we actually need are built,
cutting the build time.</p>

<p>This time, we will not install the compiler under <code class="language-plaintext highlighter-rouge">$TOOLS</code>, but in a
separate <code class="language-plaintext highlighter-rouge">bootstrap</code> directory. Since this is going to be thrown away as
soon as the final compiler is build, we don’t want to risk polluting the
final location with leftovers.</p>

<p>However, under <code class="language-plaintext highlighter-rouge">bootstrap</code> there is no <code class="language-plaintext highlighter-rouge">sysroot</code> folder: creating
a symlink to the one under <code class="language-plaintext highlighter-rouge">tools</code> gives the bootstrap compiler the
same view of the sysroot as the binutils. At the same time, we want to
create <code class="language-plaintext highlighter-rouge">sysroot</code> under <code class="language-plaintext highlighter-rouge">$TOOLS</code>, since we haven’t done it already and no
files has been placed there by a <code class="language-plaintext highlighter-rouge">make install</code>. Finally, we also need
to create a link <code class="language-plaintext highlighter-rouge">$TARGET_TRIPLET</code> under <code class="language-plaintext highlighter-rouge">bootstrap</code>, pointing to
the folder where the binutils are installed. This is
<a href="https://gcc.gnu.org/install/build.html">required</a> by GCC to properly locate the assembler and the
linker:</p>

<blockquote>
  <p>If you are not building GNU binutils in the same source tree as GCC, you
will need a cross-assembler and cross-linker installed before
configuring GCC. Put them in the directory prefix/target/bin.</p>
</blockquote>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"</span><span class="nv">$SYSROOT</span><span class="s2">"</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"</span><span class="nv">$TOOLS</span><span class="s2">/../bootstrap"</span>
<span class="nb">ln</span> <span class="nt">-sf</span> <span class="s2">"</span><span class="nv">$SYSROOT</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$TOOLS</span><span class="s2">/../bootstrap/sysroot"</span>
<span class="nb">ln</span> <span class="nt">-sf</span> <span class="s2">"</span><span class="nv">$TOOLS</span><span class="s2">/</span><span class="nv">$TARGET_TRIPLET</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$TOOLS</span><span class="s2">/../bootstrap/</span><span class="nv">$TARGET_TRIPLET</span><span class="s2">"</span>
</code></pre></div></div>

<p>Now install the files:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make install-gcc install-target-libgcc <span class="nv">DESTDIR</span><span class="o">=</span><span class="s2">"</span><span class="nv">$TOOLS</span><span class="s2">/../bootstrap"</span>
</code></pre></div></div>

<p>Confirm that the bootstrap compiler recognizes the sysroot:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$TOOLS</span>/../bootstrap/bin/arm-none-linux-gnueabihf-gcc <span class="nt">-print-sysroot</span>

<span class="c"># It should output something like:</span>
<span class="c"># /home/manu/projects/embedded/mytoolchain/bootstrap/bin/../sysroot</span>
</code></pre></div></div>

<p>Now we are ready to move to building glibc. But before that, we need to
extract the kernel headers.</p>

<h2 id="extract-the-kernel-headers">Extract the kernel headers</h2>

<p>First we need to ensure we have rsync installed, as it is used by the
build system to copy things:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>pacman <span class="nt">-S</span> <span class="nt">--noconfirm</span> <span class="nt">--needed</span> rsync
</code></pre></div></div>

<p>Then proceed:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> <span class="nv">$CROSSDIR</span>/mytoolchain/sources/linux
<span class="nb">tar</span> <span class="nt">-xf</span> linux-5.15.7.tar.xz
<span class="nb">cd </span>linux-5.15.7

make mrproper
make headers_install <span class="nv">INSTALL_HDR_PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$SYSROOT</span><span class="s2">/usr"</span>
</code></pre></div></div>

<p>This step is simpler that the others: there is not <code class="language-plaintext highlighter-rouge">build</code>
directory because with Linux we do things in-tree.</p>

<p><code class="language-plaintext highlighter-rouge">make mrproper</code> ensures that the kernel tree is clean, without leftover
files from previous builds. Technically, we have just unpacked it so
there should be nothing to clean, but LFS recommends this step just in
case something has slipped through the packaging.</p>

<p><code class="language-plaintext highlighter-rouge">make headers_install INSTALL_HDR_PATH="$SYSROOT/usr"</code> places the
headers under <code class="language-plaintext highlighter-rouge">$SYSROOT/usr/include</code> (the <code class="language-plaintext highlighter-rouge">include</code> is added
automatically). The kernel headers are the first thing placed under the
sysroot, as they belong to the target system, and according to the
<a href="https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard">Filesystem Hierarchy Standard</a>, system include files should go
under <code class="language-plaintext highlighter-rouge">/usr/include</code>.</p>

<p>The commands above don’t show an important element: in order to
extract headers for the appropriate target architecture, the kernel
build system looks for an <code class="language-plaintext highlighter-rouge">ARCH</code> variable. We didn’t explicitly pass
one, however, because it is already defined in our environment via
<code class="language-plaintext highlighter-rouge">activate.bash</code>. <code class="language-plaintext highlighter-rouge">ARCH</code> is a convention used by many tools (the kernel,
U-Boot, BusyBox among others) and by placing it in the environment we
can’t forget it.</p>

<h2 id="build-glibc">Build glibc</h2>

<p>Ensure your python is up to date, as glibc’s build systems checks for
this:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>pacman <span class="nt">-S</span> <span class="nt">--needed</span> <span class="nt">--noconfirm</span> python
</code></pre></div></div>

<p>Unpack and configure:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> <span class="nv">$CROSSDIR</span>/mytoolchain/sources/glibc
<span class="nb">tar</span> <span class="nt">-xf</span> glibc-2.34.tar.xz
<span class="nb">mkdir</span> <span class="nt">-p</span> build
<span class="nb">cd </span>build

<span class="o">(</span>
  <span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$TOOLS</span><span class="s2">/../bootstrap/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>

  <span class="c"># Configure</span>
  ../glibc-2.34/configure <span class="se">\</span>
    <span class="nt">--prefix</span><span class="o">=</span>/usr <span class="se">\</span>
    <span class="nt">--host</span><span class="o">=</span><span class="s2">"</span><span class="nv">$TARGET_TRIPLET</span><span class="s2">"</span> <span class="se">\</span>
    <span class="nt">--build</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOST_TRIPLET</span><span class="s2">"</span> <span class="se">\</span>
    <span class="nt">--with-headers</span><span class="o">=</span><span class="s2">"</span><span class="nv">$SYSROOT</span><span class="s2">/usr/include"</span> <span class="se">\</span>
    <span class="nt">--enable-kernel</span><span class="o">=</span>3.2

  <span class="c"># Build</span>
  make <span class="nt">-j</span><span class="sb">`</span><span class="nb">nproc</span><span class="sb">`</span> <span class="nv">CXX</span><span class="o">=</span><span class="s1">''</span>

  <span class="c"># Install</span>
  make <span class="nb">install </span><span class="nv">DESTDIR</span><span class="o">=</span><span class="s2">"</span><span class="nv">$SYSROOT</span><span class="s2">"</span> <span class="nv">CXX</span><span class="o">=</span><span class="s1">''</span>
<span class="o">)</span>
</code></pre></div></div>

<p>First, note that we are injecting a modified <code class="language-plaintext highlighter-rouge">PATH</code> into the
environment. This is required to find the bootstrap compiler, since the
<code class="language-plaintext highlighter-rouge">bootstrap/bin</code> folder is not in our default <code class="language-plaintext highlighter-rouge">PATH</code>.</p>

<p>Unlike previous components, glibc’s prefix is <code class="language-plaintext highlighter-rouge">/usr</code>. Again, glibc is a
target library, so its expected installation path is under the
root filesystem of the target system, which is what it will see at
runtime.</p>

<p><code class="language-plaintext highlighter-rouge">--host</code> and <code class="language-plaintext highlighter-rouge">--build</code> control the actual cross-compilation. There is no
<code class="language-plaintext highlighter-rouge">--target</code>, because glibc does not emit code for a platform, it <em>runs</em>
on a platform, the <em>host</em>, which needs to be set to the triplet of the
target ARM system. <code class="language-plaintext highlighter-rouge">--build</code>, conversely, specifies the system used for
the build, which is our current x86-64 machine.</p>

<p><code class="language-plaintext highlighter-rouge">--with-headers</code> merely specifies where the kernel headers are to be
found. <code class="language-plaintext highlighter-rouge">--enable-kernel</code> defines the <em>lowest</em> Linux kernel version that
this C library will support. The higher the version, the faster and
smaller the code becomes, because it does not need to cater to older
kernels and can drop compatibility stuff. But it also means that if you
ever try to run an application linked against this glibc on a system
whose running kernel is lower than <code class="language-plaintext highlighter-rouge">--enable-kernel</code>, all you get is an
abort. The value <code class="language-plaintext highlighter-rouge">3.2</code> is the lowest version still supported by glibc
2.34, which means we are compiling for the widest range of kernels, at
the expense of the largest compatibility bloat.</p>

<p>When doing <code class="language-plaintext highlighter-rouge">make</code> and <code class="language-plaintext highlighter-rouge">make install</code>, there’s an extra <code class="language-plaintext highlighter-rouge">CXX=''</code>
variable. If you skim through the output of configure, you’ll notice a
warning message saying that the cross-<code class="language-plaintext highlighter-rouge">g++</code> was found without a target
prefix. What is actually happening is that, since with didn’t enable C++
for the bootstrap compiler, there is no <code class="language-plaintext highlighter-rouge">g++</code> under <code class="language-plaintext highlighter-rouge">bootstrap</code>, and the
build system ends up finding the <code class="language-plaintext highlighter-rouge">g++</code> that is installed on the host,
typically at <code class="language-plaintext highlighter-rouge">/usr/bin/g++</code>. Of course, this compiler cannot handle ARM
code. So when actually calling <code class="language-plaintext highlighter-rouge">make</code> we override this selection with an
empty value, causing some Makefile code to behave as if no C++ compiler
is installed. This is required to avoid the build phase trying to
compile a C++ file, <code class="language-plaintext highlighter-rouge">./glibc-2.34/support/links-dso-program.cc</code>,
which also has a C equivalent
<code class="language-plaintext highlighter-rouge">./glibc-2.34/support/links-dso-program-c.c</code> that will be used instead.</p>

<p>With glibc installed, the last step is to build the final GCC. Before
that, however, we can get rid of the bootstrap compiler, as its work is
over:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">rm</span> <span class="nt">-rf</span> <span class="s2">"</span><span class="nv">$TOOLS</span><span class="s2">/../bootstrap"</span>
</code></pre></div></div>

<h2 id="build-the-final-gcc">Build the final GCC</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> <span class="nv">$CROSSDIR</span>/mytoolchain/sources/gcc
<span class="nb">tar</span> <span class="nt">-xf</span> gcc-11.2.0.tar.xz
<span class="nb">mv </span>gcc-11.2.0<span class="o">{</span>,-final<span class="o">}</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> build-final
<span class="nb">cd </span>build-final

../gcc-11.2.0-final/configure <span class="se">\</span>
  <span class="nt">--prefix</span><span class="o">=</span><span class="s1">''</span> <span class="se">\</span>
  <span class="nt">--target</span><span class="o">=</span><span class="s2">"</span><span class="nv">$TARGET_TRIPLET</span><span class="s2">"</span> <span class="se">\</span>
  <span class="nt">--with-sysroot</span><span class="o">=</span><span class="s1">'${exec_prefix}/sysroot'</span> <span class="se">\</span>
  <span class="nt">--with-build-sysroot</span><span class="o">=</span><span class="s2">"</span><span class="nv">$SYSROOT</span><span class="s2">"</span> <span class="se">\</span>
  <span class="nt">--enable-languages</span><span class="o">=</span>c,c++ <span class="se">\</span>
  <span class="nt">--enable-initfini-array</span>
</code></pre></div></div>

<p>Most options should be familiar by now. This time we also enable C++
support and the <code class="language-plaintext highlighter-rouge">--disable-*</code> options are gone as we want to build the
full thing. The only new stuff is <code class="language-plaintext highlighter-rouge">--with-build-sysroot</code>, which points
to the full path of our sysroot. As per the docs, a build sysroot works
just like a sysroot, but it is only used while building GCC itself, it
is <em>not</em> remembered by the final cross-compiler. The reason we need this
is allowing the build system to properly find include files and
libraries under the sysroot even if the value of <code class="language-plaintext highlighter-rouge">--with-sysroot</code> does
not make sense during the build.  Without this option, the build will
fail with errors claiming that header files cannot be found under
<code class="language-plaintext highlighter-rouge">/sysroot/usr/include</code>. GCC is smart enough to compute the absolute path
to the sysroot using its own executable path, but the build system is
not.</p>

<p>Now build and install:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make <span class="nt">-j</span><span class="sb">`</span><span class="nb">nproc</span><span class="sb">`</span>
make <span class="nb">install </span><span class="nv">DESTDIR</span><span class="o">=</span><span class="s2">"</span><span class="nv">$TOOLS</span><span class="s2">"</span>
</code></pre></div></div>

<p>Congrats! This was the last step. Now let’s try out the cross compiler.</p>

<h2 id="test-the-cross-toolchain">Test the cross-toolchain</h2>

<p>To test the cross toolchain, we’ll build a totally nonsensical C++ app
that calls both some C and C++ functions and uses exceptions to simply
print a string, basically to exert C, C++ features and stack unwinding.
Then we’ll use qemu to see if it runs.</p>

<p>Install qemu for ARM:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>pacman <span class="nt">-S</span> <span class="nt">--needed</span> <span class="nt">--noconfirm</span> qemu-arch-extra
</code></pre></div></div>

<p>Place the following code into a <code class="language-plaintext highlighter-rouge">test.cc</code> file:</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;sys/utsname.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdexcept&gt;</span><span class="cp">
</span>
<span class="c1">// A couple of functions</span>
<span class="kt">void</span> <span class="nf">func1</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">runtime_error</span><span class="p">(</span><span class="s">"Hello crossworld"</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">func</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="n">func1</span><span class="p">();</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(...)</span> <span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="s">"Hello crossworld from C"</span><span class="p">);</span>
    <span class="k">throw</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span>
      <span class="n">func</span><span class="p">();</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">runtime_error</span> <span class="o">&amp;</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">" from C++ too!"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">struct</span> <span class="nc">utsname</span> <span class="n">un</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">uname</span><span class="p">(</span><span class="o">&amp;</span><span class="n">un</span><span class="p">))</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"This little show was hosted by "</span> <span class="o">&lt;&lt;</span> <span class="n">un</span><span class="p">.</span><span class="n">machine</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Build the code and run it:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Dynamically linked build</span>
arm-none-linux-gnueabihf-g++ <span class="nt">-o</span> <span class="nb">test </span>test.cc

qemu-arm <span class="nt">-L</span> <span class="s2">"</span><span class="nv">$SYSROOT</span><span class="s2">"</span> <span class="nt">-E</span> <span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$TOOLS</span><span class="s2">/</span><span class="nv">$TARGET_TRIPLET</span><span class="s2">/lib"</span> ./test

<span class="c"># You should see:</span>
<span class="c">#</span>
<span class="c"># Hello crossworld from C</span>
<span class="c"># Hello crossworld from C++ too!</span>
<span class="c"># Hello crossworld from C</span>
<span class="c"># Hello crossworld from C++ too!</span>
<span class="c"># Hello crossworld from C</span>
<span class="c"># Hello crossworld from C++ too!</span>
<span class="c"># Hello crossworld from C</span>
<span class="c"># Hello crossworld from C++ too!</span>
<span class="c"># Hello crossworld from C</span>
<span class="c"># Hello crossworld from C++ too!</span>
<span class="c"># This little show was hosted by armv7l</span>

<span class="c"># Same code, static build</span>
arm-none-linux-gnueabihf-g++ <span class="nt">-static</span> <span class="nt">-o</span> <span class="nb">test </span>test.cc

qemu-arm ./test
<span class="c"># Same output as above</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">-L</code> tells qemu where to find the dynamic linker for the ARM platform,
while <code class="language-plaintext highlighter-rouge">-E</code> adds an <code class="language-plaintext highlighter-rouge">LD_LIBRARY_PATH</code> to the environment of our new
process, which the dynamic linker can use to locate the standard C++
library (without that you’d get an error about loading <code class="language-plaintext highlighter-rouge">libstdc++.so.6</code>).
Such switches are not needed for the static build.</p>

<!-- Links -->]]></content><author><name>Emanuele Giacomelli</name></author><category term="ELF" /><summary type="html"><![CDATA[A cross toolchain is a set of tools (such as compiler, assembler, linker and related libraries) that run on a kind of system (such as an AMD64 machine) but produce programs that will run on a different architecture (ARM, MIPS, …). Typically, a toolchain installed on one’s system is, conversely, configured to produce programs that run on the same systems as the toolchain itself: this is called a native toolchain.]]></summary></entry><entry><title type="html">Variable visibility and role reuse in Ansible</title><link href="https://binary-manu.github.io/binary-is-better/ansible/ansible-role-reuse" rel="alternate" type="text/html" title="Variable visibility and role reuse in Ansible" /><published>2021-05-09T00:00:00+02:00</published><updated>2021-05-09T00:00:00+02:00</updated><id>https://binary-manu.github.io/binary-is-better/ansible/ansible-role-reuse</id><content type="html" xml:base="https://binary-manu.github.io/binary-is-better/ansible/ansible-role-reuse"><![CDATA[<p>In Ansible, we can create canned units of work through <em>roles</em>. Each
role contains tasks and their related files, templates, handlers and
variable definitions. Each role should be designed to perform a specific
job, like installing a web server or setting up routing tables.  They
are one of the basic forms of code reuse in Ansible.</p>

<p>To use a role, we add it to our plays so that it gets executed at the
proper time. Ansible provides 3 different methods to invoke a role from
a play:</p>

<ul>
  <li>the <code class="language-plaintext highlighter-rouge">roles</code> play keyword: this is the traditional way of calling a
role; each role is listed in the play in the order we want them to
run. Ansible ensures that they are run after the <code class="language-plaintext highlighter-rouge">pre_tasks</code> but
before the <code class="language-plaintext highlighter-rouge">tasks</code> for this play;</li>
  <li>the <code class="language-plaintext highlighter-rouge">import_role</code> task works much like <code class="language-plaintext highlighter-rouge">roles</code>, but being a task we
can place it among other tasks. This allows us to reuse a role in
between other tasks. Also, <code class="language-plaintext highlighter-rouge">import_role</code> is not subject to the
limitations of <code class="language-plaintext highlighter-rouge">roles</code> regarding multiple executions of the same role,
so calling it twice with the same arguments result in two calls in a
row without special configurations (i.e. setting <code class="language-plaintext highlighter-rouge">allow_duplicates</code>);</li>
  <li>the <code class="language-plaintext highlighter-rouge">include_role</code> task is the dynamic version of <code class="language-plaintext highlighter-rouge">import_role</code>. Where
<code class="language-plaintext highlighter-rouge">import_role</code> acts as if the callee role was effectively part of the
play (which affects variable visibility as we’ll see in a moment),
<code class="language-plaintext highlighter-rouge">include_role</code> provides a higher degree of independence between the
play and the role.</li>
</ul>

<p>An important facet of role reuse regards variable visibility: if a role
is used in a play, its variables, as defined in its <code class="language-plaintext highlighter-rouge">defaults</code> and
<code class="language-plaintext highlighter-rouge">vars</code> files, can be made available to other parts of the play, and the
same is possible for variables defined for a specific role invocation
using the <code class="language-plaintext highlighter-rouge">vars</code> keyword. How this happens exactly depends on how the
role is called, using one of the methods described above.  This is a
point worth understanding because it can lead to surprising
consequences.</p>

<p>First, we’ll have a look at the visibility of role variables defined in
<code class="language-plaintext highlighter-rouge">defaults</code> and <code class="language-plaintext highlighter-rouge">vars</code> files. After that, we’ll explore visibility of
variables defined for individual role invocations.</p>

<p>All the following code snippets are fully runnable playbooks, and the
output has been produced with Ansible 2.10.</p>

<h2 id="visibility-of-vars-and-defaults">Visibility of <code class="language-plaintext highlighter-rouge">vars</code> and <code class="language-plaintext highlighter-rouge">defaults</code></h2>

<h3 id="importing-roles-statically">Importing roles statically</h3>

<p>First, we analyze the case of static role imports. As mentioned above,
they are performed either using the <code class="language-plaintext highlighter-rouge">roles</code> play keyword or the
<code class="language-plaintext highlighter-rouge">include_role</code> task.  As far as this article is concerned, we’ll see
that the two methods behave exactly the same.</p>

<p>When a role is imported statically, Ansible behaves as if all the
components of the role, its tasks, its variables and others, were
physically written inside the play itself. For example, if a play calls
on a role that defines a variable <code class="language-plaintext highlighter-rouge">foo</code> in its <code class="language-plaintext highlighter-rouge">defaults</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">I'm a play</span>
  <span class="na">roles</span><span class="pi">:</span>
    <span class="c1"># This role defines a variable 'foo` in its defaults</span>
    <span class="pi">-</span> <span class="s">define_foo</span>
</code></pre></div></div>

<p>Ansible treats it as if we had written:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">I'm a play</span>
  <span class="na">vars</span><span class="pi">:</span>
    <span class="na">foo</span><span class="pi">:</span> <span class="s">bar</span>
  <span class="na">roles</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">define_foo</span>
</code></pre></div></div>

<p>The consequences of this design are far-reaching. If a variable is
defined at the play level, it is accessible from all the tasks and roles
called from that play. And this includes all tasks that would run
<em>before</em> the one that defines the variable.</p>

<p>Consider the following example:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ./main.yaml</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Run the test</span>
  <span class="na">hosts</span><span class="pi">:</span> <span class="s">localhost</span>
  <span class="na">connection</span><span class="pi">:</span> <span class="s">local</span>
  <span class="na">pre_tasks</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">debug</span><span class="pi">:</span>
        <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">}}"</span>
  <span class="na">roles</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">var</span>
  <span class="na">tasks</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">debug</span><span class="pi">:</span>
        <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">}}"</span>
<span class="nn">---</span>
<span class="c1"># ./roles/var/defaults/main.yaml</span>
<span class="na">foo</span><span class="pi">:</span> <span class="s2">"</span><span class="s">I'm</span><span class="nv"> </span><span class="s">'foo'</span><span class="nv"> </span><span class="s">and</span><span class="nv"> </span><span class="s">I'm</span><span class="nv"> </span><span class="s">defined</span><span class="nv"> </span><span class="s">in</span><span class="nv"> </span><span class="s">'var'"</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">var</code> role has only a <code class="language-plaintext highlighter-rouge">defaults</code> file. Being statically imported,
its variables are promoted to the play level. So, if we run it:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PLAY [Run the test] ************************************************************

TASK [Gathering Facts] *********************************************************
ok: [localhost]

TASK [debug] *******************************************************************
ok: [localhost] =&gt; {
    "msg": "I'm 'foo' and I'm defined in 'var'"
}

TASK [debug] *******************************************************************
ok: [localhost] =&gt; {
    "msg": "I'm 'foo' and I'm defined in 'var'"
}

PLAY RECAP *********************************************************************
localhost                  : ok=3    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0 
</code></pre></div></div>

<p>See how the <code class="language-plaintext highlighter-rouge">pre_tasks</code> can access the variable <code class="language-plaintext highlighter-rouge">foo</code> defined by role
<code class="language-plaintext highlighter-rouge">var</code>, even if <code class="language-plaintext highlighter-rouge">var</code> is meant to be executed <em>after</em> the <code class="language-plaintext highlighter-rouge">pre_tasks</code>.
This can be surprising as there is no clue about the definition of that
variable when we reach the <code class="language-plaintext highlighter-rouge">pre_tasks</code>.</p>

<p>If we rewrite the example to use <code class="language-plaintext highlighter-rouge">import_role</code>, it behaves exactly the
same:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ./main.yaml</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Run the test</span>
  <span class="na">hosts</span><span class="pi">:</span> <span class="s">localhost</span>
  <span class="na">connection</span><span class="pi">:</span> <span class="s">local</span>
  <span class="na">pre_tasks</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">debug</span><span class="pi">:</span>
        <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">}}"</span>
  <span class="na">tasks</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">import_role</span><span class="pi">:</span>
        <span class="na">name</span><span class="pi">:</span> <span class="s">var</span>
    <span class="pi">-</span> <span class="na">debug</span><span class="pi">:</span>
        <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">}}"</span>
<span class="nn">---</span>
<span class="c1"># ./roles/var/defaults/main.yaml</span>
<span class="na">foo</span><span class="pi">:</span> <span class="s2">"</span><span class="s">I'm</span><span class="nv"> </span><span class="s">'foo'</span><span class="nv"> </span><span class="s">and</span><span class="nv"> </span><span class="s">I'm</span><span class="nv"> </span><span class="s">defined</span><span class="nv"> </span><span class="s">in</span><span class="nv"> </span><span class="s">'var'"</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PLAY [Run the test] ************************************************************

TASK [Gathering Facts] *********************************************************
ok: [localhost]

TASK [debug] *******************************************************************
ok: [localhost] =&gt; {
    "msg": "I'm 'foo' and I'm defined in 'var'"
}

TASK [debug] *******************************************************************
ok: [localhost] =&gt; {
    "msg": "I'm 'foo' and I'm defined in 'var'"
}

PLAY RECAP *********************************************************************
localhost                  : ok=3    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0
</code></pre></div></div>

<p>From now on, we’ll only show example using <code class="language-plaintext highlighter-rouge">roles</code>, as the reader can
easily derive the equivalent version using <code class="language-plaintext highlighter-rouge">import_role</code>.</p>

<p>This is much what there is to say about static imports, as this behavior
cannot be tweaked in any way. Whenever you statically import a role, all
its variables can be accessed from any other task or role from the same
play, no matter their relative positioning.</p>

<p><a name="name-chash"></a></p>

<p>This can lead to unintended interactions. For example, suppose we call
a role which uses a variable <code class="language-plaintext highlighter-rouge">state</code> to decide which action it should
perform. If we do not specify a value, we would assume that the role
will receive no variable from outside and thus can fallback on a
default. This is a common pattern for many Ansible tasks:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ./main.yaml</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Run the test</span>
  <span class="na">hosts</span><span class="pi">:</span> <span class="s">localhost</span>
  <span class="na">connection</span><span class="pi">:</span> <span class="s">local</span>
  <span class="na">roles</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">do_thing</span>
    <span class="pi">-</span> <span class="na">role</span><span class="pi">:</span> <span class="s">do_another_thing</span>
      <span class="na">vars</span><span class="pi">:</span>
        <span class="na">state</span><span class="pi">:</span> <span class="s">a nap</span>
<span class="nn">---</span>
<span class="c1"># ./roles/do_thing/tasks/main.yaml</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">do_thing</span>
  <span class="na">debug</span><span class="pi">:</span>
    <span class="na">msg</span><span class="pi">:</span> <span class="s">I'm going to do {{ state | default("nothing") }}</span>
<span class="nn">---</span>
<span class="c1"># ./roles/do_another_thing/tasks/main.yaml</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">do_another_thing</span>
  <span class="na">debug</span><span class="pi">:</span>
    <span class="na">msg</span><span class="pi">:</span> <span class="s">I'm going to do {{ state | default("a walk") }}</span>
</code></pre></div></div>

<p>What we desire is, for the first role invocation, to have <code class="language-plaintext highlighter-rouge">do_thing</code>
called and perform its default action. After that, we call
<code class="language-plaintext highlighter-rouge">do_another_thing</code> with an explicit variable, to have it perform a
specific action. Therefore, the two tasks should do <code class="language-plaintext highlighter-rouge">nothing</code> and <code class="language-plaintext highlighter-rouge">a
nap</code>. However, what we get is:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">PLAY [Run the test] ************************************************************</span>

<span class="s">TASK [Gathering Facts] *********************************************************</span>
<span class="na">ok</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">localhost</span><span class="pi">]</span>

<span class="s">TASK [do_thing</span> <span class="err">:</span> <span class="s">do_thing] *****************************************************</span>
<span class="na">ok</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">localhost</span><span class="pi">]</span> <span class="s">=&gt; {</span>
    <span class="s">"msg"</span><span class="err">:</span> <span class="s2">"</span><span class="s">I'm</span><span class="nv"> </span><span class="s">going</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">do</span><span class="nv"> </span><span class="s">a</span><span class="nv"> </span><span class="s">nap"</span>
<span class="err">}</span>

<span class="s">TASK [do_another_thing</span> <span class="err">:</span> <span class="s">do_another_thing] *************************************</span>
<span class="na">ok</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">localhost</span><span class="pi">]</span> <span class="s">=&gt; {</span>
    <span class="s">"msg"</span><span class="err">:</span> <span class="s2">"</span><span class="s">I'm</span><span class="nv"> </span><span class="s">going</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">do</span><span class="nv"> </span><span class="s">a</span><span class="nv"> </span><span class="s">nap"</span>
<span class="err">}</span>

<span class="s">PLAY RECAP *********************************************************************</span>
<span class="na">localhost                  </span><span class="pi">:</span> <span class="s">ok=3    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0</span>
</code></pre></div></div>

<p>Without surprise, the <code class="language-plaintext highlighter-rouge">state</code> variable from the second role invocation
percolated up to the first one, subverting the intended semantics of the
call.</p>

<p>To put it differently, once you pass a variable to a statically imported
role invocation, that variable is also passed to all other invocations
of the same role. You can no longer count on any internal role defaults,
because play variables override them.</p>

<p>A simple solution to this kind of problem is to use prefixes in variable
names to isolate variable logically belonging to different roles. If
instead of <code class="language-plaintext highlighter-rouge">state</code> we used, for example, <code class="language-plaintext highlighter-rouge">do_thing_state</code> and
<code class="language-plaintext highlighter-rouge">do_another_thing_state</code> state, there would be no conflict between the two
role invocations. <code class="language-plaintext highlighter-rouge">do_thing</code> would still be able to access
<code class="language-plaintext highlighter-rouge">do_another_thing_state</code>, but it would simply not use it. And if it did,
it would be pretty easy to spot the mistake, since the variable prefix
does not belong to the role.</p>

<p>Unfortunately, this trick will not avoid name clashes between multiple
invocations of the <em>same</em> role, because then prefixes would obviously
collide. We’ll see a solution to this problem later.</p>

<h3 id="importing-roles-dynamically">Importing roles dynamically</h3>

<p><code class="language-plaintext highlighter-rouge">include_role</code> behaves differently than <code class="language-plaintext highlighter-rouge">import_role</code>. Ansible performs
no pre-processing of this kind of role invocation and will not add
anything to the play. This behaves more like a real function call and
helps keeping things uncluttered.</p>

<p>By default, <code class="language-plaintext highlighter-rouge">defaults</code> and <code class="language-plaintext highlighter-rouge">vars</code> defined in a role that is called
dynamically will be unavailable to other roles or tasks in the same
play, no matter if they come before or after the include.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ./main.yaml</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Run the test</span>
  <span class="na">hosts</span><span class="pi">:</span> <span class="s">localhost</span>
  <span class="na">connection</span><span class="pi">:</span> <span class="s">local</span>
  <span class="na">pre_tasks</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Before</span>
      <span class="na">debug</span><span class="pi">:</span>
        <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">}}"</span>
  <span class="na">tasks</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">include_role</span><span class="pi">:</span>
        <span class="na">name</span><span class="pi">:</span> <span class="s">var</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">After</span>
      <span class="na">debug</span><span class="pi">:</span>
        <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">}}"</span>
<span class="nn">---</span>
<span class="c1"># ./roles/var/defaults/main.yaml</span>
<span class="na">foo</span><span class="pi">:</span> <span class="s2">"</span><span class="s">I'm</span><span class="nv"> </span><span class="s">'foo'</span><span class="nv"> </span><span class="s">and</span><span class="nv"> </span><span class="s">I'm</span><span class="nv"> </span><span class="s">defined</span><span class="nv"> </span><span class="s">in</span><span class="nv"> </span><span class="s">'var'"</span>
</code></pre></div></div>

<p>Running this playbook produces the following error about <code class="language-plaintext highlighter-rouge">foo</code> being
undefined for the <code class="language-plaintext highlighter-rouge">Before</code> task. For readability, part of the error
message has been redacted:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PLAY [Run the test] ************************************************************

TASK [Gathering Facts] *********************************************************
ok: [localhost]

TASK [Before] ******************************************************************
fatal: [localhost]: FAILED! =&gt; {"msg": "The task includes an option with
an undefined variable. The error was: 'foo' is undefined [REDACTED]

PLAY RECAP *********************************************************************
localhost                  : ok=1    changed=0    unreachable=0    failed=1    skipped=0    rescued=0    ignored=0
</code></pre></div></div>

<p>If we want to be sure that <code class="language-plaintext highlighter-rouge">foo</code> is also unavailable to tasks following
the call, we can simply remove <code class="language-plaintext highlighter-rouge">Before</code> from the play:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ./main.yaml</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Run the test</span>
  <span class="na">hosts</span><span class="pi">:</span> <span class="s">localhost</span>
  <span class="na">connection</span><span class="pi">:</span> <span class="s">local</span>
  <span class="na">tasks</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">include_role</span><span class="pi">:</span>
        <span class="na">name</span><span class="pi">:</span> <span class="s">var</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">After</span>
      <span class="na">debug</span><span class="pi">:</span>
        <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">}}"</span>
<span class="nn">---</span>
<span class="c1"># ./roles/var/defaults/main.yaml</span>
<span class="na">foo</span><span class="pi">:</span> <span class="s2">"</span><span class="s">I'm</span><span class="nv"> </span><span class="s">'foo'</span><span class="nv"> </span><span class="s">and</span><span class="nv"> </span><span class="s">I'm</span><span class="nv"> </span><span class="s">defined</span><span class="nv"> </span><span class="s">in</span><span class="nv"> </span><span class="s">'var'"</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PLAY [Run the test] ************************************************************

TASK [Gathering Facts] *********************************************************
ok: [localhost]

TASK [include_role : var] ******************************************************

TASK [After] *******************************************************************
fatal: [localhost]: FAILED! =&gt; {"msg": "The task includes an option with
an undefined variable. The error was: 'foo' is undefined [REDACTED]

PLAY RECAP *********************************************************************
localhost                  : ok=1    changed=0    unreachable=0    failed=1    skipped=0    rescued=0    ignored=0 
</code></pre></div></div>

<p>And again, the variable is undefined.</p>

<p>Unlike <code class="language-plaintext highlighter-rouge">import_role</code>, this behaviour can be tweaked: <code class="language-plaintext highlighter-rouge">include_role</code>
accepts a <code class="language-plaintext highlighter-rouge">public</code> boolean argument. It’s default is <code class="language-plaintext highlighter-rouge">false</code> which
matches what we have just seen. Setting it to <code class="language-plaintext highlighter-rouge">true</code> makes <code class="language-plaintext highlighter-rouge">defaults</code>
and <code class="language-plaintext highlighter-rouge">vars</code> from the included role available to tasks coming <em>after</em> the
<code class="language-plaintext highlighter-rouge">include_role</code>. This is safer than a static import, because we get to
read the task responsible for the definition of a variable before it can
be used. Also, the presence of <code class="language-plaintext highlighter-rouge">public</code> makes this explicit.</p>

<p>Let’s review the previous example with a task before and one after the
include and check that, even with <code class="language-plaintext highlighter-rouge">public</code>, tasks coming before the
include cannot read role variables:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ./main.yaml</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Run the test</span>
  <span class="na">hosts</span><span class="pi">:</span> <span class="s">localhost</span>
  <span class="na">connection</span><span class="pi">:</span> <span class="s">local</span>
  <span class="na">pre_tasks</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Before</span>
      <span class="na">debug</span><span class="pi">:</span>
        <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">}}"</span>
  <span class="na">tasks</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">include_role</span><span class="pi">:</span>
        <span class="na">name</span><span class="pi">:</span> <span class="s">var</span>
        <span class="na">public</span><span class="pi">:</span> <span class="s">yes</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">After</span>
      <span class="na">debug</span><span class="pi">:</span>
        <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">}}"</span>
<span class="nn">---</span>
<span class="c1"># ./roles/var/defaults/main.yaml</span>
<span class="na">foo</span><span class="pi">:</span> <span class="s2">"</span><span class="s">I'm</span><span class="nv"> </span><span class="s">'foo'</span><span class="nv"> </span><span class="s">and</span><span class="nv"> </span><span class="s">I'm</span><span class="nv"> </span><span class="s">defined</span><span class="nv"> </span><span class="s">in</span><span class="nv"> </span><span class="s">'var'"</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PLAY [Run the test] ************************************************************

TASK [Gathering Facts] *********************************************************
ok: [localhost]

TASK [Before] ******************************************************************
fatal: [localhost]: FAILED! =&gt; {"msg": "The task includes an option with
an undefined variable. The error was: 'foo' is undefined [REDACTED]

PLAY RECAP *********************************************************************
localhost                  : ok=1    changed=0    unreachable=0    failed=1    skipped=0    rescued=0    ignored=0
</code></pre></div></div>

<p>If we remove the <code class="language-plaintext highlighter-rouge">Before</code> task, everything works and <code class="language-plaintext highlighter-rouge">After</code> can access
the <code class="language-plaintext highlighter-rouge">foo</code> variable from the role:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ./main.yaml</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Run the test</span>
  <span class="na">hosts</span><span class="pi">:</span> <span class="s">localhost</span>
  <span class="na">connection</span><span class="pi">:</span> <span class="s">local</span>
  <span class="na">tasks</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">include_role</span><span class="pi">:</span>
        <span class="na">name</span><span class="pi">:</span> <span class="s">var</span>
        <span class="na">public</span><span class="pi">:</span> <span class="s">yes</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">After</span>
      <span class="na">debug</span><span class="pi">:</span>
        <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">}}"</span>
<span class="nn">---</span>
<span class="c1"># ./roles/var/defaults/main.yaml</span>
<span class="na">foo</span><span class="pi">:</span> <span class="s2">"</span><span class="s">I'm</span><span class="nv"> </span><span class="s">'foo'</span><span class="nv"> </span><span class="s">and</span><span class="nv"> </span><span class="s">I'm</span><span class="nv"> </span><span class="s">defined</span><span class="nv"> </span><span class="s">in</span><span class="nv"> </span><span class="s">'var'"</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PLAY [Run the test] ************************************************************

TASK [Gathering Facts] *********************************************************
ok: [localhost]

TASK [include_role : var] ******************************************************

TASK [After] *******************************************************************
ok: [localhost] =&gt; {
    "msg": "I'm 'foo' and I'm defined in 'var'"
}

PLAY RECAP *********************************************************************
localhost                  : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0  
</code></pre></div></div>

<h2 id="visibility-of-task-level-vars">Visibility of task-level vars</h2>

<p>At this point, we have clarified what happens to variables a role
defines via its <code class="language-plaintext highlighter-rouge">defaults</code> or <code class="language-plaintext highlighter-rouge">vars</code> files. But a role can also receive
variables from the caller via the role or tasks-level <code class="language-plaintext highlighter-rouge">vars</code> keyword.
This variables are meant to complement or override <code class="language-plaintext highlighter-rouge">defaults</code> and <code class="language-plaintext highlighter-rouge">vars</code>
from the role on a call-by-call basis.</p>

<p>The default Ansible behaviour for this variables is to give them the
same visibility as other role variables, which means that for static
imports they would be visible to tasks both before and after the import,
while for dynamic imports they follow the behaviour dictated by the
<code class="language-plaintext highlighter-rouge">public</code> attribute.</p>

<h3 id="static-imports">Static imports</h3>

<p>In the following examples, we’ll use a <code class="language-plaintext highlighter-rouge">print</code> role which simply prints
a variable <code class="language-plaintext highlighter-rouge">foo</code> without defining it: it will be passed by the caller.
Let’s see how this interacts with other tasks:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ./main.yaml</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Run the test</span>
  <span class="na">hosts</span><span class="pi">:</span> <span class="s">localhost</span>
  <span class="na">connection</span><span class="pi">:</span> <span class="s">local</span>
  <span class="na">pre_tasks</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">debug</span><span class="pi">:</span>
        <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">}}"</span>
  <span class="na">roles</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">role</span><span class="pi">:</span> <span class="s">print</span>
      <span class="na">vars</span><span class="pi">:</span>
        <span class="na">foo</span><span class="pi">:</span> <span class="s2">"</span><span class="s">I'm</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">passed</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">print</span><span class="nv"> </span><span class="s">in</span><span class="nv"> </span><span class="s">vars"</span>
  <span class="na">tasks</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">debug</span><span class="pi">:</span>
        <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">}}"</span>
<span class="nn">---</span>
<span class="c1"># ./roles/print/tasks/main.yaml</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Print 'foo'</span>
  <span class="na">debug</span><span class="pi">:</span>
    <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">}}"</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>TASK [Gathering Facts] *********************************************************
ok: [localhost]

TASK [debug] *******************************************************************
ok: [localhost] =&gt; {
    "msg": "I'm the foo passed to print in vars"
}

TASK [print : Print 'foo'] *****************************************************
ok: [localhost] =&gt; {
    "msg": "I'm the foo passed to print in vars"
}

TASK [debug] *******************************************************************
ok: [localhost] =&gt; {
    "msg": "I'm the foo passed to print in vars"
}

PLAY RECAP *********************************************************************
localhost                  : ok=4    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0 
</code></pre></div></div>

<p>See how <code class="language-plaintext highlighter-rouge">foo</code> is made available to tasks before and after the role, just
as if it were defined in a <code class="language-plaintext highlighter-rouge">vars</code> file.</p>

<p>According to <a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html#ansible-variable-precedence">variable precedence rules</a>, task vars override
both play vars and role defaults, so if we also define <code class="language-plaintext highlighter-rouge">foo</code> within the role
and the play, those values will be ignored:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ./main.yaml</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Run the test</span>
  <span class="na">hosts</span><span class="pi">:</span> <span class="s">localhost</span>
  <span class="na">connection</span><span class="pi">:</span> <span class="s">local</span>
  <span class="na">vars</span><span class="pi">:</span>
    <span class="na">foo</span><span class="pi">:</span> <span class="s2">"</span><span class="s">I'm</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">passed</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">whole</span><span class="nv"> </span><span class="s">play"</span>
  <span class="na">pre_tasks</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">debug</span><span class="pi">:</span>
        <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">}}"</span>
  <span class="na">roles</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">role</span><span class="pi">:</span> <span class="s">print</span>
      <span class="na">vars</span><span class="pi">:</span>
        <span class="na">foo</span><span class="pi">:</span> <span class="s2">"</span><span class="s">I'm</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">passed</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">print</span><span class="nv"> </span><span class="s">in</span><span class="nv"> </span><span class="s">vars"</span>
  <span class="na">tasks</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">debug</span><span class="pi">:</span>
        <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">}}"</span>
<span class="nn">---</span>
<span class="c1"># ./roles/print/tasks/main.yaml</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Print 'foo'</span>
  <span class="na">debug</span><span class="pi">:</span>
    <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">}}"</span>
<span class="nn">---</span>
<span class="c1"># ./roles/print/defaults/main.yaml</span>
<span class="na">foo</span><span class="pi">:</span> <span class="s2">"</span><span class="s">I'm</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">defined</span><span class="nv"> </span><span class="s">in</span><span class="nv"> </span><span class="s">role</span><span class="nv"> </span><span class="s">vars"</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PLAY [Run the test] ************************************************************

TASK [Gathering Facts] *********************************************************
ok: [localhost]

TASK [debug] *******************************************************************
ok: [localhost] =&gt; {
    "msg": "I'm the foo passed to print in vars"
}

TASK [print : Print 'foo'] *****************************************************
ok: [localhost] =&gt; {
    "msg": "I'm the foo passed to print in vars"
}

TASK [debug] *******************************************************************
ok: [localhost] =&gt; {
    "msg": "I'm the foo passed to print in vars"
}

PLAY RECAP *********************************************************************
localhost                  : ok=4    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
</code></pre></div></div>

<p>There is currently an <a href="https://github.com/ansible/ansible/issues/69388">issue</a> in Ansible which causes
variables defined in a role’s <code class="language-plaintext highlighter-rouge">vars</code> folder to take precedence over
variables defined for the individual <code class="language-plaintext highlighter-rouge">role</code> call.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ./main.yaml</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Run the test</span>
  <span class="na">hosts</span><span class="pi">:</span> <span class="s">localhost</span>
  <span class="na">connection</span><span class="pi">:</span> <span class="s">local</span>
  <span class="na">vars</span><span class="pi">:</span>
    <span class="na">foo</span><span class="pi">:</span> <span class="s2">"</span><span class="s">I'm</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">passed</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">whole</span><span class="nv"> </span><span class="s">play"</span>
  <span class="na">pre_tasks</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">debug</span><span class="pi">:</span>
        <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">}}"</span>
  <span class="na">roles</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">role</span><span class="pi">:</span> <span class="s">print</span>
      <span class="na">vars</span><span class="pi">:</span>
        <span class="na">foo</span><span class="pi">:</span> <span class="s2">"</span><span class="s">I'm</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">passed</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">print</span><span class="nv"> </span><span class="s">in</span><span class="nv"> </span><span class="s">vars"</span>
  <span class="na">tasks</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">debug</span><span class="pi">:</span>
        <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">}}"</span>
<span class="nn">---</span>
<span class="c1"># ./roles/print/tasks/main.yaml</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Print 'foo'</span>
  <span class="na">debug</span><span class="pi">:</span>
    <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">}}"</span>
<span class="nn">---</span>
<span class="c1"># ./roles/print/vars/main.yaml</span>
<span class="na">foo</span><span class="pi">:</span> <span class="s2">"</span><span class="s">I'm</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">defined</span><span class="nv"> </span><span class="s">in</span><span class="nv"> </span><span class="s">role</span><span class="nv"> </span><span class="s">vars"</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PLAY [Run the test] ************************************************************

TASK [Gathering Facts] *********************************************************
ok: [localhost]

TASK [debug] *******************************************************************
ok: [localhost] =&gt; {
    "msg": "I'm the foo defined in role vars"
}

TASK [print : Print 'foo'] *****************************************************
ok: [localhost] =&gt; {
    "msg": "I'm the foo defined in role vars"
}

TASK [debug] *******************************************************************
ok: [localhost] =&gt; {
    "msg": "I'm the foo defined in role vars"
}

PLAY RECAP *********************************************************************
localhost                  : ok=4    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=
</code></pre></div></div>

<p>To get the intended behaviour, with call-specific variables overriding
role-wide ones, stick to <code class="language-plaintext highlighter-rouge">defaults</code> rather than <code class="language-plaintext highlighter-rouge">vars</code> in a role layout.</p>

<p>Ansible provides a configuration switch that restricts the availability
of call-level variables to that single specific call. It can be set
either via the <code class="language-plaintext highlighter-rouge">ANSIBLE_PRIVATE_ROLE_VARS</code> environment variable or via
the configuration file, like this:</p>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># This is ansible.cfg
</span><span class="nn">[defaults]</span>
<span class="py">private_role_vars</span> <span class="p">=</span> <span class="s">true</span>
</code></pre></div></div>

<p>Once this setting is in effect, call-level variables will no longer be
available to other tasks. Let’s retry the previous example with the new
configuration:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ./main.yaml</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Run the test</span>
  <span class="na">hosts</span><span class="pi">:</span> <span class="s">localhost</span>
  <span class="na">connection</span><span class="pi">:</span> <span class="s">local</span>
  <span class="na">pre_tasks</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Before</span>
      <span class="na">debug</span><span class="pi">:</span>
        <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">}}"</span>
  <span class="na">roles</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">role</span><span class="pi">:</span> <span class="s">print</span>
      <span class="na">vars</span><span class="pi">:</span>
        <span class="na">foo</span><span class="pi">:</span> <span class="s2">"</span><span class="s">I'm</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">passed</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">print</span><span class="nv"> </span><span class="s">in</span><span class="nv"> </span><span class="s">vars"</span>
  <span class="na">tasks</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">After</span>
      <span class="na">debug</span><span class="pi">:</span>
        <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">}}"</span>
<span class="nn">---</span>
<span class="c1"># ./roles/print/tasks/main.yaml</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Print 'foo'</span>
  <span class="na">debug</span><span class="pi">:</span>
    <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">}}"</span>
<span class="nn">---</span>
<span class="c1"># ./ansible.cfg</span>
<span class="pi">[</span><span class="nv">defaults</span><span class="pi">]</span>
<span class="s">private_role_vars = </span><span class="no">true</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PLAY [Run the test] ************************************************************************************************

TASK [Gathering Facts] *********************************************************************************************
ok: [localhost]

TASK [Before] ******************************************************************************************************
fatal: [localhost]: FAILED! =&gt; {"msg": "The task includes an option with
an undefined variable. The error was: 'foo' is undefined [REDACTED]

PLAY RECAP *********************************************************************************************************
localhost                  : ok=1    changed=0    unreachable=0    failed=1    skipped=0    rescued=0    ignored=0
</code></pre></div></div>

<p>The task before the role cannot access <code class="language-plaintext highlighter-rouge">foo</code>. This is also true for the
task after it:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ./main.yaml</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Run the test</span>
  <span class="na">hosts</span><span class="pi">:</span> <span class="s">localhost</span>
  <span class="na">connection</span><span class="pi">:</span> <span class="s">local</span>
  <span class="na">roles</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">role</span><span class="pi">:</span> <span class="s">print</span>
      <span class="na">vars</span><span class="pi">:</span>
        <span class="na">foo</span><span class="pi">:</span> <span class="s2">"</span><span class="s">I'm</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">passed</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">print</span><span class="nv"> </span><span class="s">in</span><span class="nv"> </span><span class="s">vars"</span>
  <span class="na">tasks</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">After</span>
      <span class="na">debug</span><span class="pi">:</span>
        <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">}}"</span>
<span class="nn">---</span>
<span class="c1"># ./roles/print/tasks/main.yaml</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Print 'foo'</span>
  <span class="na">debug</span><span class="pi">:</span>
    <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">}}"</span>
<span class="nn">---</span>
<span class="c1"># ./ansible.cfg</span>
<span class="pi">[</span><span class="nv">defaults</span><span class="pi">]</span>
<span class="s">private_role_vars = </span><span class="no">true</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PLAY [Run the test] ************************************************************************************************

TASK [Gathering Facts] *********************************************************************************************
ok: [localhost]

TASK [print : Print 'foo'] *****************************************************************************************
ok: [localhost] =&gt; {
    "msg": "I'm the foo passed to print in vars"
}

TASK [After] *******************************************************************************************************
fatal: [localhost]: FAILED! =&gt; {"msg": "The task includes an option with
an undefined variable. The error was: 'foo' is undefined [REDACTED]

PLAY RECAP *********************************************************************************************************
localhost                  : ok=2    changed=0    unreachable=0    failed=1    skipped=0    rescued=0    ignored=0 
</code></pre></div></div>

<p>When combined with play-level variables, call-level variables are
visible to the role only, while other tasks still see the play-level
value:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ./main.yaml</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Run the test</span>
  <span class="na">hosts</span><span class="pi">:</span> <span class="s">localhost</span>
  <span class="na">connection</span><span class="pi">:</span> <span class="s">local</span>
  <span class="na">vars</span><span class="pi">:</span>
    <span class="na">foo</span><span class="pi">:</span> <span class="s2">"</span><span class="s">I'm</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">global</span><span class="nv"> </span><span class="s">foo"</span>
  <span class="na">pre_tasks</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">debug</span><span class="pi">:</span>
        <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">}}"</span>
  <span class="na">roles</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">role</span><span class="pi">:</span> <span class="s">print</span>
      <span class="na">vars</span><span class="pi">:</span>
        <span class="na">foo</span><span class="pi">:</span> <span class="s2">"</span><span class="s">I'm</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">passed</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">print</span><span class="nv"> </span><span class="s">in</span><span class="nv"> </span><span class="s">vars"</span>
  <span class="na">tasks</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">debug</span><span class="pi">:</span>
        <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">}}"</span>
<span class="nn">---</span>
<span class="c1"># ./roles/print/tasks/main.yaml</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Print 'foo'</span>
  <span class="na">debug</span><span class="pi">:</span>
    <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">}}"</span>
<span class="nn">---</span>
<span class="c1"># ./ansible.cfg</span>
<span class="pi">[</span><span class="nv">defaults</span><span class="pi">]</span>
<span class="s">private_role_vars = </span><span class="no">true</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PLAY [Run the test] ************************************************************************************************

TASK [Gathering Facts] *********************************************************************************************
ok: [localhost]

TASK [debug] *******************************************************************************************************
ok: [localhost] =&gt; {
    "msg": "I'm the global foo"
}

TASK [print : Print 'foo'] *****************************************************************************************
ok: [localhost] =&gt; {
    "msg": "I'm the foo passed to print in vars"
}

TASK [debug] *******************************************************************************************************
ok: [localhost] =&gt; {
    "msg": "I'm the global foo"
}

PLAY RECAP *********************************************************************************************************
localhost                  : ok=4    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0 
</code></pre></div></div>

<p>The same is true for role defaults: they are available to other tasks,
but the task itself sees the task-level overrides:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ./main.yaml</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Run the test</span>
  <span class="na">hosts</span><span class="pi">:</span> <span class="s">localhost</span>
  <span class="na">connection</span><span class="pi">:</span> <span class="s">local</span>
  <span class="na">pre_tasks</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">debug</span><span class="pi">:</span>
        <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">}}"</span>
  <span class="na">roles</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">role</span><span class="pi">:</span> <span class="s">print</span>
      <span class="na">vars</span><span class="pi">:</span>
        <span class="na">foo</span><span class="pi">:</span> <span class="s2">"</span><span class="s">I'm</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">passed</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">print</span><span class="nv"> </span><span class="s">in</span><span class="nv"> </span><span class="s">vars"</span>
  <span class="na">tasks</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">debug</span><span class="pi">:</span>
        <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">}}"</span>
<span class="nn">---</span>
<span class="c1"># ./roles/print/tasks/main.yaml</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Print 'foo'</span>
  <span class="na">debug</span><span class="pi">:</span>
    <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">}}"</span>
<span class="nn">---</span>
<span class="c1"># ./roles/print/defaults/main.yaml</span>
<span class="na">foo</span><span class="pi">:</span> <span class="s2">"</span><span class="s">I'm</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">defined</span><span class="nv"> </span><span class="s">in</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">defaults"</span>
<span class="nn">---</span>
<span class="c1"># ./ansible.cfg</span>
<span class="pi">[</span><span class="nv">defaults</span><span class="pi">]</span>
<span class="s">private_role_vars = </span><span class="no">true</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PLAY [Run the test] ************************************************************************************************

TASK [Gathering Facts] *********************************************************************************************
ok: [localhost]

TASK [debug] *******************************************************************************************************
ok: [localhost] =&gt; {
    "msg": "I'm foo defined in the defaults"
}

TASK [print : Print 'foo'] *****************************************************************************************
ok: [localhost] =&gt; {
    "msg": "I'm the foo passed to print in vars"
}

TASK [debug] *******************************************************************************************************
ok: [localhost] =&gt; {
    "msg": "I'm foo defined in the defaults"
}

PLAY RECAP *********************************************************************************************************
localhost                  : ok=4    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0 
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">import_role</code> behaves in the same way.</p>

<p>Using <code class="language-plaintext highlighter-rouge">private_role_vars</code> can help solve the other typical name clash
problem that arises with static imports. We have <a href="#name-clashes">already
seen</a> how to handle clashes between different roles. But
that solution does not allow calling the same role more than once
without call-level variables passed to one call impacting the others.</p>

<p><code class="language-plaintext highlighter-rouge">private_role_vars</code> can provide a solution:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ./main.yaml &lt;==</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Run the test</span>
  <span class="na">hosts</span><span class="pi">:</span> <span class="s">localhost</span>
  <span class="na">connection</span><span class="pi">:</span> <span class="s">local</span>
  <span class="na">roles</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">do_thing</span>
    <span class="pi">-</span> <span class="na">role</span><span class="pi">:</span> <span class="s">do_thing</span>
      <span class="na">vars</span><span class="pi">:</span>
        <span class="na">state</span><span class="pi">:</span> <span class="s">a nap</span>
<span class="nn">---</span>
<span class="c1"># ./roles/do_thing/tasks/main.yaml &lt;==</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">do_thing</span>
  <span class="na">debug</span><span class="pi">:</span>
    <span class="na">msg</span><span class="pi">:</span> <span class="s">I'm going to do {{ state | default("nothing") }}</span>
<span class="nn">---</span>
<span class="c1"># ./ansible.cfg &lt;==</span>
<span class="pi">[</span><span class="nv">defaults</span><span class="pi">]</span>
<span class="s">private_role_vars = </span><span class="no">true</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PLAY [Run the test] ************************************************************

TASK [Gathering Facts] *********************************************************
ok: [localhost]

TASK [do_thing : do_thing] *****************************************************
ok: [localhost] =&gt; {
    "msg": "I'm going to do nothing"
}

TASK [do_thing : do_thing] *****************************************************
ok: [localhost] =&gt; {
    "msg": "I'm going to do a nap"
}

PLAY RECAP *********************************************************************
localhost                  : ok=3    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
</code></pre></div></div>

<p>This time, the playbook work as intended. The <code class="language-plaintext highlighter-rouge">state</code> variable passed to
the second role invocation only affects that invocation. The first one
receives no <code class="language-plaintext highlighter-rouge">state</code> variable, and the default filter correctly expands
to the internally defined default value.</p>

<h3 id="dynamic-includes">Dynamic includes</h3>

<p>When calling roles dynamically, task-level <code class="language-plaintext highlighter-rouge">vars</code> follow the behaviour
mandated by <code class="language-plaintext highlighter-rouge">public</code>. They are available to no other tasks if <code class="language-plaintext highlighter-rouge">public</code>
is set to <code class="language-plaintext highlighter-rouge">false</code>, and to subsequent tasks only if <code class="language-plaintext highlighter-rouge">public</code> is set to
<code class="language-plaintext highlighter-rouge">true</code>.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ./main.yaml</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Run the test</span>
  <span class="na">hosts</span><span class="pi">:</span> <span class="s">localhost</span>
  <span class="na">connection</span><span class="pi">:</span> <span class="s">local</span>
  <span class="na">pre_tasks</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Before</span>
      <span class="na">debug</span><span class="pi">:</span>
        <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">}}"</span>
  <span class="na">tasks</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">include_role</span><span class="pi">:</span>
        <span class="na">name</span><span class="pi">:</span> <span class="s">print</span>
      <span class="na">vars</span><span class="pi">:</span>
        <span class="na">foo</span><span class="pi">:</span> <span class="s2">"</span><span class="s">I'm</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">passed</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">print</span><span class="nv"> </span><span class="s">in</span><span class="nv"> </span><span class="s">vars"</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">After</span>
      <span class="na">debug</span><span class="pi">:</span>
        <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">}}"</span>
<span class="nn">---</span>
<span class="c1"># ./roles/print/tasks/main.yaml</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Print 'foo'</span>
  <span class="na">debug</span><span class="pi">:</span>
    <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">}}"</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PLAY [Run the test] ************************************************************************************************

TASK [Gathering Facts] *********************************************************************************************
ok: [localhost]

TASK [Before] ******************************************************************************************************
fatal: [localhost]: FAILED! =&gt; {"msg": "The task includes an option with
an undefined variable. The error was: 'foo' is undefined [REDACTED]

PLAY RECAP *********************************************************************************************************
localhost                  : ok=1    changed=0    unreachable=0    failed=1    skipped=0    rescued=0    ignored=0 
</code></pre></div></div>

<p>And:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ./main.yaml</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Run the test</span>
  <span class="na">hosts</span><span class="pi">:</span> <span class="s">localhost</span>
  <span class="na">connection</span><span class="pi">:</span> <span class="s">local</span>
  <span class="na">tasks</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">include_role</span><span class="pi">:</span>
        <span class="na">name</span><span class="pi">:</span> <span class="s">print</span>
      <span class="na">vars</span><span class="pi">:</span>
        <span class="na">foo</span><span class="pi">:</span> <span class="s2">"</span><span class="s">I'm</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">passed</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">print</span><span class="nv"> </span><span class="s">in</span><span class="nv"> </span><span class="s">vars"</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">After</span>
      <span class="na">debug</span><span class="pi">:</span>
        <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">}}"</span>
<span class="nn">---</span>
<span class="c1"># ./roles/print/tasks/main.yaml</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Print 'foo'</span>
  <span class="na">debug</span><span class="pi">:</span>
    <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">}}"</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PLAY [Run the test] ************************************************************************************************

TASK [Gathering Facts] *********************************************************************************************
ok: [localhost]

TASK [include_role : print] ****************************************************************************************

TASK [print : Print 'foo'] *****************************************************************************************
ok: [localhost] =&gt; {
    "msg": "I'm the foo passed to print in vars"
}

TASK [After] *******************************************************************************************************
fatal: [localhost]: FAILED! =&gt; {"msg": "The task includes an option with
an undefined variable. The error was: 'foo' is undefined [REDACTED]

PLAY RECAP *********************************************************************************************************
localhost                  : ok=2    changed=0    unreachable=0    failed=1    skipped=0    rescued=0    ignored=0 
</code></pre></div></div>

<p>And:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ./main.yaml</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Run the test</span>
  <span class="na">hosts</span><span class="pi">:</span> <span class="s">localhost</span>
  <span class="na">connection</span><span class="pi">:</span> <span class="s">local</span>
  <span class="na">tasks</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">include_role</span><span class="pi">:</span>
        <span class="na">name</span><span class="pi">:</span> <span class="s">print</span>
        <span class="na">public</span><span class="pi">:</span> <span class="s">yes</span>
      <span class="na">vars</span><span class="pi">:</span>
        <span class="na">foo</span><span class="pi">:</span> <span class="s2">"</span><span class="s">I'm</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">passed</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">print</span><span class="nv"> </span><span class="s">in</span><span class="nv"> </span><span class="s">vars"</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">After</span>
      <span class="na">debug</span><span class="pi">:</span>
        <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">}}"</span>
<span class="nn">---</span>
<span class="c1"># ./roles/print/tasks/main.yaml</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Print 'foo'</span>
  <span class="na">debug</span><span class="pi">:</span>
    <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">}}"</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PLAY [Run the test] ************************************************************************************************

TASK [Gathering Facts] *********************************************************************************************
ok: [localhost]

TASK [include_role : print] ****************************************************************************************

TASK [print : Print 'foo'] *****************************************************************************************
ok: [localhost] =&gt; {
    "msg": "I'm the foo passed to print in vars"
}

TASK [After] *******************************************************************************************************
ok: [localhost] =&gt; {
    "msg": "I'm the foo passed to print in vars"
}

PLAY RECAP *********************************************************************************************************
localhost                  : ok=3    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0
</code></pre></div></div>

<p>If we now add <code class="language-plaintext highlighter-rouge">private_role_vars</code> and a default value for <code class="language-plaintext highlighter-rouge">foo</code>, notice
how the subsequent task receives the default value of <code class="language-plaintext highlighter-rouge">foo</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ./main.yaml</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Run the test</span>
  <span class="na">hosts</span><span class="pi">:</span> <span class="s">localhost</span>
  <span class="na">connection</span><span class="pi">:</span> <span class="s">local</span>
  <span class="na">tasks</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">include_role</span><span class="pi">:</span>
        <span class="na">name</span><span class="pi">:</span> <span class="s">print</span>
        <span class="na">public</span><span class="pi">:</span> <span class="s">yes</span>
      <span class="na">vars</span><span class="pi">:</span>
        <span class="na">foo</span><span class="pi">:</span> <span class="s2">"</span><span class="s">I'm</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">passed</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">print</span><span class="nv"> </span><span class="s">in</span><span class="nv"> </span><span class="s">vars"</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">After</span>
      <span class="na">debug</span><span class="pi">:</span>
        <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">}}"</span>
<span class="nn">---</span>
<span class="c1"># ./roles/print/tasks/main.yaml</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Print 'foo'</span>
  <span class="na">debug</span><span class="pi">:</span>
    <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">}}"</span>
<span class="nn">---</span>
<span class="c1"># ./roles/print/defaults/main.yaml</span>
<span class="na">foo</span><span class="pi">:</span> <span class="s2">"</span><span class="s">I'm</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">from</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">defaults"</span>
<span class="nn">---</span>
<span class="c1"># ./ansible.cfg</span>
<span class="pi">[</span><span class="nv">defaults</span><span class="pi">]</span>
<span class="s">private_role_vars = </span><span class="no">true</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PLAY [Run the test] ************************************************************************************************

TASK [Gathering Facts] *********************************************************************************************
ok: [localhost]

TASK [include_role : print] ****************************************************************************************

TASK [print : Print 'foo'] *****************************************************************************************
ok: [localhost] =&gt; {
    "msg": "I'm the foo passed to print in vars"
}

TASK [After] *******************************************************************************************************
ok: [localhost] =&gt; {
    "msg": "I'm the foo from the defaults"
}

PLAY RECAP *********************************************************************************************************
localhost                  : ok=3    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0 
</code></pre></div></div>

<p>The same holds if we replace the role default with a play variable:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ./main.yaml</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Run the test</span>
  <span class="na">hosts</span><span class="pi">:</span> <span class="s">localhost</span>
  <span class="na">connection</span><span class="pi">:</span> <span class="s">local</span>
  <span class="na">vars</span><span class="pi">:</span>
    <span class="na">foo</span><span class="pi">:</span> <span class="s">Global foo</span>
  <span class="na">tasks</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">include_role</span><span class="pi">:</span>
        <span class="na">name</span><span class="pi">:</span> <span class="s">print</span>
        <span class="na">public</span><span class="pi">:</span> <span class="s">yes</span>
      <span class="na">vars</span><span class="pi">:</span>
        <span class="na">foo</span><span class="pi">:</span> <span class="s2">"</span><span class="s">I'm</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">passed</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">print</span><span class="nv"> </span><span class="s">in</span><span class="nv"> </span><span class="s">vars"</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">After</span>
      <span class="na">debug</span><span class="pi">:</span>
        <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">}}"</span>
<span class="nn">---</span>
<span class="c1"># ./roles/print/tasks/main.yaml</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Print 'foo'</span>
  <span class="na">debug</span><span class="pi">:</span>
    <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">foo</span><span class="nv"> </span><span class="s">}}"</span>
<span class="nn">---</span>
<span class="c1"># ./ansible.cfg</span>
<span class="pi">[</span><span class="nv">defaults</span><span class="pi">]</span>
<span class="s">private_role_vars = </span><span class="no">true</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PLAY [Run the test] ************************************************************************************************

TASK [Gathering Facts] *********************************************************************************************
ok: [localhost]

TASK [include_role : print] ****************************************************************************************

TASK [print : Print 'foo'] *****************************************************************************************
ok: [localhost] =&gt; {
    "msg": "I'm the foo passed to print in vars"
}

TASK [After] *******************************************************************************************************
ok: [localhost] =&gt; {
    "msg": "Global foo"
}

PLAY RECAP *********************************************************************************************************
localhost                  : ok=3    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0 
</code></pre></div></div>

<h2 id="summing-up">Summing up</h2>

<p>As we have seen, interactions between role defaults, play variables and
vars passed to specific tasks or role invocations can lead to surprises.
To minimize the chances of unwanted name clashes, some rules can be
helpful:</p>

<ul>
  <li>prefer <code class="language-plaintext highlighter-rouge">include_role</code> to <code class="language-plaintext highlighter-rouge">import_role</code> or <code class="language-plaintext highlighter-rouge">roles</code> when possible, as
this prevents role defaults being available to earlier roles and
tasks;</li>
  <li>prefer keeping <code class="language-plaintext highlighter-rouge">public</code> in calls to <code class="language-plaintext highlighter-rouge">include_role</code> set to <code class="language-plaintext highlighter-rouge">false</code>, so
that role defaults are not available to tasks coming later;</li>
  <li>prefer running with <code class="language-plaintext highlighter-rouge">private_role_vars</code> set to <code class="language-plaintext highlighter-rouge">true</code>;</li>
  <li>use prefixes (or any other naming scheme that can reasonably guarantee
uniqueness) to logically separate variables belonging to different
roles.</li>
</ul>

<!-- Links -->]]></content><author><name>Emanuele Giacomelli</name></author><category term="Ansible" /><summary type="html"><![CDATA[In Ansible, we can create canned units of work through roles. Each role contains tasks and their related files, templates, handlers and variable definitions. Each role should be designed to perform a specific job, like installing a web server or setting up routing tables. They are one of the basic forms of code reuse in Ansible.]]></summary></entry><entry><title type="html">A hands-on introduction to the K8S NGINX ingress feat. Minikube</title><link href="https://binary-manu.github.io/binary-is-better/kubernetes/k8s-nginx-ingress" rel="alternate" type="text/html" title="A hands-on introduction to the K8S NGINX ingress feat. Minikube" /><published>2020-11-29T00:00:00+01:00</published><updated>2020-11-29T00:00:00+01:00</updated><id>https://binary-manu.github.io/binary-is-better/kubernetes/k8s-nginx-ingress</id><content type="html" xml:base="https://binary-manu.github.io/binary-is-better/kubernetes/k8s-nginx-ingress"><![CDATA[<p>This article is a simple hands-on step-by-step guide about settings up
the NGINX ingress on a K8S cluster.  For our tests, I’ll be using a
Minikube cluster on an Arch Linux system, plus Helm for installing
charts.</p>

<h2 id="setting-up-minikube">Setting up Minikube</h2>

<p>Arch provides packages for all the needed tools, so we can simply
install them via:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>pacman <span class="nt">-S</span> <span class="nt">--needed</span> <span class="nt">--noconfirm</span> minikube kubectl helm
</code></pre></div></div>

<p>In case another distribution is in use, you can get the latest binaries from
their release pages:</p>
<ul>
  <li><a href="https://github.com/helm/helm/releases">Helm</a></li>
  <li><a href="https://github.com/kubernetes/kubectl/releases">Kubectl</a></li>
  <li><a href="https://github.com/kubernetes/minikube/releases">Minikube</a></li>
</ul>

<p>This is especially important if your distro comes with older versions of
these tools, as some options have been deprecated in recent releases.
As a rule, I will use command switches which are non-deprecated in the
latest releases available in Arch at the time of writing:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>minikube version
minikube version: v1.15.1
commit: 23f40a012abb52eff365ff99a709501a61ac5876-dirty

<span class="nv">$ </span>kubectl version <span class="nt">--client</span><span class="o">=</span><span class="nb">true
</span>Client Version: version.Info<span class="o">{</span>Major:<span class="s2">"1"</span>, Minor:<span class="s2">"19"</span>, GitVersion:<span class="s2">"v1.19.4"</span>, GitCommit:<span class="s2">"d360454c9bcd1634cf4cc52d1867af5491dc9c5f"</span>, GitTreeState:<span class="s2">"archive"</span>, BuildDate:<span class="s2">"2020-11-25T13:19:56Z"</span>, GoVersion:<span class="s2">"go1.15.5"</span>, Compiler:<span class="s2">"gc"</span>, Platform:<span class="s2">"linux/amd64"</span><span class="o">}</span>

<span class="nv">$ </span>helm version
version.BuildInfo<span class="o">{</span>Version:<span class="s2">"v3.4.1"</span>, GitCommit:<span class="s2">"c4e74854886b2efe3321e185578e6db9be0a6e29"</span>, GitTreeState:<span class="s2">"clean"</span>, GoVersion:<span class="s2">"go1.15.4"</span><span class="o">}</span>
</code></pre></div></div>

<p>Of course, components which have version relationships must be able to
interwork.  <code class="language-plaintext highlighter-rouge">kubectl</code> and the K8S API server have <a href="https://kubernetes.io/docs/setup/release/version-skew-policy/#kubectl">version
constraints</a> with respect to one another, so
one cannot simply choose random versions. To keep it simple, we will ask
Minikube to install a K8S cluster following the same version as our
local <code class="language-plaintext highlighter-rouge">kubectl</code>.</p>

<p><em>NOTE 1: some terminal output snippets produced by <code class="language-plaintext highlighter-rouge">minikube</code> contain
emojis. Be sure to have a font that can render them on your system. On
Arch Linux, installing <code class="language-plaintext highlighter-rouge">noto-fonts-emoji</code> from the AUR suffices.</em></p>

<p><em>NOTE 2: in the examples below, the <code class="language-plaintext highlighter-rouge">kvm2</code> Minikube backend is used to
create a VM that hosts the K8S cluster, backed by <code class="language-plaintext highlighter-rouge">libvirt</code> and <code class="language-plaintext highlighter-rouge">qemu</code>.
Minikube supports other backends, so if <code class="language-plaintext highlighter-rouge">kvm2</code> does not work on your
systemm you may try requesting a different backend os just omit the
<code class="language-plaintext highlighter-rouge">--driver</code> options to let Minikube choose one based on what is
installed. If no backend works out of the box, installing <code class="language-plaintext highlighter-rouge">libvirt</code> can
fix the issue. Arch users may refer to <a href="https://wiki.archlinux.org/index.php/Libvirt">this ArchWiki
page</a>.  OpenSUSE users may refer to <a href="https://doc.opensuse.org/documentation/leap/virtualization/html/book.virt/cha-vt-installation.html#sec-vt-installation-kvm">this
page</a>.</em></p>

<p>Let’s start a Minkube cluster:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ K8S_VERSION</span><span class="o">=</span><span class="si">$(</span>kubectl version <span class="nt">--client</span><span class="o">=</span><span class="nb">true</span> |
    <span class="nb">sed</span> <span class="nt">-E</span> <span class="s1">'s/.*GitVersion:"([^"]+)".*/\1/'</span><span class="si">)</span>
<span class="nv">$ </span><span class="nb">echo</span> <span class="nv">$K8S_VERSION</span> 
v1.19.4
<span class="nv">$ </span>minikube start <span class="nt">--driver</span><span class="o">=</span>kvm2 <span class="nt">--kubernetes-version</span><span class="o">=</span><span class="s2">"</span><span class="nv">$K8S_VERSION</span><span class="s2">"</span>
😄  minikube v1.15.1 on Arch 
✨  Using the kvm2 driver based on user configuration
💾  Downloading driver docker-machine-driver-kvm2:
    <span class="o">&gt;</span> docker-machine-driver-kvm2.sha256: 65 B / 65 B <span class="o">[</span><span class="nt">-------</span><span class="o">]</span> 100.00% ? p/s 0s
    <span class="o">&gt;</span> docker-machine-driver-kvm2: 13.56 MiB / 13.56 MiB  100.00% 557.48 KiB p/s
💿  Downloading VM boot image ...
    <span class="o">&gt;</span> minikube-v1.15.0.iso.sha256: 65 B / 65 B <span class="o">[</span><span class="nt">-------------</span><span class="o">]</span> 100.00% ? p/s 0s
    <span class="o">&gt;</span> minikube-v1.15.0.iso: 181.00 MiB / 181.00 MiB <span class="o">[]</span> 100.00% 9.23 MiB p/s 20s
👍  Starting control plane node minikube <span class="k">in </span>cluster minikube
💾  Downloading Kubernetes v1.19.4 preload ...
    <span class="o">&gt;</span> preloaded-images-k8s-v6-v1.19.4-docker-overlay2-amd64.tar.lz4: 486.35 MiB
🔥  Creating kvm2 VM <span class="o">(</span><span class="nv">CPUs</span><span class="o">=</span>2, <span class="nv">Memory</span><span class="o">=</span>4000MB, <span class="nv">Disk</span><span class="o">=</span>20000MB<span class="o">)</span> ...
🐳  Preparing Kubernetes v1.19.4 on Docker 19.03.13 ...
🔎  Verifying Kubernetes components...
🌟  Enabled addons: storage-provisioner, default-storageclass
🏄  Done! kubectl is now configured to use <span class="s2">"minikube"</span> cluster and <span class="s2">"default"</span> namespace by default
</code></pre></div></div>

<p>At this point, the cluster is up but the NGINX ingress is not installed
by default. This is true in general for Minikube clusters as well as
for clusters installed via <code class="language-plaintext highlighter-rouge">kubeadm</code>. Other cluster deployment methods
may install it automatically.</p>

<p>As a convenience, Minikube can automatically install the ingress with a
single command. but this is not the way we are going to do it, because
it cannot be used for a real, bare metal, cluster setup. For reference,
this is the command that enable Minikube’s ingress addon (don’t run
it!):</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>minikube addons <span class="nb">enable </span>ingress
🔎  Verifying ingress addon...
🌟  The <span class="s1">'ingress'</span> addon is enabled
</code></pre></div></div>

<p>Well, if you <em>did</em> run it… you can simply turn it off with:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>minikube addons disable ingress
🌑  <span class="s2">"The 'ingress' addon is disabled
</span></code></pre></div></div>

<h2 id="install-the-nginx-ingress">Install the NGINX ingress</h2>

<p>Now, back to the manual installation. The <a href="https://kubernetes.github.io/ingress-nginx/deploy/#using-helm">official ingress install
guide</a> describes how to install the ingress
using its Helm chart. However, following those commands without
customizing the chart values configure the ingress to expect an external
LoadBalancer, which we don’t want to use. Also, it creates a deployment
resource by default.</p>

<p>What we want to do, instead, is to create a DaemonSet so that each worker
gets its own ingress pod handling its incoming traffic. Also, those pods
should listen on ports 80 and 443 on the host itself, rather than
expecting an external LB to do it.</p>

<p>Thankfully, we can set a couple of values to tell the chart to do
exactly that:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">controller.hostPort.enabled</code> can be set to <code class="language-plaintext highlighter-rouge">true</code> to have the ingress
listen on host ports directly;</li>
  <li><code class="language-plaintext highlighter-rouge">controller.kind</code> can be set to <code class="language-plaintext highlighter-rouge">DaemonSet</code> to override the default
resource type.</li>
</ul>

<p>The chart will be installed to its own namespace via <code class="language-plaintext highlighter-rouge">-n</code> and we also
ask Helm to create it for us using <code class="language-plaintext highlighter-rouge">--create-namespace</code>:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
<span class="s2">"ingress-nginx"</span> has been added to your repositories

<span class="nv">$ </span>helm repo update
Hang tight <span class="k">while </span>we grab the latest from your chart repositories...
...Successfully got an update from the <span class="s2">"ingress-nginx"</span> chart repository
Update Complete. ⎈Happy Helming!⎈

<span class="nv">$ </span>helm <span class="nb">install</span> <span class="nt">-n</span> ingress-nginx <span class="nt">--create-namespace</span> ingress-nginx <span class="se">\</span>
    <span class="nt">--set</span> controller.hostPort.enabled<span class="o">=</span><span class="nb">true</span> <span class="se">\</span>
    <span class="nt">--set</span> controller.kind<span class="o">=</span>DaemonSet <span class="se">\</span>
    ingress-nginx/ingress-nginx
NAME: ingress-nginx
LAST DEPLOYED: Fri Nov 27 22:25:11 2020
NAMESPACE: ingress-nginx
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
The ingress-nginx controller has been installed.
It may take a few minutes <span class="k">for </span>the LoadBalancer IP to be available.
You can watch the status by running <span class="s1">'kubectl --namespace ingress-nginx get services -o wide -w ingress-nginx-controller'</span>
<span class="o">[</span>redacted <span class="k">for </span>brevity]
</code></pre></div></div>

<h2 id="deploy-a-test-service-to-act-as-our-traffic-target">Deploy a test service to act as our traffic target</h2>

<p>While we wait for the ingress to come up, we need some service to act as
the target of out traffic.  For this, we can use a ready-made Docker
image providing a simple static website: <code class="language-plaintext highlighter-rouge">prakhar1989/static-site</code>
(thanks to the author of that image, so I didn’t have to make one
myself 👏).</p>

<p>Let’ create a deployment for this image, as well as a ClusterIP service
that exposes it inside the cluster:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>kubectl create deployment static-site <span class="nt">--image</span><span class="o">=</span>prakhar1989/static-site
deployment.apps/static-site created

<span class="nv">$ </span>kubectl create service clusterip static-site <span class="nt">--tcp</span><span class="o">=</span>80:80
service/static-site created
</code></pre></div></div>

<p>As a test that everything is OK, we use <code class="language-plaintext highlighter-rouge">kubectl</code>’s port forwarding to
access the container and test that web pages are being served:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>kubectl port-forward service/static-site 8080:80
Forwarding from 127.0.0.1:8080 -&gt; 80
Forwarding from <span class="o">[</span>::1]:8080 -&gt; 80
</code></pre></div></div>

<p>Point your browser to <a href="http://localhost:8080">http://localhost:8080</a> and
you should see the site homepage saying <em>Hello Docker</em>.</p>

<p>Press <code class="language-plaintext highlighter-rouge">^C</code> to stop <code class="language-plaintext highlighter-rouge">kubectl</code>.</p>

<h2 id="access-the-service-via-the-ingress">Access the service via the ingress</h2>

<p>At this point we should be ready to create our
<a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#ingress-v1-networking-k8s-io">ingress</a> resource, which will tell the ingress
controller how to forward incoming HTTP requests to our services. First,
let’s do it over plain HTTP: write the following YAML to a file named
<code class="language-plaintext highlighter-rouge">ingress.yaml</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">networking.k8s.io/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Ingress</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">static-site</span>
  <span class="na">annotations</span><span class="pi">:</span>
    <span class="na">nginx.ingress.kubernetes.io/rewrite-target</span><span class="pi">:</span> <span class="s">/</span>
    <span class="na">kubernetes.io/ingress.class</span><span class="pi">:</span> <span class="s2">"</span><span class="s">nginx"</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">rules</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">http</span><span class="pi">:</span>
        <span class="na">paths</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="na">path</span><span class="pi">:</span> <span class="s">/static-site</span>
            <span class="na">pathType</span><span class="pi">:</span> <span class="s">Prefix</span>
            <span class="na">backend</span><span class="pi">:</span>
              <span class="na">service</span><span class="pi">:</span>
                <span class="na">name</span><span class="pi">:</span> <span class="s">static-site</span>
                <span class="na">port</span><span class="pi">:</span>
                  <span class="na">number</span><span class="pi">:</span> <span class="m">80</span>
</code></pre></div></div>

<p>Then, apply it:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>kubectl apply <span class="nt">-f</span> ingress.yaml
ingress.networking.k8s.io/static-site created
</code></pre></div></div>

<p>At this point, the ingress is mapping all requests whose paths start
with <code class="language-plaintext highlighter-rouge">/static-site</code> to our service, while stripping that prefix from the
URL.  To check that it’s working, ask Minikube for the VM address (don’t
copy the one from the example below as yours will likely be different):</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>minikube ip
192.168.39.231
</code></pre></div></div>

<p>and point your browser to <code class="language-plaintext highlighter-rouge">http://&lt;output of minikube ip&gt;/static-site</code>.
You should see the same page as before.</p>

<p>Let’s break down the ingress definition. First, it comes with two
annotations:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">kubernetes.io/ingress.class: "nginx"</code> controls the association
between this ingress resource and an ingress controller, which will be
responsible for routing the requests related to the paths specified in
the resource. Since we can have multiple ingress controllers in a
cluster, it is important to explicitly establish a bond between
ingress resources and controllers.  This annotation clarifies that the
traffic pertaining to this ingress resource should be handled by the
ingress controller identified by the <code class="language-plaintext highlighter-rouge">nginx</code> class. The NGINX ingress
Helm chart marked the installed ingress controller with this class for
us, so we can simply refer to it in our resources;</li>
  <li><code class="language-plaintext highlighter-rouge">nginx.ingress.kubernetes.io/rewrite-target: /</code> controls URL
rewriting. Requests coming to the ingress controller for our static
site will be rooted under <code class="language-plaintext highlighter-rouge">/static-site</code>, but the web-server running
inside the image we deployed earlier does not know anything about this
prefix, it expects pages to sit under <code class="language-plaintext highlighter-rouge">/</code>. So we must strip the prefix
from the path before forwarding the request to the pod. This
annotations tells the controller to do that.</li>
</ul>

<p>The <code class="language-plaintext highlighter-rouge">spec</code> part defined the mapping between incoming HTTP requests and
the services that should handle them. There is a single path in the
rules, which configures all URL’s starting with <code class="language-plaintext highlighter-rouge">/static-site</code> to be
forwarded to the service called <code class="language-plaintext highlighter-rouge">static-site</code> and more precisely to its
port 80.  All other paths does not have a rule, and will be handled by
the <em>default backend</em> defined by the ingress controller. For the NGINX
ingress, this will simply return an error 404.</p>

<h3 id="filter-on-host-names">Filter on host names</h3>

<p>The previous ingress resource only matched incoming requests to services
using the URL path component. The host name used in the URL, and thus
sent in the request using the <code class="language-plaintext highlighter-rouge">Host</code> header, was not involved in
selecting a backend. So, as long as the path matches the specified
prefix, our <code class="language-plaintext highlighter-rouge">static-site</code> service will get the traffic for all host
names. We can check for this using <code class="language-plaintext highlighter-rouge">curl</code>:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Access the page using the IP as the hostname, effectively sending</span>
<span class="c"># a Host header set to the Minikube IP. The actual response is discarded</span>
<span class="c"># to have a better view of curl debug lines.</span>
<span class="nv">$ </span>curl <span class="nt">--noproxy</span> <span class="se">\*</span> <span class="nt">-v</span> <span class="nt">-s</span> http://<span class="si">$(</span>minikube ip<span class="si">)</span>/static-site <span class="o">&gt;</span> /dev/null
<span class="k">*</span>   Trying 192.168.39.231:80...
<span class="k">*</span> Connected to 192.168.39.231 <span class="o">(</span>192.168.39.231<span class="o">)</span> port 80 <span class="o">(</span><span class="c">#0)</span>
<span class="o">&gt;</span> GET /static-site HTTP/1.1
<span class="o">&gt;</span> Host: 192.168.39.231
<span class="o">&gt;</span> User-Agent: curl/7.73.0
<span class="o">&gt;</span> Accept: <span class="k">*</span>/<span class="k">*</span>
<span class="o">&gt;</span> 
<span class="k">*</span> Mark bundle as not supporting multiuse
&lt; HTTP/1.1 200 OK
&lt; Date: Sat, 28 Nov 2020 13:21:39 GMT
&lt; Content-Type: text/html
&lt; Content-Length: 2041
&lt; Connection: keep-alive
&lt; Last-Modified: Sun, 03 Jan 2016 04:32:16 GMT
&lt; ETag: <span class="s2">"5688a450-7f9"</span>
&lt; Accept-Ranges: bytes
&lt; 
<span class="o">{</span> <span class="o">[</span>2041 bytes data]
<span class="k">*</span> Connection <span class="c">#0 to host 192.168.39.231 left intact</span>

<span class="c"># This time we use curl --resolve option to force a</span>
<span class="c"># chosen hostname to resolve to the Minikube IP. Due to the use of an</span>
<span class="c"># hostname in the URL, the Host header is set to static-site.local</span>
<span class="nv">$ </span>curl <span class="nt">--noproxy</span> <span class="se">\*</span> <span class="nt">-v</span> <span class="nt">-s</span> <span class="nt">--resolve</span> static-site.local:80:<span class="si">$(</span>minikube ip<span class="si">)</span> <span class="se">\</span>
  http://static-site.local/static-site <span class="o">&gt;</span> /dev/null
<span class="o">&gt;</span>   http://static-site.local/static-site <span class="o">&gt;</span> /dev/null
<span class="k">*</span> Added static-site.local:80:192.168.39.231 to DNS cache
<span class="k">*</span> Hostname static-site.local was found <span class="k">in </span>DNS cache
<span class="k">*</span>   Trying 192.168.39.231:80...
<span class="k">*</span> Connected to static-site.local <span class="o">(</span>192.168.39.231<span class="o">)</span> port 80 <span class="o">(</span><span class="c">#0)</span>
<span class="o">&gt;</span> GET /static-site HTTP/1.1
<span class="o">&gt;</span> Host: static-site.local
<span class="o">&gt;</span> User-Agent: curl/7.73.0
<span class="o">&gt;</span> Accept: <span class="k">*</span>/<span class="k">*</span>
<span class="o">&gt;</span> 
<span class="k">*</span> Mark bundle as not supporting multiuse
&lt; HTTP/1.1 200 OK
&lt; Date: Sat, 28 Nov 2020 13:24:53 GMT
&lt; Content-Type: text/html
&lt; Content-Length: 2041
&lt; Connection: keep-alive
&lt; Last-Modified: Sun, 03 Jan 2016 04:32:16 GMT
&lt; ETag: <span class="s2">"5688a450-7f9"</span>
&lt; Accept-Ranges: bytes
&lt; 
<span class="o">{</span> <span class="o">[</span>2041 bytes data]
<span class="k">*</span> Connection <span class="c">#0 to host static-site.local left intact</span>
</code></pre></div></div>

<p>As can be seen, the <code class="language-plaintext highlighter-rouge">Host</code> header is different in the two calls, but the
response was still a 200 with a payload of 2041 bytes in both cases.  In
the second test, we used <code class="language-plaintext highlighter-rouge">curl</code>’s <code class="language-plaintext highlighter-rouge">--resolve</code> option which causes the
hostname <code class="language-plaintext highlighter-rouge">static-site.local</code> to resolve to the Minikube IP without the
need to patch <code class="language-plaintext highlighter-rouge">/etc/hosts</code> or add a DNS entry.</p>

<p><em>Hint: if you prefer using your browser to test the URL’s, there is a
trick that makes Firefox resolve any domain name to a fixed IP. Open
Firefox, then type <code class="language-plaintext highlighter-rouge">about:config</code> in the address bar. Dismiss the
warning message and then use the search box to look up the property
<code class="language-plaintext highlighter-rouge">network.dns.forceResolve</code>. Place the address printed by  <code class="language-plaintext highlighter-rouge">minikube ip</code>
in the value field and confirm the change using the <code class="language-plaintext highlighter-rouge">Save </code> button. From
now on, all addresses opened in Firefox will resolve to the Minikube
VM address and you can paste URL’s employing our fake domain name.
Remember to clear the property value when done.</em></p>

<p>Of course, NGINX can perform request filtering based on hostnames. We
just have to add an <code class="language-plaintext highlighter-rouge">host</code> field to our rules in the ingress definition.
If we want our site to only be available as <code class="language-plaintext highlighter-rouge">static-site.local</code>, we can
patch the resource as follows:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">networking.k8s.io/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Ingress</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">static-site</span>
  <span class="na">annotations</span><span class="pi">:</span>
    <span class="na">nginx.ingress.kubernetes.io/rewrite-target</span><span class="pi">:</span> <span class="s">/</span>
    <span class="na">kubernetes.io/ingress.class</span><span class="pi">:</span> <span class="s2">"</span><span class="s">nginx"</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">rules</span><span class="pi">:</span>
    <span class="c1"># Note the new host field</span>
    <span class="pi">-</span> <span class="na">host</span><span class="pi">:</span> <span class="s">static-site.local</span>
      <span class="na">http</span><span class="pi">:</span>
        <span class="na">paths</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="na">path</span><span class="pi">:</span> <span class="s">/static-site</span>
            <span class="na">pathType</span><span class="pi">:</span> <span class="s">Prefix</span>
            <span class="na">backend</span><span class="pi">:</span>
              <span class="na">service</span><span class="pi">:</span>
                <span class="na">name</span><span class="pi">:</span> <span class="s">static-site</span>
                <span class="na">port</span><span class="pi">:</span>
                  <span class="na">number</span><span class="pi">:</span> <span class="m">80</span>
</code></pre></div></div>

<p>Let’s update the cluster:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>kubectl apply <span class="nt">-f</span> ingress.yaml
ingress.networking.k8s.io/static-site configured
</code></pre></div></div>

<p>and repeat out tests with <code class="language-plaintext highlighter-rouge">curl</code>:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>curl <span class="nt">--noproxy</span> <span class="se">\*</span> <span class="nt">-v</span> <span class="nt">-s</span> http://<span class="si">$(</span>minikube ip<span class="si">)</span>/static-site <span class="o">&gt;</span> /dev/null
<span class="k">*</span>   Trying 192.168.39.231:80...
<span class="k">*</span> Connected to 192.168.39.231 <span class="o">(</span>192.168.39.231<span class="o">)</span> port 80 <span class="o">(</span><span class="c">#0)</span>
<span class="o">&gt;</span> GET /static-site HTTP/1.1
<span class="o">&gt;</span> Host: 192.168.39.231
<span class="o">&gt;</span> User-Agent: curl/7.73.0
<span class="o">&gt;</span> Accept: <span class="k">*</span>/<span class="k">*</span>
<span class="o">&gt;</span> 
<span class="k">*</span> Mark bundle as not supporting multiuse
&lt; HTTP/1.1 404 Not Found
&lt; Date: Sat, 28 Nov 2020 13:33:02 GMT
&lt; Content-Type: text/html
&lt; Content-Length: 146
&lt; Connection: keep-alive
&lt; 
<span class="o">{</span> <span class="o">[</span>146 bytes data]
<span class="k">*</span> Connection <span class="c">#0 to host 192.168.39.231 left intact</span>

curl <span class="nt">--noproxy</span> <span class="se">\*</span> <span class="nt">-v</span> <span class="nt">-s</span> <span class="nt">--resolve</span> static-site.local:80:<span class="si">$(</span>minikube ip<span class="si">)</span> <span class="se">\</span>
  http://static-site.local/static-site <span class="o">&gt;</span> /dev/null
<span class="o">&gt;</span>   http://static-site.local/static-site <span class="o">&gt;</span> /dev/null
<span class="k">*</span> Added static-site.local:80:192.168.39.231 to DNS cache
<span class="k">*</span> Hostname static-site.local was found <span class="k">in </span>DNS cache
<span class="k">*</span>   Trying 192.168.39.231:80...
<span class="k">*</span> Connected to static-site.local <span class="o">(</span>192.168.39.231<span class="o">)</span> port 80 <span class="o">(</span><span class="c">#0)</span>
<span class="o">&gt;</span> GET /static-site HTTP/1.1
<span class="o">&gt;</span> Host: static-site.local
<span class="o">&gt;</span> User-Agent: curl/7.73.0
<span class="o">&gt;</span> Accept: <span class="k">*</span>/<span class="k">*</span>
<span class="o">&gt;</span> 
<span class="k">*</span> Mark bundle as not supporting multiuse
&lt; HTTP/1.1 200 OK
&lt; Date: Sat, 28 Nov 2020 13:33:48 GMT
&lt; Content-Type: text/html
&lt; Content-Length: 2041
&lt; Connection: keep-alive
&lt; Last-Modified: Sun, 03 Jan 2016 04:32:16 GMT
&lt; ETag: <span class="s2">"5688a450-7f9"</span>
&lt; Accept-Ranges: bytes
&lt; 
<span class="o">{</span> <span class="o">[</span>2041 bytes data]
<span class="k">*</span> Connection <span class="c">#0 to host static-site.local left intact</span>
</code></pre></div></div>

<p>Note that this time the request containing the IP in the URL returned
404, because the ingress is no longer matching the IP with the service.</p>

<h3 id="adding-tls">Adding TLS</h3>

<p>Until now, we have been using plain HTTP both between the client and the
ingress and between the ingress and the target service. NGINX can do
<em>TLS termination</em>, meaning it receives HTTPS requests, performs TLS
handshake, and then forwards the plain HTTP request to the final service
and relays back the response.  This way, there is a single point where
certificates and keys must be provisioned: the ingress controller itself.
Services can run over plain HTTP, while all external traffic, which
terminates at the ingress, is secured.</p>

<p>Before we can enable TLS, we must prepare a certificate. This step must
be performed with care because the ingress seems to be picky about the
certificates it accepts. In particular, it refuses certificates
that use the common name to identify the expected host name of the
server. It pretends that certificates also contain at least one subject
alternative name, even if the only one is identical to the common name.
We will first generate an “invalid” certificate without any SAN’s to
trigger the error, then we’ll create a good certificate with a SAN to
rectify the situation.</p>

<h3 id="the-bad-certificate">The “bad” certificate</h3>

<p>Let’s issue a self-signed certificate with OpenSSL (note that the
private key is stored unencrypted):</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>openssl req <span class="nt">-new</span> <span class="nt">-x509</span> <span class="nt">-nodes</span> <span class="nt">-newkey</span> rsa:2048 <span class="nt">-out</span> tls.crt <span class="nt">-keyout</span> tls.key <span class="se">\</span>
  <span class="nt">-subj</span> <span class="s1">'/C=IT/O=Local test/CN=static-site.local'</span>
Generating a RSA private key
.....................................................................................................................+++++
..............+++++
writing new private key to <span class="s1">'tls.key'</span>
<span class="nt">-----</span>
</code></pre></div></div>

<p>For the ingress controller to be able to use the certificate and the
key, we must load them to our cluster. We must use a secret for this
purpouse, which will then be referenced from the ingress resource.
<code class="language-plaintext highlighter-rouge">kubectl</code> provides a shortcut command to create a well-formed secret
suitable for use with TLS:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>kubectl create secret tls static-site <span class="nt">--cert</span><span class="o">=</span>tls.crt <span class="nt">--key</span> tls.key
secret/static-site created
</code></pre></div></div>

<p>In order to enable TLS for our ingress, we must edit the resource to add
a <code class="language-plaintext highlighter-rouge">tls</code> object:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">networking.k8s.io/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Ingress</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">static-site</span>
  <span class="na">annotations</span><span class="pi">:</span>
    <span class="na">nginx.ingress.kubernetes.io/rewrite-target</span><span class="pi">:</span> <span class="s">/</span>
    <span class="na">kubernetes.io/ingress.class</span><span class="pi">:</span> <span class="s2">"</span><span class="s">nginx"</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="c1"># This is the new stuff</span>
  <span class="na">tls</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">hosts</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">static-site.local</span>
      <span class="na">secretName</span><span class="pi">:</span> <span class="s">static-site</span>
  <span class="c1"># End new stuff</span>
  <span class="na">rules</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">host</span><span class="pi">:</span> <span class="s">static-site.local</span>
      <span class="na">http</span><span class="pi">:</span>
        <span class="na">paths</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="na">path</span><span class="pi">:</span> <span class="s">/static-site</span>
            <span class="na">pathType</span><span class="pi">:</span> <span class="s">Prefix</span>
            <span class="na">backend</span><span class="pi">:</span>
              <span class="na">service</span><span class="pi">:</span>
                <span class="na">name</span><span class="pi">:</span> <span class="s">static-site</span>
                <span class="na">port</span><span class="pi">:</span>
                  <span class="na">number</span><span class="pi">:</span> <span class="m">80</span>
</code></pre></div></div>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>kubectl apply <span class="nt">-f</span> ingress.yaml
ingress.networking.k8s.io/static-site configured
</code></pre></div></div>

<p>Note that the new <code class="language-plaintext highlighter-rouge">tls</code> object is a list, where each entry defines:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">hosts</code>: a list of expected host names to which the certificate
applies. We have set it to be equal to the <code class="language-plaintext highlighter-rouge">host</code> field inside our
only rule;</li>
  <li><code class="language-plaintext highlighter-rouge">secretName</code>: the name of a secrets that hold the certificate and key
for server-side TLS. It’s set to the name of the secret we created
earlier.</li>
</ul>

<p>As soon as the new ingress is applied, the controller reconfigures
itself to enable TLS. However, if we now dump the logs of the ingress
controller pod:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ POD_NAME</span><span class="o">=</span><span class="si">$(</span>kubectl <span class="nt">-n</span> ingress-nginx get pods <span class="nt">-o</span> <span class="nv">jsonpath</span><span class="o">=</span><span class="s1">'{$.items[0].metadata.name}'</span><span class="si">)</span>
<span class="nv">$ </span>kubectl logs <span class="nt">-n</span> ingress-nginx <span class="s2">"</span><span class="nv">$POD_NAME</span><span class="s2">"</span> | <span class="nb">grep</span> <span class="nt">-i</span> <span class="s1">'Common Name'</span>
W1128 14:04:04.781934       6 controller.go:1180] Unexpected error validating SSL certificate <span class="s2">"default/static-site"</span> <span class="k">for </span>server <span class="s2">"static-site.local"</span>: x509: certificate relies on legacy Common Name field, use SANs or temporarily <span class="nb">enable </span>Common Name matching with <span class="nv">GODEBUG</span><span class="o">=</span><span class="nv">x509ignoreCN</span><span class="o">=</span>0
</code></pre></div></div>

<p>Note the error message about the lack of subject alternative names. The
certificate has been rejected.</p>

<h3 id="the-good-certificate">The “good” certificate</h3>

<p>To create a new certificate with the appropriate SAN extension, we can
again employ <code class="language-plaintext highlighter-rouge">openssl</code> with the <code class="language-plaintext highlighter-rouge">-addext</code> option:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Generate a new certificate with a SAN of static-site.local</span>
<span class="nv">$ CN</span><span class="o">=</span>static-site.local
<span class="nv">$ </span>openssl req <span class="nt">-new</span> <span class="nt">-x509</span> <span class="nt">-nodes</span> <span class="nt">-newkey</span> rsa:2048 <span class="nt">-out</span> tls.crt <span class="nt">-keyout</span> tls.key <span class="se">\</span>
  <span class="nt">-subj</span> <span class="s2">"/C=IT/O=Local test/CN=</span><span class="nv">$CN</span><span class="s2">"</span> <span class="nt">-addext</span> <span class="s2">"subjectAltName=DNS:</span><span class="nv">$CN</span><span class="s2">"</span>
Generating a RSA private key
..............................................................................................+++++
.........................................+++++
writing new private key to <span class="s1">'tls.key'</span>

<span class="c"># Check that the certificate does contain the SAN</span>
<span class="nv">$ </span>openssl x509 <span class="nt">-text</span> <span class="nt">-in</span> tls.crt | <span class="nb">grep</span> <span class="nt">-i</span> <span class="nt">-A1</span> Alternative
            X509v3 Subject Alternative Name: 
                DNS:static-site.local

<span class="c"># Replace the secret</span>
<span class="nv">$ </span>kubectl delete secret/static-site
secret <span class="s2">"static-site"</span> deleted
<span class="nv">$ </span>kubectl create secret tls static-site <span class="nt">--cert</span><span class="o">=</span>tls.crt <span class="nt">--key</span> tls.key
secret/static-site created
</code></pre></div></div>

<p>If we access the site with <code class="language-plaintext highlighter-rouge">curl</code> now:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>curl <span class="nt">--noproxy</span> <span class="se">\*</span> <span class="nt">-v</span> <span class="nt">-s</span> <span class="nt">-k</span> <span class="nt">--resolve</span> static-site.local:443:<span class="si">$(</span>minikube ip<span class="si">)</span> <span class="se">\</span>
    https://static-site.local/static-site <span class="o">&gt;</span> /dev/null
<span class="k">*</span> Added static-site.local:443:192.168.39.231 to DNS cache
<span class="k">*</span> Hostname static-site.local was found <span class="k">in </span>DNS cache
<span class="k">*</span>   Trying 192.168.39.231:443...
<span class="k">*</span> Connected to static-site.local <span class="o">(</span>192.168.39.231<span class="o">)</span> port 443 <span class="o">(</span><span class="c">#0)</span>
<span class="o">[</span>...redacted...]
<span class="k">*</span> Server certificate:
<span class="k">*</span>  subject: <span class="nv">C</span><span class="o">=</span>IT<span class="p">;</span> <span class="nv">O</span><span class="o">=</span>Local <span class="nb">test</span><span class="p">;</span> <span class="nv">CN</span><span class="o">=</span>static-site.local
<span class="k">*</span>  start <span class="nb">date</span>: Nov 28 17:56:48 2020 GMT
<span class="k">*</span>  expire <span class="nb">date</span>: Dec 28 17:56:48 2020 GMT
<span class="k">*</span>  issuer: <span class="nv">C</span><span class="o">=</span>IT<span class="p">;</span> <span class="nv">O</span><span class="o">=</span>Local <span class="nb">test</span><span class="p">;</span> <span class="nv">CN</span><span class="o">=</span>static-site.local
<span class="k">*</span>  SSL certificate verify result: self signed certificate <span class="o">(</span>18<span class="o">)</span>, continuing anyway.
<span class="o">[</span>..redacted...]
&lt; HTTP/2 200 
&lt; <span class="nb">date</span>: Sat, 28 Nov 2020 18:05:56 GMT
&lt; content-type: text/html
&lt; content-length: 2041
&lt; last-modified: Sun, 03 Jan 2016 04:32:16 GMT
&lt; etag: <span class="s2">"5688a450-7f9"</span>
&lt; accept-ranges: bytes
&lt; strict-transport-security: max-age<span class="o">=</span>15724800<span class="p">;</span> includeSubDomains
&lt; 
<span class="o">{</span> <span class="o">[</span>2041 bytes data]
<span class="k">*</span> Connection <span class="c">#0 to host static-site.local left intact</span>
</code></pre></div></div>

<p>The response is a 200 with the expected payload size, and the
certificate dump clearly reports the data for our certificate.  Note
that the <code class="language-plaintext highlighter-rouge">-k</code> option was used to tell <code class="language-plaintext highlighter-rouge">curl</code> to accept insecure
certificates due to self-signing.</p>

<h2 id="tcp-passthrough">TCP passthrough</h2>

<p>Ingresses are designed to handle HTTP(S) traffic, that’s why they have
builtin features like path matching. However, the NGINX ingress does
support TCP passthrough: it can listen on a specific port and forward
the plain TCP connection to a target service. This way it’s possible to
use it to control non-HTTP traffic towards services.</p>

<p>The geneal way to enable this feature is explained <a href="https://kubernetes.github.io/ingress-nginx/user-guide/exposing-tcp-udp-services/">in this
page</a> and involves config maps and command line
options. It’s worth reading, but thanks to the Helm chart there is a
much easier way to do that: we can simply add entries to the top-level
<code class="language-plaintext highlighter-rouge">tcp</code> value and let the chart take care of the details. Basically, for
each port to forward, we must add a key/value entry to <code class="language-plaintext highlighter-rouge">tcp</code> with the
following format:</p>
<ul>
  <li>the key is a string representing the host port we want to listen on,
in decimal form (i.e. <code class="language-plaintext highlighter-rouge">"8123"</code>);</li>
  <li>the value is a string like <code class="language-plaintext highlighter-rouge">"namespace/serviceName:servicePort"</code>,
defining the namespace and the name of the service that will receive
the traffic, as well as the port (i.e. <code class="language-plaintext highlighter-rouge">"default/static-site:80"</code>).</li>
</ul>

<p>Let’s use this feature to expose our static site directly via port 8123.
It is not required to uninstall and reinstall the ingress Helm chart to
set the new values: <code class="language-plaintext highlighter-rouge">helm</code> has an <code class="language-plaintext highlighter-rouge">upgrade</code> command to upgrade a release
while accepting additional values.  All other values we specified at
install time are kept thanks to <code class="language-plaintext highlighter-rouge">--reuse-values</code>:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>helm upgrade <span class="nt">-n</span> ingress-nginx ingress-nginx <span class="nt">--reuse-values</span> <span class="se">\</span>
    <span class="nt">--set</span> <span class="s2">"tcp.8123=default/static-site:80"</span>  ingress-nginx/ingress-nginx
Release <span class="s2">"ingress-nginx"</span> has been upgraded. Happy Helming!
<span class="o">[</span>...redacted...]
</code></pre></div></div>

<p>Give it a few seconds to settle, then try:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>curl <span class="nt">--noproxy</span> <span class="se">\*</span> <span class="nt">-v</span> <span class="nt">-s</span> http://<span class="si">$(</span>minikube ip<span class="si">)</span>:8123/ <span class="o">&gt;</span> /dev/null
<span class="k">*</span>   Trying 192.168.39.231:8123...
<span class="k">*</span> Connected to 192.168.39.231 <span class="o">(</span>192.168.39.231<span class="o">)</span> port 8123 <span class="o">(</span><span class="c">#0)</span>
<span class="o">&gt;</span> GET / HTTP/1.1
<span class="o">&gt;</span> Host: 192.168.39.231:8123
<span class="o">&gt;</span> User-Agent: curl/7.73.0
<span class="o">&gt;</span> Accept: <span class="k">*</span>/<span class="k">*</span>
<span class="o">&gt;</span> 
<span class="k">*</span> Mark bundle as not supporting multiuse
&lt; HTTP/1.1 200 OK
&lt; Server: nginx/1.9.9
&lt; Date: Sat, 28 Nov 2020 19:38:13 GMT
&lt; Content-Type: text/html
&lt; Content-Length: 2041
&lt; Last-Modified: Sun, 03 Jan 2016 04:32:16 GMT
&lt; Connection: keep-alive
&lt; ETag: <span class="s2">"5688a450-7f9"</span>
&lt; Accept-Ranges: bytes
&lt; 
<span class="o">{</span> <span class="o">[</span>2041 bytes data]
<span class="k">*</span> Connection <span class="c">#0 to host 192.168.39.231 left intact</span>
</code></pre></div></div>

<p>And the usual site page is back, served directly from the webserver
running <em>inside</em> the container.</p>

<h2 id="thats-all">That’s all</h2>

<p>NGINX and the NGINX K8S ingress have much more features that were shown
here. But these instructions should be enough to get you started with
ingresses. Thanks for reading.</p>

<!-- Links -->]]></content><author><name>Emanuele Giacomelli</name></author><category term="Kubernetes" /><summary type="html"><![CDATA[This article is a simple hands-on step-by-step guide about settings up the NGINX ingress on a K8S cluster. For our tests, I’ll be using a Minikube cluster on an Arch Linux system, plus Helm for installing charts.]]></summary></entry><entry><title type="html">Linux account and password lifecycle</title><link href="https://binary-manu.github.io/binary-is-better/linux/pw_lifecycle" rel="alternate" type="text/html" title="Linux account and password lifecycle" /><published>2020-09-20T00:00:00+02:00</published><updated>2020-09-20T00:00:00+02:00</updated><id>https://binary-manu.github.io/binary-is-better/linux/pw_lifecycle</id><content type="html" xml:base="https://binary-manu.github.io/binary-is-better/linux/pw_lifecycle"><![CDATA[<p>User account creation and maintenance is a typical routine task for
*NIX system administrators. Yet, this topic can sometimes be confusing
because account information is scattered across a number of files, and
each file stores multiple information fields whose meaning and relations
to one another may not be so obvious, especially when it comes to the
lifecycle of the account and its related password. Let’s have a look at
the most important files that store account information and, in
particular, the meaning of information that impact the lifecycle of
passwords and accounts.</p>

<h2 id="account-data-storage">Account data storage</h2>

<p>In order to keep track of users on a system, each user gets its own
<em>account</em>. Each account stores a plethora of information that is used by
different tools to authenticate users and appropriately setup the
environment after login.</p>

<p>On Linux, the system stores the following data for each account:</p>

<ul>
  <li><em>username</em>: the human-readable identifier used to refer to this
specific user, which is typically typed at login time. For example,
<code class="language-plaintext highlighter-rouge">johndoe</code>;</li>
  <li><em>password and password-aging data</em>: each account has a password, which
may be used for authentication at login time. Depending on how you are
logging in the password may or may not be required (i.e.  public key
authentication with SSH does not use it). The password also comes with
some related data that track its <em>aging</em>: the last time it was
changed, how much time can elapse before a change is enforced and so
on;</li>
  <li><em>user environment information</em>: the home directory of the user and
their login shell;</li>
  <li><em>user ID’s</em>, their <em>user ID (UID)</em> and primary <em>group ID (GID)</em>;</li>
  <li><em>user full name</em>, often called a <em>comment</em>;</li>
  <li><em>account expiration date</em>, a specific date after which the account can
no longer be used. As we will see, this information is independent
from <em>password-aging data</em>, altough they are othen used together in
security checks;</li>
  <li><em>supplementary group memberships</em>, the list of groups, in addition to
the primary one identified by the <em>GID</em>, to which the user belongs;</li>
  <li><em>group passwords</em>: groups can have passwords, which are used by some
tools to allow gaining temporary membership if you are not a member
yet.</li>
</ul>

<p>As can be guessed from the list, some bits of information are likely to
be much more sensitive than others. For example, username and comment
are likely public information, while the password must be protected from
prying eyes. For these reasons, modern systems use different files to
store them. Also, group data is handled separately to better cope with
their one-to-many nature:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">/etc/passwd</code> stores non-sensitive non-group information, such as
usernames, UID’s, comments and the like. While the file is only
writable by root for administrative purpouses, anyone can read it, in
order to get basic information about users. For example to get the
full, real name of user <em>janedoe</em>, you would look up this file for the
username and get the comment field.</li>
  <li><code class="language-plaintext highlighter-rouge">/etc/shadow</code> stores sensitive non-group information, which means that
all password related stuff go there. Unlike <code class="language-plaintext highlighter-rouge">/etc/passwd</code>, reading
this file is off-limits for regular users;</li>
  <li><code class="language-plaintext highlighter-rouge">/etc/group</code> stores non-sensitive group information, such as group
names, GID’s and membership information. While the file is only
writable by root for administrative purpouses, anyone can read it, in
order to discover group memberships for a user;</li>
  <li><code class="language-plaintext highlighter-rouge">/etc/gshadow</code> stores sensitive group information: group passwords go
there.</li>
</ul>

<h3 id="etcpasswd">/etc/passwd</h3>

<p>The structure of <code class="language-plaintext highlighter-rouge">/etc/passwd</code> is simple: every line maps to a different
account and is composed of exactly 7 fields, separated by a colon (<code class="language-plaintext highlighter-rouge">:</code>).
This is excerpt from my system:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root:x:0:0:root:/root:/bin/bash
manu:x:1000:100:Manu:/home/manu:/bin/bash
[...]
</code></pre></div></div>

<p>The first line describes the account for the super user, the second one
maps to my primary user account. The fields are defined as follows:</p>

<ol>
  <li>the <em>username</em>;</li>
  <li>the <em>password</em> (more on this below);</li>
  <li>the numeric <em>User ID (UID)</em> the system uses to internally track this
user and its resources (processes, files, …);</li>
  <li>the numeric <em>Group ID (GID)</em> of the primary group this user belongs
to;</li>
  <li>the <em>comment field</em>: provides basic information about the user, such
as its full name or its office location. It is formatted according to
the <a href="https://en.wikipedia.org/wiki/Gecos_field">GECOS</a> field definition, which is why it is often called
the GECOS field;</li>
  <li>the user’s <em>home directory</em>;</li>
  <li>the user’s <em>login shell</em>, the program that should be invoked to
handle commands just after the login completes.</li>
</ol>

<p>There is one important thing to note: we just asserted that this file is
world-readable and should not contain passwords and other sensitive
information, yet the second field is called <em>password</em>… what is going
on?</p>

<p>In early versions of UNIX this file used to also store passwords. For
security reasons, passwords were not stored as cleartext, but as salted
hashes, which means that instead of your plain password you would see a
longer and apparently meaningless sequences of letters, digits and other
symbols.  Such a sequence is derived from your password using a one-way
cryptographic function, so that it is very easy to calculate the hash
given the password, but is (theoretically) very hard to recover the
password from the hash. This way, the system would ask for your
cleartext password at login time, calculate the hash, then compare what
it calculated with the contents of the <em>password</em> field. If they
matched, login would be allowed.</p>

<p>Conversely, if a malicious user tried to impersonate you, simply knowing
the hash of your password is useless, because it cannot be directly
typed at password prompts: the system would treat it as a plain password
and hash it again, producing a different result.</p>

<p>However, as technology progressed, attacks against this scheme have
become more sofisticated and feasible. Therefore, it was decided to
store passwords in a different file, readable only by the superuser.
Passwords are still stored as hashes, since it offers greater protection
in case the contents are leaked somehow.</p>

<p>When passwords were moved, the corresponding field was retained in order
to avoid shifting the others . Nowadays, it is common to see an <code class="language-plaintext highlighter-rouge">x</code>
inside it, which simply means that the password should be looked up in
<code class="language-plaintext highlighter-rouge">/etc/shadow</code>.</p>

<h3 id="etcshadow">/etc/shadow</h3>

<p>This file is were sensitive information are stored. Here is an excerpt
(the file comes from a Vagrant machine, so the plaintext passwords for
both <code class="language-plaintext highlighter-rouge">root</code> and <code class="language-plaintext highlighter-rouge">vagrant</code> users are <code class="language-plaintext highlighter-rouge">vagrant</code>, no secret here 🙂):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root:$1$m.FEVNiS$OYiaRNHMHzS85/wnDHccI.::0:99999:7:::
vagrant:$1$gPNBpA.5$5pr.KtXhOx6S/Hc69TUZZ.::0:99999:7:::
</code></pre></div></div>

<p>Each line contains 9 fields:</p>

<ol>
  <li>the <em>username</em>;</li>
  <li>the <em>hashed password</em>;</li>
  <li>the <em>date of the most recent password change</em>. This field is
automatically updated every time the password is changed with
<code class="language-plaintext highlighter-rouge">passwd</code>;</li>
  <li>the <em>minimum password age</em>, which is the number of days that must
elapse after a password change before it can be changed again;</li>
  <li>the <em>maximum password age</em>, which is the number of days after which
the password must be changed. This value is relative to the contents
of field #3: summing them together gives you the <em>password expiration
date</em>;</li>
  <li>the <em>password warning period</em>, the number of days immediately
preceding the <em>password expiration date</em> during which the system will
remind the user that the password is going to expire;</li>
  <li>the <em>password inactivity period</em>, the number of days immediately
after the <em>password expiration date</em> during which the password will
still allow logins, but the system will force a password change
before giving you the prompt. Failing to change the password will
abort the login;</li>
  <li>the <em>account expiration date</em>: past this date, the account is
considered expired and cannot be used for logging in under any
circumstance, even if your login method would not rely on the account
password, as for SSH public key authentication;</li>
  <li>this field is unused and usually empty.</li>
</ol>

<p>It is important to note that, while fields #3 and #8 are <em>dates</em>
(absolute time points, like 01/01/2000), fields #4, #5, #6, #7 are
expressed as <em>day counts</em> (i.e.  <code class="language-plaintext highlighter-rouge">7</code> means seven days) and as such are
relative to some other date.</p>

<p>Fields #3 and #8 are expressed as the number of days elapsed since the
UNIX epoch (midnight of January 1st, 1970 UTC); <code class="language-plaintext highlighter-rouge">0</code> means the Epoch, <code class="language-plaintext highlighter-rouge">1</code>
means one day past the Epoch (January 2nd) and so on.</p>

<p>To compute this value for the current system time, we may type:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="k">$((</span> <span class="si">$(</span><span class="nb">date</span> +%s<span class="si">)</span> <span class="o">/</span> <span class="o">(</span><span class="m">3600</span> <span class="o">*</span> <span class="m">24</span><span class="o">)</span> <span class="k">))</span>
</code></pre></div></div>

<p>First, we ask for the current time expressed as seconds elapsed since
the epoch, then divide by the number of seconds in a day (<code class="language-plaintext highlighter-rouge">24 * 3600</code>).</p>

<p>To view such a date in a more readable form, we can use</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">date</span> <span class="nt">-I</span> <span class="nt">-ud</span> @<span class="k">$((</span> &lt;<span class="nb">date</span><span class="o">&gt;</span> <span class="o">*</span> <span class="m">3600</span> <span class="o">*</span> <span class="m">24</span><span class="k">))</span>
</code></pre></div></div>

<p>This converts the days back to seconds and then asks <code class="language-plaintext highlighter-rouge">date</code> to spit out
the equivalent broken down UTC date in ISO 8601 format. Some system
tools such as <code class="language-plaintext highlighter-rouge">chage</code> and <code class="language-plaintext highlighter-rouge">passwd -S</code> do this conversion for us when
querying accounts, so this snippet is only useful to convert a value
that does not already reside in <code class="language-plaintext highlighter-rouge">/etc/shadow</code>.</p>

<h3 id="etcgroup">/etc/group</h3>

<p>This file tracks group membership, storing the list of members for each
group:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>manu:x:1006:manu
wheel:x:10:root,manu
[…]
</code></pre></div></div>

<p>Every line defines a single group and is composed of the following 4
field:</p>

<ol>
  <li>the <em>group name</em>;</li>
  <li>the <em>group password</em>;</li>
  <li>the <em>group ID (GID)</em> of the group;</li>
  <li>a comma-separated list of usernames of <em>group members</em>.</li>
</ol>

<p>Just like <code class="language-plaintext highlighter-rouge">/etc/passwd</code>, the <em>group password</em> field is actually unused
and filled with an <code class="language-plaintext highlighter-rouge">x</code> since the real password, if any, resides in
<code class="language-plaintext highlighter-rouge">/etc/gshadow</code>.</p>

<h3 id="etcgshadow">/etc/gshadow</h3>

<p><code class="language-plaintext highlighter-rouge">/etc/gshadow</code> contains almost the same information as <code class="language-plaintext highlighter-rouge">/etc/group</code> with
two major differences:</p>

<ul>
  <li>passwords are actually present as salted hashes;</li>
  <li>it adds a list of administrator members. We’ll see this in a moment.</li>
</ul>

<p>The contents would look like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wheel:::root,manu
manu:::manu
[…]
</code></pre></div></div>

<p>Each line is again composed of 4 fields:</p>

<ol>
  <li>the <em>group name</em>;</li>
  <li>the <em>group password</em>;</li>
  <li>a comma-separated list of usernames of <em>group administrators</em>;</li>
  <li>a comma-separated list of usernames of <em>group members</em>.</li>
</ol>

<p>This time, field #2 contains the real hashed password, if any. Field #4
should always be synced with field #4 of <code class="language-plaintext highlighter-rouge">/etc/group</code> and list all
members.</p>

<p>Filed #3 is new: it defines group administrators. These users are group
members which have the ability to add or remove other members from the
group or change the group password, without being root and without
knowing the password.</p>

<p>Group passwords are used by some tools (for instance, <code class="language-plaintext highlighter-rouge">newgrp</code>) to gain
temporary membership of the group without being listed in <code class="language-plaintext highlighter-rouge">/etc/group</code>
or <code class="language-plaintext highlighter-rouge">/etc/gshadow</code> as a member. What <code class="language-plaintext highlighter-rouge">newgrp</code> does is spawning a new
shell whose real and effetive group ID’s (RGID and EGID) are set to the
chosen group rather than to the primary group of the user as listed in
<code class="language-plaintext highlighter-rouge">/etc/passwd</code>.  If the calling user is alredy a member of the chosen
group, no password is asked. If it is not, the group password must be
entered. A passwordless group cannot be entered via <code class="language-plaintext highlighter-rouge">newgrp</code>.</p>

<p>As an example, let’s see how the RGID and EGID of the current shell
change after a call to <code class="language-plaintext highlighter-rouge">newgrp</code>:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># I just logged in so my group ID's are set to my primary group</span>
<span class="nv">$ </span>ps <span class="nt">-o</span> pid,ppid,euid,ruid,egid,rgid <span class="nt">-p</span> <span class="nv">$$</span>
    PID    PPID  EUID  RUID  EGID  RGID
  19905   13862  1000  1000   100   100
<span class="c"># Now let's enter a group I'm a member of</span>
<span class="nv">$ </span>newgrp audio
<span class="c"># The group ID's are now different. Also, the shell has a different</span>
<span class="c"># PID since it's a new process, and the old shell is its parent.</span>
<span class="nv">$ </span>ps <span class="nt">-o</span> pid,ppid,euid,ruid,egid,rgid <span class="nt">-p</span> <span class="nv">$$</span>
    PID    PPID  EUID  RUID  EGID  RGID
  24111   19905  1000  1000    92    92
</code></pre></div></div>

<p>Note that group passwords have no aging information and as such cannot
expire. Since they are rarely used, this is not a concern.</p>

<h2 id="lifecycles">Lifecycles</h2>

<p>The next thing we must discuss are the lifecycles of passwords and
accounts; that is, the time frames during which they are usable to
login.</p>

<p>Both the password and the account have their own lifecycles, and the two
are not necessarily identical. This means we may have an active account
with an expired password or, conversely, an expired account whose
password would still be valid given its aging information. Of course,
since the two concepts are strongly related, there must be some kind of
relationship between the two, whose ultimate goal is to determine if we
can login with that account or not.</p>

<h3 id="account-lifecycles">Account lifecycles</h3>

<p>Let’s talk about the account lifecycle first. Each account can be in
just one of two states: it can be either <em>active</em> or <em>expired</em>. An
active account can be used to log into the system, provided the
authentication method we are going to use is usable and that we pass the
authentication challenge. Conversely, an expired account cannot be used
for logging in, irrespective of how we would authenticate ourselves. No
matter if we try to log in using the account password, an SSH private
key or some other method. If the account is expired, it is not good for
that.</p>

<p>There is a single parameter which controls the expiration of an account:
the <em>account expiration date</em> stored in <code class="language-plaintext highlighter-rouge">/etc/shadow</code> in the 8th field.
If the system time is before this date, the account is active, otherwise
it’s expired. It’s that simple.</p>

<p>Account expiration is optional: if a date is not provided, the
corresponding field will be empty and the account will never expire.
This is the usual condition for accounts. It makes sense to set an
expiration date for accounts which are bound to be terminated unless
some manual process is enacted.  For example, an external contractor may
have its account bound to expire when its contract expires.</p>

<p>The expiration date can only be changed by the administrator. Updating
it to represent some point in the future effectively extends the
lifetime of an account. If it was expired, it will be active again.
Conversely, settings it to a value in the past (i.e. <code class="language-plaintext highlighter-rouge">1</code>) will
immediately expire the account.</p>

<p><code class="language-plaintext highlighter-rouge">usermod -e</code> can set the expiration date of an account:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Set account 'test' to expire at the end of 2020.</span>
<span class="c"># The date is in ISO 8601 format, but other variations are</span>
<span class="c"># accepted (i.e. 'today' and 'tomorrow' work).</span>
usermod <span class="nt">-e</span> 2020-12-31 <span class="nb">test</span>
</code></pre></div></div>

<h3 id="password-lifecycles">Password lifecycles</h3>

<p>Password lifecycles are more complex. First, a password can be
in one of several states, which impact the availability of the password
for login purpouses. Second, a password will go through multiple
state changes during its lifetime, for example it may be usable,
then expire, then be usable again after the user has changed it, then
expire again, and so on.  Of course, if the corresponding account is expired,
we already now we won’t be able to login.</p>

<p>Password state is determined by multiple attributes, but ultimately we
can split them in two logical groups:</p>

<ul>
  <li>the <em>password age</em>, as defined by <code class="language-plaintext highlighter-rouge">/etc/shadow</code> fields #3 to #7: age
is used to enforce a change when a password has been in use for too
long and can make it expire after a set amount of time;</li>
  <li>the <em>passowrd field</em> as stored in <code class="language-plaintext highlighter-rouge">/etc/shadow</code>, field #2. Normally,
it will consist of the output of a password hashing algorithm, but it
can also be set to special values (more below) which can inhibit its
usability.</li>
</ul>

<p>Both groups contribute to deciding if the password can be used to login.
If aging data says that the password is expired, for example, we will
not be able to use it regardless of its value. But even if the password
is OK according to aging information, we may still be unable to use it:
for example, it may be locked.</p>

<h4 id="password-field-states">Password field states</h4>

<p>At any given time, the <em>password field</em> may be in one of 4 forms:</p>

<ul>
  <li>it can be <em>empty</em>;</li>
  <li>it can be <em>usable</em>;</li>
  <li>it can be <em>locked</em>;</li>
  <li>it can be <em>unusable</em>.</li>
</ul>

<p>First, an account can have an empty password. While this is clearly not
optimal from the point of view of system security, it can be allowed,
depending on the system configuration. It is easy to spot such accounts
because the <em>password field</em> will be empty.  In such cases, when logging
in the system will not even ask for a password, we will get to the shell
as soon as we enter the username.  This is what we would see in
<code class="language-plaintext highlighter-rouge">/etc/shadow</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>test::18518::::::
</code></pre></div></div>

<p>We can use <code class="language-plaintext highlighter-rouge">passwd -S $USERNAME</code> to ask the system for the status of the
password for a specific user. In this case, we get:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>test NP 2020-09-13 -1 -1 -1 -1 (Empty password.)
</code></pre></div></div>

<p>Remember that some tools or libraries may be configured to reject
accounts with empty passwords. For example, SSH can be configured to
disallow logins if an account has no password (<code class="language-plaintext highlighter-rouge">PermitEmptyPasswords</code>
option). The Linux-PAM <code class="language-plaintext highlighter-rouge">pam_unix.so</code> module has a similar option
(<code class="language-plaintext highlighter-rouge">nullok</code>). If you really want to use passwordless accounts…</p>

<div style="margin: 0 0 1em 0;">
<div class="tenor-gif-embed" data-postid="13199396" data-share-method="host" data-width="30%" data-aspect-ratio="1.78494623655914">
  <a href="https://tenor.com/view/why-huh-but-why-gif-13199396">Why Huh
    GIF</a> from <a href="https://tenor.com/search/why-gifs">Why
    GIFs
  </a>
</div>
<script type="text/javascript" async="" src="https://tenor.com/embed.js"></script>
</div>

<p>…be sure to check that services using them work as intended.</p>

<p>Then, an account may have a usable, valid password. This is the usual
condition for user accounts. The <em>password field</em> will store the hashed
password. The exact representation of the hash depends on the hashing
method. <code class="language-plaintext highlighter-rouge">/etc/shadow</code> contains, for example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>test:$1$ixE/9ivM$.BgDclGsEvrE/Uqd8TS9C1:18518::::::
</code></pre></div></div>

<p>and <code class="language-plaintext highlighter-rouge">passwd -S</code> reports:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>test PS 2020-09-13 -1 -1 -1 -1 (Password set, MD5 crypt.)
</code></pre></div></div>

<p>The password was hashed with the <code class="language-plaintext highlighter-rouge">md5crypt</code> algorithm, as indicated by
the password starting with <code class="language-plaintext highlighter-rouge">$1$</code>. We can login with the <code class="language-plaintext highlighter-rouge">test</code> user by
typing the plaintext password.</p>

<p>Passwords can be locked. What this means is that the password is marked
as unacceptable for login, while it original value is preserved.  This
way, when it gets unlocked, it will hold the same value it had before.</p>

<p>Password locking and unlocking can be performed using <code class="language-plaintext highlighter-rouge">passwd -l</code> and
<code class="language-plaintext highlighter-rouge">passwd -u</code>. What these tools actually do to mark the password as locked
is to add an exclamation mark (<code class="language-plaintext highlighter-rouge">!</code>) at the beginning of the <em>password
field</em>.  The rest of the field contains the original hash.  Predictably,
unlocking merely removes the leading <code class="language-plaintext highlighter-rouge">!</code>.</p>

<p>Adding the <code class="language-plaintext highlighter-rouge">!</code> at the beginning is simply a convention. What actually
makes the password locked is that no valid password hashing algorithm
will ever produce something starting with <code class="language-plaintext highlighter-rouge">!</code>. Therefore, no matter what
you type at login prompts, including the correct password, the
calculated hash will never match the <em>password field</em>. Any other way of
producing an impossible hash from which the original can be recovered
would work, but the use of <code class="language-plaintext highlighter-rouge">!</code> is historical, simple and effective.</p>

<p>This is how a locked password looks like:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>test:!$1$ixE/9ivM$.BgDclGsEvrE/Uqd8TS9C1:18518::::::
</code></pre></div></div>

<p>and <code class="language-plaintext highlighter-rouge">passwd -S</code> reports:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>test LK 2020-09-13 -1 -1 -1 -1 (Password locked.)
</code></pre></div></div>

<p>Remember that locking applies to the <em>password</em>, not to the account.
Depending on your system configuration and the tools handling the login,
you may still be able to login with the associated account.</p>

<p>Finally, we can give an account an unusable password: in this case,the
<em>password field</em> will contain an impossible hash, just like a locked
password. The only difference is that such field will not follow the
convention for locked passwords: the system will report it as present,
not as locked.  However, any attempt to use it will fail.  A common use
for this is for accounts which use alternate authentication schemes
exclusively, like SSH keys.  If we already know an account will only be
used by an automated remote system to connect and that it will use an
RSA key, there is no point in also setting a password, which may be used
by an attacker to compromise the system.</p>

<p>A very common way of setting an unusable password is to set the
<em>password field</em> to a single asterisk (<code class="language-plaintext highlighter-rouge">*</code>):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>test:*:18518::::::
</code></pre></div></div>

<p>and <code class="language-plaintext highlighter-rouge">passwd -S</code> reports:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>test LK 2020-09-13 -1 -1 -1 -1 (Alternate authentication scheme in use.)
</code></pre></div></div>

<p>This convention is widespread enough that <code class="language-plaintext highlighter-rouge">passwd -S</code> recognizes it as a
special convention and reports that an alternate authentication scheme
will be used to login.</p>

<p>The advantage of this scheme with respect to locked passwords is that it
does not look like it’s locked. This may be useful if some login program
insists on your account having as unlocked password even if it is not
going to use it. An unusable password looks valid, but no one will ever
be able to use it, attackers included.</p>

<h4 id="password-aging">Password aging</h4>

<p>Password aging information track the last time the password was changed,
and can be used to enforce some limits or mandatory behaviours about
password maintenance over time.</p>

<p>Since various fields are involved in defining password aging, the
following picture tries to summarize them. Account expiration is also
included.</p>

<p><img src="/binary-is-better/assets/my/img/pw_aging.png" alt="Password aging information on a timeline" /></p>

<p>The system tracks the date of the most recent password change.  Various
time frames are then defined as offsets from this moment, given as day
counts.</p>

<p>First, it is possible to define an optional <em>minimum password age</em>. This
field gives the number of days immediately after a change during which a
new change cannot happen. For example, after a user changes its
password, it may be forced to keep it for 7 days before it can be
changed again.  Often, this feature is not used and passwords can be
changed at will at any moment.</p>

<p>Symmetrically, the is also a <em>maximum password age</em>. This is a number of
days that, when summed with the latest password change date, gives us
the <em>password expiration date</em>. After this date, the password will be
expired.  The exact behaviour of trying to login with an expired
password depends on both this field and on the <em>password inactivity
period</em>, so we’ll talk about this in a moment.  This field is also
optional and not setting it means that the password will never expire
and thus will never need to be changed (altough the user is still free
to change it).</p>

<p>For user convenience, it is possible to define a <em>password warning
period</em>. This is the number of days immediately preceding the password
expiration date during which the system will warn users logging in that
the password should be changed. For example, this is what a CentOS 7
system would show:</p>

<p><img src="/binary-is-better/assets/my/img/pw_warning.png" alt="Password expiration warning message" /></p>

<p>Again, this field is optional and if not specified, or set to 0, there
will be no warning.</p>

<p>Things get more interesting when considering the <em>password inactivity
period</em>, because it defined what happens when a password that has
exceeded its expiration date is used to login. Basically, depending on
how we set it, 3 different behaviours can be obtained:</p>

<ul>
  <li><em>forced change</em>: the expired password is still accepted, but before
the login can complete the system will force the user to set a new
password. There is no time limit during which the password must be
changed, so there is no problem if a login happens months or years
after the password has expired. We just need to change it and we are
good to go. This is what happens if the <em>password inactivity period</em>
is not set;</li>
  <li><em>time-limited forced change</em>: this case is just like the previous
bullet, but there is a time limit during which we can change the
password: we must do it before <em>password inactivity period</em> days has
elapsed since the password expiration date. After that period, the old
password will no longer be accepted and it will not be possible to
change it at login time. The only way to set a new password is to
contact the administrator. This is the behavior we get by setting the
inactivity period to a positive value;</li>
  <li><em>forbidden login</em>: the old password is no longer accepted as soon as
it expires, there is no forced-change period. Therefore, you must take
care to not let it reach its expiration date. This is the behaviour
caused by a zero inactivity period.</li>
</ul>

<p>Always remember that, with the exception of the date of last change, all
other fields are relative. So, everytime the password is changed and the
date of last change is updated, the various time frames start all over
again.</p>

<h2 id="a-note-about-pam">A note about PAM</h2>

<p>On the system, various applications need to verify the identity of a
user and the validiity of its associated account. The <code class="language-plaintext highlighter-rouge">login</code> program
that lets us grab a virtual terminal is just one of them. <code class="language-plaintext highlighter-rouge">ssh</code>, <code class="language-plaintext highlighter-rouge">su</code>,
<code class="language-plaintext highlighter-rouge">sudo</code> all need to do the same thing.</p>

<p>Instead of coding password and account verification functionalities
inside every single app, the modern approach is to delegate such checks
to a single external component, which does its own checking and returns
a green light/red light status to the application. On Linux, this goal
is fullfilled by <a href="http://www.linux-pam.org [pam_unix]:"><em>Linux-PAM (Pluggable Authentication Modules)</em></a>.</p>

<p>PAM is composed of a core library which exposes an API to authenticating
applications, and a series of modules that implement specific checks.
The advantages of such a system are manyfold:</p>

<ul>
  <li>since PAM is a shared library used by many programs, updating it or
its modules brings updates and fixes to all clients;</li>
  <li>the most various authentication schemes can be concocted as long as
they can be used via the PAM API. Clients are oblivious of how checks
are done, they simply want to know if it is OK to proceed;</li>
  <li>PAM is driven by configuration files. Changing these files impacts
which checks, and in which order, are performed on a client-by-client
basis. It is possible to have different checks in place for console
logins with respect to <code class="language-plaintext highlighter-rouge">ssh</code> logins.</li>
</ul>

<p>Since PAM is a large topic, I will not add much details here. I just
want to introduce the [<code class="language-plaintext highlighter-rouge">pam_unix.so</code>][pam_unix] module, because it the
one responsible for checks related to the contents of <code class="language-plaintext highlighter-rouge">/etc/passwd</code>,
<code class="language-plaintext highlighter-rouge">/etc/shadow</code> and the other files we mentioned.</p>

<p><code class="language-plaintext highlighter-rouge">pam_unix.so</code> is usually included among standard system login checks.
Depending on your PAM configuration, it may or may not allow empty
passwords. Its account-related checks verify that both the password and
the account are not expired: this is the reason why it is important to
have a non-expired password even if you plan to never use it.</p>

<p>A typical example is an account the is only accessed via <code class="language-plaintext highlighter-rouge">ssh</code> and
public key authentication. The password in <code class="language-plaintext highlighter-rouge">/etc/shadow</code> is not used in
this kind of authentication. However, <code class="language-plaintext highlighter-rouge">ssh</code> do asks PAM to perform
account validity checks, and the password age (but not its value) is
included. If the password is expired, PAM would return an error,
preventing <code class="language-plaintext highlighter-rouge">ssh</code> from logging in.</p>

<p>In this case, it is better to configure the password to never expire,
then set it to an unusable digest such as <code class="language-plaintext highlighter-rouge">*</code>. As explained before, such
a digest will never match the output of <code class="language-plaintext highlighter-rouge">crypt</code> so it is impossible to
pass password validation. A the same time, this satisfies other checks
as the password is formally not empty and not locked.</p>

<!-- Links -->

<p>http://linux-pam.org/Linux-PAM-html/sag-pam_unix.html</p>]]></content><author><name>Emanuele Giacomelli</name></author><category term="Linux" /><summary type="html"><![CDATA[User account creation and maintenance is a typical routine task for *NIX system administrators. Yet, this topic can sometimes be confusing because account information is scattered across a number of files, and each file stores multiple information fields whose meaning and relations to one another may not be so obvious, especially when it comes to the lifecycle of the account and its related password. Let’s have a look at the most important files that store account information and, in particular, the meaning of information that impact the lifecycle of passwords and accounts.]]></summary></entry><entry><title type="html">A look at csplit</title><link href="https://binary-manu.github.io/binary-is-better/linux/csplit" rel="alternate" type="text/html" title="A look at csplit" /><published>2020-07-28T00:00:00+02:00</published><updated>2020-07-28T00:00:00+02:00</updated><id>https://binary-manu.github.io/binary-is-better/linux/csplit</id><content type="html" xml:base="https://binary-manu.github.io/binary-is-better/linux/csplit"><![CDATA[<p>Most Linux users that regularly use the terminal are aware of the <a href="https://www.gnu.org/software/coreutils"><em>GNU
Coreutils</em></a>, an extensive collection of utilities that
includes things like <code class="language-plaintext highlighter-rouge">sort</code>, <code class="language-plaintext highlighter-rouge">uniq</code>, <code class="language-plaintext highlighter-rouge">cut</code> and <code class="language-plaintext highlighter-rouge">cat</code>, and that all of us
use daily to perform file manipulation tasks.</p>

<p>Among them, there is <code class="language-plaintext highlighter-rouge">split</code>, a tool which can be used to divide a file
into smaller parts, each one stored into a individual file. It can
operate in various ways, the most common being making each part exactly
<code class="language-plaintext highlighter-rouge">N</code> bytes large or containing <code class="language-plaintext highlighter-rouge">N</code> lines of text. For example, one can
use <code class="language-plaintext highlighter-rouge">split</code> to divide a large ISO file into smaller parts for
transmission, and then reassemble the pieces using <code class="language-plaintext highlighter-rouge">cat</code>.</p>

<p><code class="language-plaintext highlighter-rouge">split</code> has a lesser known brother: <a href="https://www.gnu.org/software/coreutils/manual/html_node/csplit-invocation.html#csplit-invocation"><code class="language-plaintext highlighter-rouge">csplit</code></a>. Unlike <code class="language-plaintext highlighter-rouge">split</code>,
<code class="language-plaintext highlighter-rouge">csplit</code> performs <em>context-based</em> splitting, meaning that instead of
simply splitting a file after a fixed number of bytes or lines, it looks
for specific markers to act as separators. Such markers can be provided
as regular expressions, which are looked in the input file. Each time a
regexp matches, the program outputs everything that comes before that
line to a new file. Then, it starts again from the matched line and
looks for the next match, repeating the process until the input is
exhausted. File creation and numbering is handled by the tool, just like
<code class="language-plaintext highlighter-rouge">split</code> does.</p>

<p>Suppose we have a multi-document YAML file:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">key1</span><span class="pi">:</span> <span class="s">value1</span>
<span class="nn">---</span>
<span class="na">key2</span><span class="pi">:</span> <span class="s">value2</span>
<span class="nn">---</span>
<span class="na">key3</span><span class="pi">:</span> <span class="s">value3</span>
</code></pre></div></div>

<p>We need to split it so that each document goes into its own file (the
lines starting with <code class="language-plaintext highlighter-rouge">#</code> are not part of the files, they were added to
mark the beginning of each individual file, a la <code class="language-plaintext highlighter-rouge">head -v</code>):</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ==&gt; /tmp/test-000.yaml &lt;==</span>
<span class="na">key1</span><span class="pi">:</span> <span class="s">value1</span>

<span class="c1"># ==&gt; /tmp/test-001.yaml &lt;==</span>
<span class="na">key2</span><span class="pi">:</span> <span class="s">value2</span>

<span class="c1"># ==&gt; /tmp/test-002.yaml &lt;==</span>
<span class="na">key3</span><span class="pi">:</span> <span class="s">value3</span>

</code></pre></div></div>

<p>This is a perfect use case: we want to isolate specific portions of the
file depending on where the YAML document marker <code class="language-plaintext highlighter-rouge">---</code> appears.</p>

<h2 id="patterns-and-repeat-counters">Patterns and repeat counters</h2>

<p>The general form of the <code class="language-plaintext highlighter-rouge">csplit</code> command line is:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>csplit [OPTIONS]... FILE PATTERNS...
</code></pre></div></div>

<p>where <code class="language-plaintext highlighter-rouge">FILE</code> is the path to the file we want to split, and <code class="language-plaintext highlighter-rouge">PATTERNS</code>
are one or more regular expressions used to match the next separation
line. Expressions follow the <a href="https://en.wikipedia.org/wiki/Regular_expression#POSIX_basic_and_extended"><em>BRE</em> (<em>Basic Regular Expression</em>)</a>
syntax, so things like <code class="language-plaintext highlighter-rouge">+</code> and <code class="language-plaintext highlighter-rouge">|</code> must be preceded by a backslash to be
recognized as metacharacters. Also, regexps are always enclosed between
a pair of <code class="language-plaintext highlighter-rouge">/</code> characters, so they look like <code class="language-plaintext highlighter-rouge">/a.*b/</code>.</p>

<p>In our example, we want to match the line containing only 3 dashes, so
we would use the expressions <code class="language-plaintext highlighter-rouge">/^---$/</code>. Beginning of line and end of
line anchors are used to ensure that lines containing three dashes in
the middle are not mistakenly interpreted as document separators.</p>

<p>Each regexp, by default is used only once. If we were to run:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>csplit test.yaml '/^---$/'
</code></pre></div></div>

<p>we would end of with two new files, not three, the first one will
contain the first document, the second one the remaining two. To allow
for regexps to be reused, they can be followed by a <em>repeat counter</em>, a
positive integer enclosed in <code class="language-plaintext highlighter-rouge">{}</code> that causes the expression to be
matched multiple times. For example, <code class="language-plaintext highlighter-rouge">{2}</code> means that the regexp must be
matched two more times, <em>in addition to the single match implied by the
regexp itself</em>, so that the program would attempt a total of three
matches before moving on to the next regexp. Each repeat count only
applies to the expression immediately preceding it. For example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>csplit test.yaml '/^---$/' '{1}'
</code></pre></div></div>

<p>would split our file correctly, as it split on two document separators,
once for the expression itself and once because of the repetition.</p>

<p>As a special case, one can use an asterisk in place of a number to mean
<em>split as many times as you can</em>. Thus, the following is equivalent to
the previous example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>csplit test.yaml '/^---$/' '{*}'
</code></pre></div></div>

<p><strong>Update</strong>: <em>while the previous statement ought to be true according to
the documentation, there is a bug in current csplit versions which
causes asterisk repetition to behave differently from using a fixed
number when the <code class="language-plaintext highlighter-rouge">--suppress-matched</code> option is used.  See
<a href="#bug42764">below</a> for the details.</em></p>

<p><code class="language-plaintext highlighter-rouge">csplit</code> also dumps some information to standard output: the sizes of
all files produced, one per line. So in our case we expect it to print 3
integers: the sizes of the 3 output files.</p>

<h2 id="file-naming">File naming</h2>

<p>So far so good, but if we look at the filenames <code class="language-plaintext highlighter-rouge">csplit</code> constructs for
new files, they don’t tell us much about the original file they come
from. By default, each file name is constructed by appending a 2-digit
decimal counter to the prefix <code class="language-plaintext highlighter-rouge">xx</code>, so our files are going to be called
<code class="language-plaintext highlighter-rouge">xx00</code>, <code class="language-plaintext highlighter-rouge">xx01</code> and so on. This is hardly useful.</p>

<p>A few options allow us to tweak file naming:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">-f</code> replaces the prefix. Instead of <code class="language-plaintext highlighter-rouge">xx</code> we may use <code class="language-plaintext highlighter-rouge">test-</code>, so that
is is evident which file generated the pieces;</li>
  <li><code class="language-plaintext highlighter-rouge">-b</code> replaces the numeric suffix. It can contain literal text in
addition to the counter, and it uses a single <code class="language-plaintext highlighter-rouge">printf</code>-style
placeholder to specify where the counter should be expanded. In our
case, we would like for our files to end with a 3-digit counter and
the <code class="language-plaintext highlighter-rouge">.yaml</code> extension. We could therefore pass this option the value
<code class="language-plaintext highlighter-rouge">%03u.yaml</code>, which causes suffixes like <code class="language-plaintext highlighter-rouge">000.yaml</code>, <code class="language-plaintext highlighter-rouge">001.yaml</code> and so
on to be used;</li>
  <li><code class="language-plaintext highlighter-rouge">-n</code> is a simpler alternative to <code class="language-plaintext highlighter-rouge">-b</code>, which changes the width of the
numeric suffix but does not allow for additional text and therefore
does not require any placeholder.</li>
</ul>

<p>Let’s try again with <code class="language-plaintext highlighter-rouge">-f</code> and <code class="language-plaintext highlighter-rouge">-b</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>csplit -f 'test-' -b '%03u.yaml' test.yaml '/^---$/' '{*}'
</code></pre></div></div>

<p>And this is what it produces in the current directory:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>test.yaml
test-000.yaml
test-001.yaml
test-002.yaml
</code></pre></div></div>

<h2 id="suppressing-the-matching-lines">Suppressing the matching lines</h2>

<p>If we now look inside the output files:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ==&gt; /tmp/test-000.yaml &lt;==</span>
<span class="na">key1</span><span class="pi">:</span> <span class="s">value1</span>

<span class="c1"># ==&gt; /tmp/test-001.yaml &lt;==</span>
<span class="nn">---</span>
<span class="na">key2</span><span class="pi">:</span> <span class="s">value2</span>

<span class="c1"># ==&gt; /tmp/test-002.yaml &lt;==</span>
<span class="nn">---</span>
<span class="na">key3</span><span class="pi">:</span> <span class="s">value3</span>
</code></pre></div></div>

<p>there is still something wrong. The lines matching the regexp were
included at the beginning of the next output file. With the exception of
the first file, all other YAML documents start with <code class="language-plaintext highlighter-rouge">---</code>. This is not
what we wanted.</p>

<p>This is because we told <code class="language-plaintext highlighter-rouge">csplit</code> to divide the files at specific lines,
but we never told it that those lines were to be discarded.
Luckily, there is an option that does exactly that:
<code class="language-plaintext highlighter-rouge">--suppress-matched</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>csplit -f 'test-' -b '%03u.yaml' --suppress-matched \
    test.yaml '/^---$/' '{*}'
</code></pre></div></div>

<p>This time the output is correct:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ==&gt; /tmp/test-000.yaml &lt;==</span>
<span class="na">key1</span><span class="pi">:</span> <span class="s">value1</span>

<span class="c1"># ==&gt; /tmp/test-001.yaml &lt;==</span>
<span class="na">key2</span><span class="pi">:</span> <span class="s">value2</span>

<span class="c1"># ==&gt; /tmp/test-002.yaml &lt;==</span>
<span class="na">key3</span><span class="pi">:</span> <span class="s">value3</span>
</code></pre></div></div>

<p>It is not always meaningful to use this option: if we were to split a
Markdown file into sections by looking at lines starting with <code class="language-plaintext highlighter-rouge">#</code>, we
don’t want titles to be thrown away.</p>

<p><a name="bug42764"></a></p>
<h2 id="bug-42764-the-last-match-is-not-suppressed">Bug 42764: the last match is not suppressed</h2>

<p>Up to and including the current version of csplit (coreutils v8.32)
there is a bug which causes the last match in a file to be suppressed
only when using <code class="language-plaintext highlighter-rouge">{*}</code> repetition. Using a fixed number equal to the
expected total number of matches (minus the regular expression itself)
will cause the last segment to contain the matched line.</p>

<p>Let’s try splitting out sample file using <code class="language-plaintext highlighter-rouge">{1}</code> instead of <code class="language-plaintext highlighter-rouge">{*}</code>.
Theoretically, they should be equivalent since <code class="language-plaintext highlighter-rouge">{1}</code> matches <em>two</em>
times, once because of the regular expression itself and once because of
the counter, and we know the file contains just two marker lines.</p>

<p>However, if we try it:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>csplit -f 'test-' -b '%03u.yaml' --suppress-matched \
    test.yaml '/^---$/' '{1}'
</code></pre></div></div>

<p>the output files contain:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ==&gt; /tmp/test-000.yaml &lt;==</span>
<span class="na">key1</span><span class="pi">:</span> <span class="s">value1</span>

<span class="c1"># ==&gt; /tmp/test-001.yaml &lt;==</span>
<span class="na">key2</span><span class="pi">:</span> <span class="s">value2</span>

<span class="c1"># ==&gt; /tmp/test-002.yaml &lt;==</span>
<span class="nn">---</span>
<span class="na">key3</span><span class="pi">:</span> <span class="s">value3</span>
</code></pre></div></div>

<p>As you can see, the last part still contains the marker, something that
didn’t happen with <code class="language-plaintext highlighter-rouge">{*}</code>.</p>

<p>The good news is that the bug has been reported and will probably be
fixed in the next coreutils release. The bad news is that most systems
will have to cope with older versions of this package for quite some
time, so better be aware of this gotcha.</p>

<h2 id="conclusion">Conclusion</h2>

<p><code class="language-plaintext highlighter-rouge">csplit</code> can be a little time saver when you need to do exactly what it
was designed to do: split a file into parts using specific lines as
separators.</p>

<p>Although I explained the core features, it provides options and
functionalities I didn’t mention, so make sure tho have a look at its
manpage for the full details.</p>

<!-- Links -->]]></content><author><name>Emanuele Giacomelli</name></author><category term="Linux" /><summary type="html"><![CDATA[Most Linux users that regularly use the terminal are aware of the GNU Coreutils, an extensive collection of utilities that includes things like sort, uniq, cut and cat, and that all of us use daily to perform file manipulation tasks.]]></summary></entry><entry><title type="html">Add a root CA certificate to Android CA store</title><link href="https://binary-manu.github.io/binary-is-better/android/add-certificates-to-android-ca-store" rel="alternate" type="text/html" title="Add a root CA certificate to Android CA store" /><published>2020-06-07T00:00:00+02:00</published><updated>2020-06-07T00:00:00+02:00</updated><id>https://binary-manu.github.io/binary-is-better/android/add-certificates-to-android-ca-store</id><content type="html" xml:base="https://binary-manu.github.io/binary-is-better/android/add-certificates-to-android-ca-store"><![CDATA[<p>While trying to add a missing root CA certificate to my Android phone,
I stumbled into <a href="https://ivrodriguez.com/installing-self-signed-certificates-on-android/">this blog post</a>.</p>

<p>To sum it up, to add a new root CA to your Android system, you have to:</p>

<ol>
  <li>save the certificate to a file in PEM format;</li>
  <li>give the file a specific name, derived by hashing the subject’s
distinguished name;</li>
  <li>copy this file to Android under <code class="language-plaintext highlighter-rouge">/system/etc/security/cacerts/</code>.</li>
</ol>

<p>The culprit is point 2, as giving the file any other name will not work.
In particular, it will still show up under Android’s credential list,
but applications will <em>not</em> be able to use it.  In order to obtain the
correct file name one can use <code class="language-plaintext highlighter-rouge">openssl</code> to compute the <em>subject hash</em>,
as pointed by the referenced article:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HASH=$(openssl x509 -subject_hash -in mycert.pem | head -1)
</code></pre></div></div>

<p>After that, the file should be renamed to <code class="language-plaintext highlighter-rouge">${HASH}.0</code>. So, if the
<code class="language-plaintext highlighter-rouge">openssl</code> invocation yielded <code class="language-plaintext highlighter-rouge">1234ABCD</code>, the file should be named
<code class="language-plaintext highlighter-rouge">1234ABCD.0</code>.</p>

<p>It tried exactly this, and it didn’t work.</p>

<p>It turns out that the algorithm used to compute the subject hash has
<a href="https://www.openssl.org/news/changelog.html#openssl-100">changed</a> in OpenSSL 1.0.0. The <code class="language-plaintext highlighter-rouge">-subject_hash</code>
option now uses the new algorithm, while the previous implementation can
still be accessed using <code class="language-plaintext highlighter-rouge">-subject_hash_old</code>.</p>

<p>On my phone, certificates are named after the <em>old</em> hash, but the
OpenSSL version I was using to generate them was higher than 1.0.0.
Therefore, the name was actually incorrect and the certificate wasn’t
found.</p>

<p>It is pretty easy to fix the command to generate old-style hashes:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HASH=$(openssl x509 -subject_hash_old -in mycert.pem | head -1)
</code></pre></div></div>

<p>A surefire way to check if you are generating names correctly is to grab
one certificate from your phone store and calculate its hash. If the
generated value doesn’t match the file name, you need to switch
algorithm in OpenSSL invocation.</p>

<!-- Links -->]]></content><author><name>Emanuele Giacomelli</name></author><category term="android" /><summary type="html"><![CDATA[While trying to add a missing root CA certificate to my Android phone, I stumbled into this blog post.]]></summary></entry><entry><title type="html">Fixing the notification LED not working on the Wiko Fever 4G running madOS 8.1</title><link href="https://binary-manu.github.io/binary-is-better/android/fixing-notification-led-on-mados-wiko-fever" rel="alternate" type="text/html" title="Fixing the notification LED not working on the Wiko Fever 4G running madOS 8.1" /><published>2020-06-07T00:00:00+02:00</published><updated>2020-06-07T00:00:00+02:00</updated><id>https://binary-manu.github.io/binary-is-better/android/fixing-notification-led-on-mados-wiko-fever</id><content type="html" xml:base="https://binary-manu.github.io/binary-is-better/android/fixing-notification-led-on-mados-wiko-fever"><![CDATA[<p>I own a Wiko Fever 4G, and Android phone employing the Mediatek MT6753
SoC, which shipped with Android 6.0. Recently, I decided to pimp it by
installing <a href="https://forum.xda-developers.com/android/development/rom-official-mados-wiko-fever-clones-t3762800">madOS</a>, a custom ROM based on AOSP 8.1 supporting
specifically that SoC.</p>

<p>The project dates back to 2018 and seems now dormant, but this ROM is
very good and useful to people like me who don’t want to throw away a
working phone because the stock system is outdated.</p>

<p>The only problem I had with this ROM, which was also mentioned by a user
in the linked thread and never fixed, is that the LED does not blink
when notifications are displayed. It only lights up when the battery is
charging.</p>

<p>I did my own investigations and found that there is a bug which breaks
LED blinking. That is, you can set any LED to be on or off, but the
moment you ask it to blink it will simply go off.</p>

<p>LED’s are controlled by a set of files found under
<code class="language-plaintext highlighter-rouge">/sys/class/leds/$COLOR/</code>, where <code class="language-plaintext highlighter-rouge">$COLOR</code> can be <code class="language-plaintext highlighter-rouge">green</code>, <code class="language-plaintext highlighter-rouge">red</code> or any
other color your phone supports. My model only has green and red.</p>

<p>Each LED has files like <code class="language-plaintext highlighter-rouge">brightness</code>, <code class="language-plaintext highlighter-rouge">delay_on</code>, <code class="language-plaintext highlighter-rouge">delay_off</code> and
<code class="language-plaintext highlighter-rouge">trigger</code> which control the LED brightness, if it should blink or
persist an which events should cause it to blink.</p>

<p>Now, to have a LED blink, you should set <code class="language-plaintext highlighter-rouge">delay_off</code> to the number of
milliseconds the LED should stay off, and <code class="language-plaintext highlighter-rouge">delay_on</code> to the number of
milliseconds the LED should stay on. Setting both to 500 would cause
half-second blinking.</p>

<p>What actually happens is that, every time one of the <code class="language-plaintext highlighter-rouge">delay_*</code> files is
written, the other one is reset to 0. This will cause the LED not to
blink, and it will either stay on or off depending on which file is
written last. In my case, the library code controlling the LED’s writes
<code class="language-plaintext highlighter-rouge">delay_off</code> last, which causes the delay be set to <em>“on for 0ms, then
off for XXXms”</em>. This clearly means the LED does <em>not</em> have an on
period, so it stays off.</p>

<p>Luckily, the system allows disabling blinking for notifications. One can
go under <code class="language-plaintext highlighter-rouge">Settings -&gt; Apps &amp; Notifications -&gt; Notifications -&gt;
Notification light</code> then, under the <code class="language-plaintext highlighter-rouge">General</code> heading, uncheck <code class="language-plaintext highlighter-rouge">Blink
light</code>.</p>

<p>From this moment on, notifications will trigger a persistent LED. Be
sure to choose the green LED for this, as red is already used for the
battery, so that if a notification arrives when the phone is charging,
you can still spot it.</p>

<!-- Links -->]]></content><author><name>Emanuele Giacomelli</name></author><category term="android" /><summary type="html"><![CDATA[I own a Wiko Fever 4G, and Android phone employing the Mediatek MT6753 SoC, which shipped with Android 6.0. Recently, I decided to pimp it by installing madOS, a custom ROM based on AOSP 8.1 supporting specifically that SoC.]]></summary></entry><entry><title type="html">Screen autoresize under VirtualBox Linux guests with mplugd</title><link href="https://binary-manu.github.io/binary-is-better/virtualbox/resize-vbox-screen-with-mplugd" rel="alternate" type="text/html" title="Screen autoresize under VirtualBox Linux guests with mplugd" /><published>2020-05-02T00:00:00+02:00</published><updated>2020-05-02T00:00:00+02:00</updated><id>https://binary-manu.github.io/binary-is-better/virtualbox/resize-vbox-screen-with-mplugd</id><content type="html" xml:base="https://binary-manu.github.io/binary-is-better/virtualbox/resize-vbox-screen-with-mplugd"><![CDATA[<p>Users of <a href="https://www.virtualbox.org/">VirtualBox</a> know that one of its nicest features
is <em>automatic guest screen resizing</em>. Basically, every time you perform
an action that causes the VM window to change its size (i.e. switch it
between fullscreen and windowed mode, or change its size by dragging a
border) the guest will receive an event that will cause it to change the
screen resolution to match the effective window size. This means that,
when fullscreen mode is entered or exited, you don’t have to open the
guest’s screen settings and change the resolution manually. Proper
useful!</p>

<h2 id="guest-additions-and-their-problems">Guest additions and their problems</h2>

<p>This feature works by means of the <em>guest additions</em>, extra software
that needs to be installed inside the guest and that provides tighter
integration with the hypervisor.</p>

<p>Since VirtualBox 6.0, it is possible to choose the type of emulated
graphics adapter:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">VBoxVGA</code> is a legacy adapter that is recommended for older OSes;</li>
  <li><code class="language-plaintext highlighter-rouge">VBoxSVGA</code> is recommended for modern Windows systems;</li>
  <li><code class="language-plaintext highlighter-rouge">VMSVGA</code> is recommended for modern Linux systems.</li>
</ul>

<p>Now, this is the theory. It looks like that any recent Linux system
should go with <code class="language-plaintext highlighter-rouge">VMSVGA</code>. However, I have encountered a number of issues
with that adapter, including:</p>

<ul>
  <li>automatic screen resizing not working even when the guest additions
are installed and exactly matching the version of the running
hypervisor, if the additions come from prepackaged binaries of my
distro. I needed to manually install them using the VirtualBox ISO to
get them working;</li>
  <li>even after fixing the point above, I got poor 2D performance in
everyday desktop activity, such as very slow window dragging, portions
of the screen showing as solid black and, more importantly, frequent
VM crashes.</li>
</ul>

<p>However, if I ignore the recommendation and keep using the legacy
<code class="language-plaintext highlighter-rouge">VBoxVGA</code> adapter, things get better, much better. No crashes, black
areas and windows can be dragged at a decent speed. But there is a price
to pay: automatic screen resizing no longer works with Linux guests if
they are not using the <code class="language-plaintext highlighter-rouge">VMSVGA</code> adapter. So you can basically choose
between an unstable VM with working autoresize or a stable one without
it.</p>

<p>Luckily, we are <em>not</em> forced to use <code class="language-plaintext highlighter-rouge">VMSVGA</code> to have working
screen resizing.</p>

<h2 id="enter-mplugd">Enter <code class="language-plaintext highlighter-rouge">mplugd</code></h2>

<p>Under a Linux VirtualBox machine with the guest additions installed,
every time we resize the guest window, the system can immediately detect
the new resolution. We can see that by calling <code class="language-plaintext highlighter-rouge">xrandr</code> after poking
with the window size. The system alone, however, will not take any
action when that happens. It is a VirtualBox additional component,
<code class="language-plaintext highlighter-rouge">VBoxClient</code>, which listens for window size changes and adapts the
screen to follow. As said above, this only works if using the <code class="language-plaintext highlighter-rouge">VMSVGA</code>
adapter.</p>

<p>However, since the window size can be read by any system tool, couldn’t
we use a different tool to listen for resolution changes in place of
<code class="language-plaintext highlighter-rouge">VBoxClient</code> and then call <code class="language-plaintext highlighter-rouge">xrandr</code> to change the screen resolution on
the guest?</p>

<p>The answer is yes, and such a tool already exists: <a href="https://github.com/anyc/mplugd">mplugd</a>.  It
a generic event listener based on plugins, which matches events against
rules to execute when a certain thing happen. You can write rules such
as “when event X happens, execute script Y”.</p>

<p>Since it already supports X events via a dedicated plugin, it can be put
into immediate use by telling it to adjust the screen resolution when a
screen change event happens.</p>

<p><em>Note: <code class="language-plaintext highlighter-rouge">mplugd</code> is written in Python 2, which has been retired at the
beginning of 2020. Nevertheless, this utility is extremely useful and
still working, so until it is ported to Python 3 or something better
comes out, it is a good way to work around VirtualBox problems.</em></p>

<p>Let’s see how we can install and configure it. The following sections
show how to do it on an <a href="https://www.archlinux.org/">Arch Linux</a> system, but the general
principles hold for any distribution.</p>

<h2 id="installation-and-configuration">Installation and configuration</h2>

<p>Under Arch Linux, <code class="language-plaintext highlighter-rouge">mplugd</code> is available via the AUR, so you can use your
favourite helper to install it, or do it manually. To handle X events, it
needs <code class="language-plaintext highlighter-rouge">python2-xlib</code>, which must be installed separately.
<code class="language-plaintext highlighter-rouge">python2-setuptools</code> are also needed:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pacman -Syu python2-setuptools
yay -Su mplugd-git python2-xlib 
</code></pre></div></div>

<p>Once installed, rule definitions can be placed globally under
<code class="language-plaintext highlighter-rouge">/etc/mplugd/action.d</code> or locally under <code class="language-plaintext highlighter-rouge">$HOME/.mplugd/action.d</code>. Since
we want screen resizing to work for every user, we go for the first
location.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Edit /etc/mplugd/action.d/vboxresizing.rules
[rule vboxresizing]
on_type=OutputChangeNotify
true_exec=xrandr --output %event_name% --auto
</code></pre></div></div>

<p>We are asking <code class="language-plaintext highlighter-rouge">mplugd</code> to invoke <code class="language-plaintext highlighter-rouge">xrandr</code> every time a video output
changes. The name of the output to be acted upon (i.e. <code class="language-plaintext highlighter-rouge">VGA-1</code>) is
derived from the event and made available for substitution as
<code class="language-plaintext highlighter-rouge">%event_name%</code>.</p>

<p>Last, we must ensure that <code class="language-plaintext highlighter-rouge">mplugd</code> is started every time a user logs
in. Since the package doesn’t come with a <code class="language-plaintext highlighter-rouge">systemd</code> unit, we will put a
global desktop entry for it under <code class="language-plaintext highlighter-rouge">/etc/xdg/autostart/</code>, so that every
user gets it for free:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Edit /etc/xdg/autostart/mplugd.desktop
[Desktop Entry]
Name=mplugd
NoDisplay=True
Exec=/usr/bin/mplugd
</code></pre></div></div>

<p>Starting from the next login, the guest screen should automatically
resize, even when using the <code class="language-plaintext highlighter-rouge">VBoxVGA</code> adapter.</p>

<!-- Links --------------------------------------------------------- -->]]></content><author><name>Emanuele Giacomelli</name></author><category term="virtualbox" /><summary type="html"><![CDATA[Users of VirtualBox know that one of its nicest features is automatic guest screen resizing. Basically, every time you perform an action that causes the VM window to change its size (i.e. switch it between fullscreen and windowed mode, or change its size by dragging a border) the guest will receive an event that will cause it to change the screen resolution to match the effective window size. This means that, when fullscreen mode is entered or exited, you don’t have to open the guest’s screen settings and change the resolution manually. Proper useful!]]></summary></entry></feed>